{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the SeaTable Admin Manual","text":""},{"location":"#who-is-this-manual-for","title":"Who is this Manual for?","text":"<p>You want to run your own SeaTable Server, then this Seatable Admin Manual (Manual) is the place to be!</p> <p>Various IT skills are mandatory</p> <p>SeaTable is a sophisticated software solution comprised of multiple components that must seamlessly interact. Therefore, we advise running your own server only if you possess a solid understanding of topics such as Docker, Docker Compose, network ports, proxies, and Linux bash commands. Even the best documentation can not describe everything.</p> <p>If you want to use SeaTable, but you don't want to run your own server, SeaTable GmbH offers two other products next to SeaTable Server:</p> SeaTable Cloud: public SAAS <p>SeaTable Cloud is the product of choice for small- and medium-sized enterprises that just want to use SeaTable - quickly and at transparent cost. SeaTable Cloud can be used free-of-charge with the Free subscription. Registration for SeaTable Cloud requires only an email address. More features and higher resource limits are available in SeaTable Cloud's paid subscriptions.</p> <p>Register now for SeaTable Cloud</p> SeaTable Dedicated: private SAAS <p>SeaTable Dedicated is a custom SeaTable Server instance for you and your team operated by the SeaTable exports. You define which URL to use, which logo or color code should greet your users.</p> <p>Important: SeaTable Dedicated requires a minimum of 100 Users.</p> <p>Contact us and get a quote</p>"},{"location":"#scope-of-this-manual","title":"Scope of this Manual","text":"<p>This Manual covers all relevant admin topics, from installation, configuration, upgrade, and maintenance, and provides background information on software architecture, requirements, and development.</p> <p>This Manual is NO user manual. For information about how to use SeaTable, please refer to the user documentation.</p> <p>If you are a developer looking for development resources, please check out the Developer Manual and the API Reference.</p> <p>This is not the place for discussion either. You can ask questions about SeaTable in the SeaTable Forum. Looking forward to seeing you there!</p>"},{"location":"#contributing-to-this-manual","title":"Contributing to this Manual","text":"<p>You found an error in the Manual or you see the need to elaborate on a topic, please create a pull request. We appreciate your contribution!</p>"},{"location":"#what-is-seatable","title":"What is SeaTable?","text":"<p>SeaTable is a no-code database and app-building platform. At the first glimpse it looks like an online spreadsheet selection like google sheets, but under the hood it offers so much more. SeaTable helps you to record and manage all kinds of scattered information. Use Filters, Sortings or Group to work corabolative with friends and collegues. Visualize any data with various plugins like Kanban, Gallery or Calendar.</p> <p>With APIs and SDKs, you can quickly scale to your needs, automate data processing and automate business processes.</p> <p>Main features includes:</p> <ul> <li>A spreadsheet like interface to records data supporting collaboratively editing.</li> <li>A form app to collect data from outside.</li> <li>Mobile ready UI to be used on browsers in mobile system to view and collect data.</li> <li>Comprehensive API and SDK for adding extensions.</li> <li>Filters, sorts, charts and pivotal tables to visualize and analyze data.</li> </ul> <p>This Manual will help you to install, configure and update your own SeaTable Server.</p>"},{"location":"#installation","title":"Installation","text":"<p>This Manual provides two different approaches to installing SeaTable Server.</p>"},{"location":"#single-node-installation","title":"Single-Node Installation","text":"<p>There is a Single-Node Setup, where all components of SeaTable Server are installed on one server or virtual machine. All services can be reached by a single URL. The installation is straightforward thanks to the consequent usage of Docker. This setup is easy for testing and production for up to 100 users.</p> <p>Let's begin with the Single-Node installation</p>"},{"location":"#advanced-setup","title":"Advanced Setup","text":"<p>The Advanced Setup section doesn't entail a distinct installation method; rather, it offers detailed guidance on operating each component independently. It equips you with the knowledge needed to scale your SeaTable Server effectively. Whether you're seeking insights to enhance performance or aiming to construct a highly available cluster setup capable of supporting hundreds of thousands of users, this section provides comprehensive instructions to meet your objectives.</p>"},{"location":"#impressions-of-seatable","title":"Impressions of SeaTable","text":""},{"location":"#login-page","title":"Login Page","text":"<p>Every user accessing SeaTable via the browser must undergo authentication, typically through a combination of email and password. However, SeaTable goes beyond traditional methods, offering support for advanced authentication protocols such as LDAP, OAuth, and SAML. This ensures flexibility and security in user authentication, catering to diverse organizational needs and preferences</p> <p></p>"},{"location":"#home-page","title":"Home Page","text":"<p>At SeaTable's Home Page, you gain seamless access to all your bases, each of which functions as a distinct database or process. These bases serve as the foundation for organizing and managing your data, offering versatility in structuring your information according to your specific needs. Whether you're storing project data, tracking tasks, or managing customer information, SeaTable's intuitive interface empowers you to streamline your workflows and harness the full potential of your data assets.</p> <p></p>"},{"location":"#base-editor","title":"Base Editor","text":"<p>The base editor serves as the central hub of SeaTable, facilitating the structured storage of diverse information types for you and your team. With collaborative features seamlessly integrated, you can collectively work on your data in real-time. Utilizing the columns within your base, you can effortlessly create customizable input forms and unique views, empowering you to share specific data subsets with others efficiently.</p> <p>You have complete freedom in designing your bases. You determine the data to be saved and the manner in which you interact with it. Whether it's organizing project details, tracking inventory, or managing contacts, SeaTable empowers you to tailor your bases to your specific needs and workflows.</p> <p></p>"},{"location":"configuration/autostart/","title":"Autostart","text":""},{"location":"configuration/autostart/#autostart-of-the-docker-container","title":"Autostart of the docker container","text":"<p>In all our <code>yml</code> files, we have specified <code>restart: unless-stopped</code>. The function specifies that the container should always restart if it exits for any reason\u2014except if it was explicitly stopped by a user or administrator. This policy keeps your container running persistently unless you intentionally stop it.</p>"},{"location":"configuration/autostart/#autostart-of-seatable-service","title":"Autostart of SeaTable service","text":"<p>When you start the SeaTable Docker container, the SeaTable service and all its components launch automatically. There are only a few exceptions where this does not happen, such as when specific advanced configurations are in place:</p>"},{"location":"configuration/autostart/#deactivate-autostart","title":"Deactivate Autostart","text":"<p>There are situations under which the SeaTable service does not start automatically:</p> <ol> <li>you set the <code>.env</code> Variable <code>SEATABLE_START_MODE=cluster</code></li> <li>there is a <code>seatable-controller.conf</code> in the <code>conf</code> directory</li> </ol> <p>In both cases SeaTable expects to be part of an advanced setup where the service should not be started automatically. So if SeaTable service does not start automatically, check first, if one of these two situations are true.</p> <p>Otherwise check the logs of your container with <code>docker logs seatable-server</code>.</p>"},{"location":"configuration/base-rows-limit/","title":"Base supported rows limit","text":"<p>By default, a base contains up to 100,000 rows (excluding archived rows). Above 100,000 rows, the base will become read-only. If more than 150,000 rows, the base will fail to load.</p> <p>Base rows are limited for the following technical reasons:</p> <ul> <li>The base is read from the persistent storage (dtable-storage-server) into the memory of dtable-server, and the maximum support size is 600M. This is a limitation of Node.js technology, because a string in Node.js cannot exceed 600M. For safety reason, dtable-server will not attempt to load this base when it exceeds 300M. (Attachments in the base are not counted.)</li> <li>When the base is too large, it takes too much time for the server to serialize it and send it to the network when the client loads the base. At this time, the server cannot respond to other requests.</li> </ul> <p>Starting from version 3.4, for private deployment users, if your application scenario needs to support more than 100,000 rows in a base, but the storage space occupied by the base itself is not large (for example, it contains a large number of blank cells), you can modify the server's configuration, to support more than 100,000 rows.</p>"},{"location":"configuration/base-rows-limit/#dtable-server","title":"dtable-server","text":"<p><code>dtable_server_config.json</code></p> <pre><code>{\n   \"base_writable_limit\": 100000,\n   \"base_max_rows_limit\": 150000\n}\n</code></pre> <p>Among them, base_writable_limit is used to limit the rows written into the base. base_max_rows_limit is used to control when the rows in the base is greater than the number, the server refuses to load the base into memory. base_max_rows_limit needs to be greater than base_writable_limit.</p>"},{"location":"configuration/base-rows-limit/#dtable-web","title":"dtable-web","text":"<p><code>dtable_web_settings.py</code></p> <pre><code>BASE_WRITABLE_LIMIT = 100000\n</code></pre> <p>This is used to let the Web UI to become read-only when rows exceed the limit.</p>"},{"location":"configuration/dtable-api-gateway-conf/","title":"Configuration of api-gateway","text":"<p>This is a cheat sheet for the api-gateway configuration file <code>dtable-api-gateway.conf</code>. It contains all possible settings that can be configured as well as their default values.</p> <p>The default values provided here are best-effort (not built automatically). They will be used, if no value is defined at all.</p> <p>In the default values below, a value in the form <code>$XYZ</code> refers to an environment variable.</p> Configuration changes require a restart <p>New configuration options will only apply after a restart of SeaTable.</p> Notes about the configuration file format <p>The configuration file uses the INI format, which is a simple text-based format for storing configuration data. It consists of sections (denoted by square brackets, e.g., [general]) and key-value pairs.</p> <p>Comments in the configuration file start with the hash symbol <code>#</code> and extend to the end of the line.</p> <p>When dealing with special characters like single quotes <code>'</code>, double quotes <code>\"</code> or the hash symbol <code>#</code>, it's generally best to enclose the value in double quotes.</p> <p>The following options are grouped by their sections.</p>"},{"location":"configuration/dtable-api-gateway-conf/#example-configuration","title":"Example configuration","text":"<p>SeaTable does not create the <code>dtable-api-gateway.conf</code> file by default. The <code>api-gateway</code> will use the default configuration values if the file does not exist.</p>"},{"location":"configuration/dtable-api-gateway-conf/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/dtable-api-gateway-conf/#general","title":"<code>[general]</code>","text":"<p>This section contains general settings about api-gateway service.</p> Parameter Description Default <code>host</code> The address api-gateway listens on. Defaults to localhost. localhost <code>port</code> The port api-gateway listens on. 7780 <code>log_dir</code> Location for the api-gateway logs in the container. <code>log_level</code> Only log messages with level priority higher than this will be logged. Supported levels are \"debug\", \"info\", \"warn\", \"error\", with ascending priority. info <code>base_api_limit_per_minute</code> Limits the number of API calls per base per minute. If the option is set to a negative number, like -1, it means there is no limit. 500 <code>max_base_cache_size</code> Maximum base cache size in MB. 1024"},{"location":"configuration/dtable-api-gateway-conf/#cluster","title":"<code>[cluster]</code>","text":"<p>This section contains settings about api-gateway working with dtable-server or dtable-db cluster.</p> Parameter Description Default <code>etcd_endpoints</code> The address of the etcd, which should be same etcd with the dtable-server or dtable-db cluster. It's required if you enable dtable-server cluster or dtable-db cluster. It supports setting up multiple etcd endpoints like: 127.0.0.1:2379,127.0.0.1:2380 127.0.0.1:2379"},{"location":"configuration/dtable-api-gateway-conf/#dtable-db","title":"<code>[dtable-db]</code>","text":"<p>This section contains settings about api-gateway working with dtable-db.</p> Parameter Description Default <code>cluster_mode</code> Indicates whether dtable-db is running in cluster mode. Can be <code>true</code> or <code>false</code>. <code>false</code> <code>server_address</code> Address of the dtable-db instance. It's required if <code>cluster_mode</code> is set to <code>false</code>. You should not set it if <code>cluster_mode</code> is set to <code>true</code>. 127.0.0.1:7777"},{"location":"configuration/dtable-api-gateway-conf/#dtable-server","title":"<code>[dtable-server]</code>","text":"<p>This section contains settings about api-gateway working with dtable-server.</p> Parameter Description Default <code>cluster_mode</code> Indicates whether dtable-server is running in cluster mode. Can be <code>true</code> or <code>false</code>. <code>false</code> <code>server_address</code> Address of the dtable-server instance. It's required if <code>cluster_mode</code> is set to <code>false</code>. You should not set it if <code>cluster_mode</code> is set to <code>true</code>. 127.0.0.1:7777"},{"location":"configuration/dtable-db-conf/","title":"Configuration of dtable-db","text":"<p>This is a cheat sheet for the dtable-db configuration file <code>dtable-db.conf</code>. It contains all possible settings that can be configured as well as their default values.</p> <p>The default values provided here are best-effort (not built automatically). They will be used, if no value is defined at all. It is not necessary the value, that is written in the configuration file on first startup.</p> <p>In the default values below, a value in the form <code>$XYZ</code> refers to an environment variable.</p> Configuration changes require a restart <p>New configuration options will only apply after a restart of SeaTable.</p> Notes about the configuration file format <p>The configuration file uses the INI format, which is a simple text-based format for storing configuration data. It consists of sections (denoted by square brackets, e.g., [general]) and key-value pairs.</p> <p>Comments in the configuration file start with the hash symbol <code>#</code> and extend to the end of the line.</p> <p>When dealing with special characters like single quotes <code>'</code>, double quotes <code>\"</code> or the hash symbol <code>#</code>, it's generally best to enclose the value in double quotes.</p> <p>The following options are grouped by their sections.</p>"},{"location":"configuration/dtable-db-conf/#example-configuration","title":"Example configuration","text":"<p>This is a typical configuration file, created automatically on the first startup by SeaTable.</p> <pre><code>[general]\nhost = 127.0.0.1\nport = 7777\nlog_dir = /opt/seatable/logs\n\n[storage]\ndata_dir = /opt/seatable/db-data\n\n[dtable cache]\ndtable_server_url = \"http://127.0.0.1:5000\"\n\n[backup]\ndtable_storage_server_url = \"http://127.0.0.1:6666\"\nkeep_backup_num = 3\n</code></pre>"},{"location":"configuration/dtable-db-conf/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/dtable-db-conf/#general","title":"<code>[general]</code>","text":"<p>This section contains general settings about <code>dtable-db</code> service.</p> Parameter Description Default <code>host</code> The address <code>dtable-db</code> listens on. 0.0.0.0 <code>port</code> The port <code>dtable-db</code> listens on. 7777 <code>log_dir</code> Location for the <code>dtable-db</code> logs in the container. /opt/seatable/logs <code>log_level</code> Only log messages with level priority higher than this will be logged. Supported levels are \"debug\", \"info\", \"warn\", \"error\", with ascending priority. info <code>slow_query_threshold</code> If the processing time exceeds this threshold, a slow log will be recorded in addition to the normal log. Unit is in milliseconds. 1000 <code>query_per_minute_limit</code> Sets the total max. of API calls per minute for the entire system. The default is suitable for most cases. 50000 <p>Please use the following parameters only in very special occasions. In most cases you should use the default, which means no limitation.</p> Parameter Description Default <code>global_row_update_limit</code> Sets the global rate of row updates, deletes, and inserts per second, affecting SQL and API operations. 0 <code>row_update_limit</code> Sets the rate or row updates, deletes, and inserts per second and per base. 0"},{"location":"configuration/dtable-db-conf/#storage","title":"<code>[storage]</code>","text":"<p>This sections defines where the database files for bases with activated big data backend are stored and when old data is cleaned.</p> Parameter Description Default <code>data_dir</code> Location of the data directory in the container. You must specify this option. /opt/seatable/db-data <code>cleanup_at</code> The execution time of clean up deleted data. Format is <code>hh:mm</code>. 00:00"},{"location":"configuration/dtable-db-conf/#dtable-cache","title":"<code>[dtable cache]</code>","text":"<p>This sections contains options for caching bases from dtable-server.</p> Parameter Description Default <code>dtable_server_url</code> local address for dtable-server. You must specify this option. http://127.0.0.1:5000 <code>total_cache_size</code> The base cache size in MB. Default was increased from 500 (MB) to 2000 (MB) in version 4.4 2000"},{"location":"configuration/dtable-db-conf/#sql","title":"<code>[SQL]</code>","text":"<p>General configuration options of the output of the SQL endpoint.</p> Parameter Description Default <code>default_result_rows</code> Maximal number of rows returned in one query, if <code>LIMIT</code> syntax is not used. 100 <code>result_rows_hard_limit</code> Maximal number of rows returned in one query (system wide). Overrides any larger <code>LIMIT</code> value in a query 10000 <code>exec_cost_hard_limit</code> Maximal execution cost of a query. If the estimated cost of a query exceeds this limit, the query is rejected. 5000000"},{"location":"configuration/dtable-db-conf/#backup","title":"<code>[backup]</code>","text":"<p>3.0 </p> <p>Section <code>[backup]</code> contains options to configure backup functions for big data backend:</p> Parameter Description Default <code>dtable_storage_server_url</code> The URL of dtable storage server. Required to enable automatic backup. http://127.0.0.1:6666 <code>backup_at</code> The execution time of backup. Format is like <code>12:30</code>. It is mutual exclusion with <code>backup_interval</code>. 02:00 <code>keep_backup_num</code> The number of backups that will be kept, oldest backups will be removed. 3 <code>keep_days</code> Specifies the retention period for backups in days. Older backups are deleted. Overrides <code>keep_backup_num</code> if set; otherwise, <code>keep_backup_num</code> is used. <code>keep_frequency_days</code> Specifies daily backup period. After this, only one backup per month is kept. Requires <code>keep_days</code> to be set and &gt; <code>keep_frequency_days</code>. <p>Two different backup methods: which should I choose?</p> <p>Since version 5.2 SeaTable offers two backup approaches:</p> <ul> <li> <p>The first uses <code>keep_backup_num</code>, creating daily backups whenever changes were made and retaining a fixed number of the most recent ones, deleting the oldest when the limit is reached. Note that no new backup will be created if no changes were made to a base. This is the default option.</p> </li> <li> <p>The second approach, using <code>keep_days</code> and <code>keep_frequency_days</code>, offers a tiered retention strategy. It creates daily backups for the recent period specified by <code>keep_frequency_days</code>, then switches to monthly backups for the older period. This method provides detailed recent backups and efficient long-term storage, balancing data granularity with space conservation. For example, setting <code>keep_days = 180</code> and <code>keep_frequency_days = 7</code> would keep daily backups for the past week, then monthly backups for the past six months (except for the past week).</p> </li> </ul>"},{"location":"configuration/dtable-db-conf/#deprecated-or-removed-options","title":"Deprecated or removed options","text":""},{"location":"configuration/dtable-db-conf/#database","title":"<code>[database]</code>","text":"[database] is not necessary anymore <p>Since version 5.3, <code>dtable-db</code> reads database connection settings from environment variables. From version 2.7 to version 5.2, <code>dtable-db</code> used the database settings in <code>dtable_server_config.json</code>.</p> <p>The section <code>[database]</code> contained options for accessing the MySQL database used by dtable-server.</p> <ul> <li><code>host</code>: Address of database. You must provide this option.</li> <li><code>port</code>: Port of database. Defaults to 3306.</li> <li><code>user</code>: Username for login to the database. You must provide this option.</li> <li><code>password</code>: Password for the database user. You must provide this option.</li> <li><code>db_name</code>: Database name used by dtable-server. You must provide this option.</li> </ul>"},{"location":"configuration/dtable-db-conf/#general_1","title":"<code>[general]</code>","text":"<ul> <li><code>base_api_limit_per_day</code>: Limits the number of API calls per base per day. -1 means no limit.</li> </ul>"},{"location":"configuration/dtable-db-conf/#dtable-cache_1","title":"<code>[dtable cache]</code>","text":"<ul> <li><code>private_key</code>: Must be the same value like <code>DTABLE_PRIVATE_KEY</code> in <code>dtable_web_settings.py</code>. Only necessary if your version is before \"Enterprise edition 3.5.5\". If your version is newer the value is read from <code>dtable_server_config.json</code>.</li> <li><code>clean_cache_interval</code>: Interval between cache cleaning. Unit is in seconds. Defaults to 300. This option is removed in \"Enterprise edition 4.4.0\". Since 4.4.0 a real-time eviction mechanism replaced regular cache cleanup mechanism.</li> </ul>"},{"location":"configuration/dtable-db-conf/#sql_1","title":"<code>[SQL]</code>","text":"<ul> <li><code>group_by_stmt_limit</code>: Maximal number of concurrent <code>group by</code> requests. If the number of <code>group by</code> requests exceeds this limit, new <code>group by</code> queries will wait in a queue. Default is 2. This option is removed in version 5.1.0. This option was only relevant when querying bases with big-data. In 5.1.0 version <code>group by</code> queries can be handled by a new OLAP engine, which is much more efficient. So this option is no longer necessary.</li> </ul>"},{"location":"configuration/dtable-db-conf/#backup_1","title":"<code>[backup]</code>","text":"<ul> <li><code>backup_interval</code>: The interval between each backup. Unit is in seconds. The default value is 86400 (=24 hours). You can not define <code>backup_interval</code> and <code>backup_at</code> at the same time. This option is deprecated since version 5.2. It's suggested to backup your bases once per day with the <code>backup_at</code> option.</li> </ul>"},{"location":"configuration/dtable-events-conf/","title":"Configuration of dtable-events","text":"<p>This is a cheat sheet for the dtable-events configuration file <code>dtable-events.conf</code>. It contains all possible settings that can be configured as well as their default values.</p> <p>The default values provided here are best-effort (not built automatically). They will be used, if no value is defined at all. It is not necessary the value, that is written in the configuration file on first startup.</p> <p>In the default values below, a value in the form <code>$XYZ</code> refers to an environment variable.</p> Configuration changes require a restart <p>New configuration options will only apply after a restart of SeaTable.</p> Notes about the configuration file format <p>The configuration file uses the INI format, which is a simple text-based format for storing configuration data. It consists of sections (denoted by square brackets, e.g., [general]) and key-value pairs.</p> <p>Comments in the configuration file start with the hash symbol <code>#</code> and extend to the end of the line.</p> <p>When dealing with special characters like single quotes <code>'</code>, double quotes <code>\"</code> or the hash symbol <code>#</code>, it's generally best to enclose the value in double quotes.</p> <p>dtable-events reads values from dtable_web_settings.py</p> <p>Before SeaTable 5.3, <code>dtable-events</code> reads <code>dtable_web_settings.py</code> for internal URLs and various key settings. Ensure these configurations are correct.</p> <p>Other configuration files are not used, if you run dtable-events separately.</p> <p>Configurations in dtable-events.conf</p> <p>Since SeaTable 5.3, by default, you can start the dtable-events service without adding any configurations to <code>dtable-events.conf</code>, as the the key startup configurations (i.e. MySQL and Redis) are already configured in the environment variables by default (i.e., <code>.env</code>). On the other hand, you can also add other dtable-events service related configurations to <code>dtable-events.conf</code>, which mainly contains some sections and their options: </p> <ul> <li>Section names in <code>dtable-events.conf</code> compose of uppercase and spaces (such as <code>[COMMON DATASET SYNCER]</code>). </li> <li>Option names will be mainly lowercase with underscores (such as <code>per_update_auto_rule_workers</code>).</li> </ul> <p>The following options are grouped by their sections.</p>"},{"location":"configuration/dtable-events-conf/#example-configuration","title":"Example configuration","text":"<p>By default, <code>dtable-events.conf</code> will be empty after the first startup of SeaTable:</p> <pre><code>[CLEAN DB]\nenabled = true\n</code></pre>"},{"location":"configuration/dtable-events-conf/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/dtable-events-conf/#database","title":"<code>[DATABASE]</code>","text":"Database can configure in .env <p>From SeaTable 5.3, you can specify the database configurations in <code>.env</code>. There is no need to keep this configuration in your <code>dtable-events.conf</code>.</p> Parameter Description Default <code>type</code> The database connection type. Use <code>mysql</code> for MySQL and MariaDB (other databases are not yet supported) mysql <code>host</code> MariaDB server address mariadb <code>port</code> MariaDB server port 3306 <code>db_name</code> Database name dtable_db <code>username</code> MariaDB username root <code>password</code> MariaDB password <code>$DB_ROOT_PASSWD</code>"},{"location":"configuration/dtable-events-conf/#redis","title":"<code>[REDIS]</code>","text":"Redis can configure in .env <p>From SeaTable 5.3, you can specify the redis configurations in <code>.env</code>. There is no need to keep this configuration in your <code>dtable-events.conf</code>.</p> Parameter Description Default <code>host</code> Redis server address redis <code>port</code> Redis server port 6379 <code>password</code> Redis server password"},{"location":"configuration/dtable-events-conf/#clean-db","title":"<code>[CLEAN DB]</code>","text":"<p>enabled by default.</p> <p>This setting controls whether SeaTable runs automated database cleanup tasks at 00:30 every day. Enabling this task ensures that your database stays lean and performs well. It also prevents the server from running out of disk space, since operation logs can take up quite a lot of space.</p> <p>In addition, the retention periods for the different database tables can be customized. Setting any value to <code>0</code> or <code>-1</code> causes the cleanup task to be skipped for the corresponding database table.</p> Parameter Description Default <code>enabled</code> Enables or disables the email notifications for base updates true <code>keep_dtable_snapshot_days</code> Retention period for snapshot entries in the database (in days) 365 <code>keep_activities_days</code> Retention period for activities (in days) 30 <code>keep_operation_log_days</code> Retention period for operation log entries (in days) 14 <code>keep_delete_operation_log_days</code> Retention period for delete operations in the operation log (in days) 30 <code>keep_dtable_db_op_log_days</code> Retention period for operation log entries inserted by dtable-db (in days) 30 <code>keep_notifications_usernotification_days</code> Retention period for user notifications (in days) 30 <code>keep_dtable_notifications_days</code> Retention period for base notifications (in days) 30 <code>keep_session_log_days</code> Retention period for session log entries (in days) 30 <code>keep_auto_rules_task_log_days</code> Retention period for automation rule logs (in days) 30 <code>keep_user_activity_statistics_days</code> Retention period for user activity statistics (in days) 0"},{"location":"configuration/dtable-events-conf/#email-sender","title":"<code>[EMAIL SENDER]</code>","text":"<p>enabled by default.</p> <p>SeaTable runs this task every hour to send base email notifications for base updates to the users. It also generates the log file <code>dtable_updates_sender.log</code>.</p> Parameter Description Default <code>enabled</code> Enables or disables the email notifications for base updates true"},{"location":"configuration/dtable-events-conf/#automation","title":"<code>[AUTOMATION]</code>","text":"<p>enabled by default.</p> <p>In SeaTable, users have the ability to define triggers and actions within an automation rule. These rules are then automatically executed on a base.</p> Parameter Description Default <code>per_update_auto_rule_workers</code> Number of worker threads used for processing automation rule events 3"},{"location":"configuration/dtable-events-conf/#common-dataset-syncer","title":"<code>[COMMON DATASET SYNCER]</code>","text":"<p>enabled by default.</p> <p>SeaTable runs every hour this event to check for pending dataset syncs. The job processes datasets that need syncing based on their interval (<code>per_day</code>, <code>per_hour</code>) and validity.</p> Parameter Description Default <code>enabled</code> Enables or disables the common dataset syncer true"},{"location":"configuration/dtable-events-conf/#email-syncer","title":"<code>[EMAIL SYNCER]</code>","text":"<p>enabled by default.</p> <p>SeaTable runs this event at the 30th minute of every hour. The job processes email sync tasks defined in a base by the user.</p> Parameter Description Default <code>enabled</code> Enables or disables the email syncer true <code>max_workers</code> Maximum number of worker threads for processing email sync tasks 5"},{"location":"configuration/dtable-events-conf/#ldap-sync","title":"<code>[LDAP SYNC]</code>","text":"<p>disabled by default.</p> <p>SeaTable could sync LDAP accounts, if activated. This requires additional settings in <code>dtable_web_settings.py</code>. Please refer to LDAP Authentication.</p> Parameter Description Default <code>enabled</code> Enables or disables the ldap sync false <code>sync_interval</code> Specifies the interval at which the LDAP synchronization process should run, in seconds 3600"},{"location":"configuration/dtable-events-conf/#virus-scan","title":"<code>[VIRUS SCAN]</code>","text":"<p>disabled by default.</p> <p>This section configures how files are scanned for viruses:</p> <ul> <li>Whether scanning is enabled (enabled)</li> <li>The command used to scan files (scan_command)</li> <li>Return codes indicating infected or clean files (virus_code, nonvirus_code)</li> <li>Limits on file size and extensions to skip (scan_size_limit, scan_skip_ext)</li> <li>Concurrency settings (threads)</li> </ul> Parameter Description Default <code>enabled</code> Enables or disables virus scanning false <code>scan_command</code> Command used for virus scanning (e.g., clamscan) <code>virus_code</code> Return codes indicating a file is infected (e.g. 0) <code>nonvirus_code</code> Return codes indicating a file is clean (e.g. 1) <code>scan_interval</code> The interval at which the virus scan runs (in minutes) 60 <code>scan_size_limit</code> Maximum file size to scan (in MB); larger files are skipped 20 <code>scan_skip_ext</code> File extensions to exclude from scanning ['.bmp', '.gif', '.ico', '.png', '.jpg', '.mp3', '.mp4', '.wav', '.avi', '.rmvb', '.mkv'] <code>threads</code> Number of threads for parallel scanning 4"},{"location":"configuration/dtable-events-conf/#deprecated-or-removed-options","title":"Deprecated or removed options","text":""},{"location":"configuration/dtable-events-conf/#database_1","title":"<code>[DATABASE]</code>","text":"[DATABASE] is not necessary anymore <p>Since version 5.3, <code>dtable-events</code> reads database settings from environment variables.</p> <p>The section <code>[DATABASE]</code> contained options for accessing the MySQL database used by <code>dtable-events</code>.</p> <ul> <li><code>type</code>: Database connection type. Use <code>mysql</code> for MySQL and MariaDB. Other databases are not yet supported.</li> <li><code>host</code>: Address of database. You must provide this option.</li> <li><code>port</code>: Port of database. Defaults to 3306.</li> <li><code>username</code>: Username for login to the database. You must provide this option.</li> <li><code>password</code>: Password for the database user. You must provide this option.</li> <li><code>db_name</code>: Database name used by <code>dtable-events</code>. You must provide this option.</li> </ul>"},{"location":"configuration/dtable-events-conf/#redis_1","title":"<code>[REDIS]</code>","text":"[REDIS] is not necessary anymore <p>Since version 5.3, <code>dtable-events</code> reads Redis connection settings from environment variables.</p> <p>The section <code>[REDIS]</code> used to contain the following options:</p> <ul> <li><code>host</code>: Redis server address. Defaults to <code>redis</code>.</li> <li><code>port</code>: Redis server port. Defaults to <code>6379</code>.</li> <li><code>password</code>: Redis server password (optional).</li> </ul>"},{"location":"configuration/dtable-events-conf/#automation_1","title":"<code>[AUTOMATION]</code>","text":"<ul> <li><code>per_minute_trigger_limit</code>: This setting allowed an administrator to restrict the frequency of automation rule executions. It has been removed in SeaTable 5.3.</li> </ul>"},{"location":"configuration/dtable-events-conf/#rows-counter","title":"<code>[ROWS COUNTER]</code>","text":"<p>This section used to contain a single setting called <code>enabled</code> that could be used to enable a periodic counter that counted the total number of rows of each team. The section has been removed in SeaTable 5.3.</p>"},{"location":"configuration/dtable-server-config/","title":"Configuration of dtable-server","text":"<p>This is a cheat sheet for the dtable-server configuration file <code>dtable_server_config.json</code>. It contains all possible settings that can be configured as well as their default values.</p> <p>The default values provided here are best-effort (not built automatically). They will be used, if no value is defined at all. It is not necessary the value, that is written in the configuration file on first startup.</p> <p>In the default values below, a value in the form <code>$XYZ</code> refers to an environment variable.</p> Configuration changes require a restart <p>New configuration options will only apply after a restart of SeaTable.</p> Notes about the configuration file format <p>The configuration file uses the JSON format (JavaScript Object Notation), which is a lightweight, text-based format for storing and transmitting structured data. It consists of key-value pairs and nested objects, represented by curly braces {}. Comments are not supported in JSON.</p> <p>When dealing with special characters like single quotes ', double quotes \", or backslashes , JSON has specific escaping rules. Double quotes \" are used to enclose strings, and special characters within strings should be escaped with a backslash.</p> <p>JSON is strict about syntax, particularly with commas. Each key-value pair in an object must be separated by a comma, and there should be no trailing comma after the last key-value pair.</p>"},{"location":"configuration/dtable-server-config/#example-configuration","title":"Example configuration","text":"<p>By default, <code>dtable_server_config.json</code> will be empty after the first startup of SeaTable:</p> <pre><code>{}\n</code></pre>"},{"location":"configuration/dtable-server-config/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/dtable-server-config/#redis","title":"Redis","text":"Parameter Description Default <code>enable_notification_publish</code> Enable real-time notifications via Redis false"},{"location":"configuration/dtable-server-config/#persistence","title":"Persistence","text":"<p><code>dtable-server</code> keeps bases in memory. After a certain time, the bases are persisted to storage (via dtable-storage-server).</p> Parameter Description Default <code>save_interval</code> Auto-save interval for modified bases, in milliseconds. (300000 = 5min) 300000"},{"location":"configuration/dtable-server-config/#service-urls","title":"Service URLs","text":"Parameter Description Default <code>dtable_web_service_url</code> dtable-web service URL http://127.0.0.1:8000/ <code>dtable_db_service_url</code> dtable-db service URL http://127.0.0.1:7777/ <code>dtable_storage_server_url</code> dtable-storage-server URL http://127.0.0.1:6666/ API-Gateway is not configurable <p>API-Gateway URL is not configurable. It is always <code>dtable_web_service_url + api-gateway</code>.</p>"},{"location":"configuration/dtable-server-config/#row-limits","title":"Row Limits","text":"<p>Please note that increasing this value requires corresponding updates in <code>dtable_web_settings.py</code>, as detailed here.</p> Parameter Description Default <code>base_writable_limit</code> Soft limit for rows in a base. Exceeding this shows an error in the web interface. 100000 <code>base_max_rows_limit</code> Hard limit for rows in a base. Server prevents any writes beyond this number. 150000"},{"location":"configuration/dtable-server-config/#base-size-limit","title":"Base Size Limit","text":"Parameter Description Default <code>base_max_size</code> Maximum size of a base's JSON file (excluding assets and big data) in MB. 200"},{"location":"configuration/dtable-server-config/#expert-configuration","title":"Expert Configuration","text":"<p>It is not recommended to change these values</p> Parameter Description Default <code>worker_threads_num</code> Number of worker threads serving list rows API (for custom shares or view shares only) 2 <code>worker_threads_rows_limit</code> Maximum rows, returned in custom shares or view shares 50000 <code>rows_api_max_limit</code> Maxmum number of rows returned by calling list rows API in dtable-server 1000 <code>redirect_list_rows_api</code> Redirect API requests to the API-Gateway. false"},{"location":"configuration/dtable-server-config/#cluster-setup","title":"Cluster Setup","text":"<p>For more information on setting up a SeaTable cluster, which is typically suitable for systems supporting hundreds of users, please contact us.</p>"},{"location":"configuration/dtable-server-config/#deprecated-settings","title":"Deprecated settings","text":""},{"location":"configuration/dtable-server-config/#mariadb-database-connection","title":"MariaDB Database Connection","text":"<p><code>dtable-server</code> used to read the database connection settings from <code>dtable_server_config.json</code>. Since version 5.3, <code>dtable-server</code> reads these settings from environment variables instead.</p> Parameter Description Default <code>host</code> MariaDB server address <code>$DB_HOST</code> <code>user</code> MariaDB username root <code>password</code> MariaDB password <code>$DB_ROOT_PASSWD</code> <code>database</code> Database name dtable_db <code>port</code> MariaDB server port 3306"},{"location":"configuration/dtable-server-config/#redis-connection","title":"Redis Connection","text":"<p><code>dtable-server</code> used to read the Redis connection settings from <code>dtable_server_config.json</code>. Since version 5.3, <code>dtable-server</code> reads these settings from environment variables instead.</p> Parameter Description Default <code>redis_host</code> Redis server address redis <code>redis_password</code> Redis password (often empty) <code>redis_port</code> Redis server port 6379 <code>enable_notification_publish</code> Enable real-time notifications via Redis false"},{"location":"configuration/dtable-server-config/#private-key","title":"Private Key","text":"<p>Starting with version 5.3, it is no longer required to provide <code>private_key</code> that is used to sign JWTs inside the configuration file. <code>dtable-server</code> reads this value from the <code>JWT_PRIVATE_KEY</code> environment variable instead.</p> Parameter Description Default <code>private_key</code> Shared secret for dtable_web connection. Must match <code>DTABLE_PRIVATE_KEY</code> in <code>dtable_web_settings.py</code>"},{"location":"configuration/dtable-server-config/#api-limits","title":"API-Limits","text":"<p>The API limits mentioned are no longer applicable. Prior to SeaTable version 5.2, separate API limits existed for dtable-server and dtable-db. However, starting with version 5.2, API requests are now handled by the api-gateway, which enforces unified API limits across the platform.</p> Parameter Description Default <code>api_req_max</code> Max API calls to a base per minute. 600 <code>api_base_day_max</code> Max API calls to a base per day. 5000 <code>rows_api_minute_max</code> Max listing rows API calls per minute. 100 <code>rows_api_hour_max</code> Max listing rows API calls per hour. 6000"},{"location":"configuration/dtable-server-config/#slave-mode-and-database-split","title":"Slave-Mode and Database-Split","text":"<p>These functions are deprecated and not maintained further.</p>"},{"location":"configuration/dtable-storage-server-conf/","title":"Configuration of dtable-storage-server","text":"<p>This is a cheat sheet for the dtable-storage-server configuration file <code>dtable-storage-server.conf</code>. It contains all possible settings that can be configured as well as their default values.</p> <p>The default values provided here are best-effort (not built automatically). They will be used, if no value is defined at all. It is not necessary the value, that is written in the configuration file on first startup.</p> <p>In the default values below, a value in the form <code>$XYZ</code> refers to an environment variable.</p> Configuration changes require a restart <p>New configuration options will only apply after a restart of SeaTable.</p> Notes about the configuration file format <p>The configuration file uses the INI format, which is a simple text-based format for storing configuration data. It consists of sections (denoted by square brackets, e.g., [general]) and key-value pairs.</p> <p>Comments in the configuration file start with the hash symbol <code>#</code> and extend to the end of the line.</p> <p>When dealing with special characters like single quotes <code>'</code>, double quotes <code>\"</code> or the hash symbol <code>#</code>, it's generally best to enclose the value in double quotes.</p> <p>The following options are grouped by their sections.</p>"},{"location":"configuration/dtable-storage-server-conf/#example-configuration","title":"Example configuration","text":"<p>This is a typical configuration file, created automatically on the first startup by SeaTable.</p> <pre><code>[general]\nlog_dir = /opt/seatable/logs\ntemp_file_dir = /tmp/tmp-storage-data\n\n[storage backend]\ntype = filesystem\npath = /opt/seatable/storage-data\n\n[snapshot]\ninterval = 86400\nkeep_days = 180\n</code></pre>"},{"location":"configuration/dtable-storage-server-conf/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/dtable-storage-server-conf/#general","title":"<code>[general]</code>","text":"<p>This section contains general settings about the <code>dtable-storage-server</code> service.</p> Parameter Description Default <code>host</code> The address <code>dtable-storage-server</code> listens on. <code>127.0.0.1</code> <code>port</code> The port <code>dtable-storage-server</code> listens on. <code>6666</code> <code>log_dir</code> The directory that dtable-storage-server writes logs to. Directory of the configuration file <code>temp_file_dir</code> The directory that dtable-storage-server creates buffers in. This setting is required."},{"location":"configuration/dtable-storage-server-conf/#storage-backend","title":"<code>[storage backend]</code>","text":"<p>This section is used to configure the storage backend.</p> Parameter Description Default <code>type</code> The type of storage backend. Options are <code>filesystem</code> and <code>s3</code>. <code>fileystem</code> <p>Depending on the chosen storage backend, there are additional settings:</p>"},{"location":"configuration/dtable-storage-server-conf/#filesystem-storage-backend","title":"Filesystem Storage Backend","text":"Parameter Description Default <code>path</code> The filepath of storage backend. <code>/opt/seatable/storage-data</code>"},{"location":"configuration/dtable-storage-server-conf/#s3-storage-backend","title":"S3 Storage Backend","text":"Parameter Description Default <code>bucket</code> The bucket name for the S3 backend. <code>key_id</code> The access key id for the bucket. <code>key</code> The secret access key fro the bucket. <code>use_v4_signature</code> Whether to use v4 signature. For a S3-compatible storage, it should be <code>false</code>. <code>aws_region</code> The AWS region (only when v4 signature is used). <code>host</code> The host address of S3 backend. Required for S3-compatible storage. Optional for AWS S3, but can be set to the endpoint you use. <code>path_style_request</code> Whether to use path style requests. For a S3-compatible storage, it should be <code>true</code>. <code>use_https</code> Whether to use https. <code>sse_c_key</code> Use server-side encryption with customer-provided keys (SSE-C). This setting is optional."},{"location":"configuration/dtable-storage-server-conf/#sse-c","title":"SSE-C","text":"<p><code>sse_c_key</code> is a string of 32 characters.</p> <p>You can generate <code>sse_c_key</code> with the following command\uff1a</p> <pre><code>openssl rand -base64 24\n</code></pre> <p>Incompatibility with Ceph-based object storage</p> <p>Please note that certain object storage providers that are based on Ceph (e.g. Hetzner Object Storage) currently do not support <code>CopyObject</code> operations when using SSE-C. This makes them incompatible with SeaTable. There is an open issue over at the Ceph issue tracker.</p>"},{"location":"configuration/dtable-storage-server-conf/#snapshot","title":"<code>[snapshot]</code>","text":"Parameter Description Default <code>interval</code> The interval for generating snapshots of a base, if there are changes to the base. Unit is in seconds. 86400 <code>enable_cleanup</code> Controls snapshot cleanup. Activate on only one node in multi-server setups. true <code>keep_days</code> Specifies the snapshot retention period in days. Older snapshots are deleted. As of version 5.2, the default is 180 days; previously, it was unlimited (0). 180 <code>keep_frequency_days</code> Specifies daily snapshot period for changed bases. After this, only one snapshot per month is kept. Default is 0 (always daily). Requires keep_days to be set and &gt; <code>keep_frequency_days</code>. 0 <p>Example of new tiered snapshot retention</p> <p>By default, SeaTable creates daily snapshots for changed bases, deleting snapshots older than 180 days.</p> <p>Since version 5.2, SeaTable offers a tiered retention strategy for snapshots. This approach balances recent, detailed backups with efficient long-term storage. For example, setting <code>keep_days = 180</code> and <code>keep_frequency_days = 7</code> would retail:</p> <ul> <li>Daily snapshots for the past week</li> <li>Monthly snapshots for the past six months, except for the past week.</li> </ul>"},{"location":"configuration/dtable-web-settings/","title":"dtable web settings","text":"<p>You need to restart SeaTable so that your changes take effect. </p> <p>You can also modify some of the config items as system administrator via web interface. These config items are saved in the database table (dtable_db/constance_config). The configuration in the database has a higher priority then the items in config file. If you want to disable settings via web interface, you can add <code>ENABLE_SETTINGS_VIA_WEB = False</code> to <code>dtable_web_settings.py</code>.</p>"},{"location":"configuration/dtable-web-settings/#basic-settings","title":"Basic settings","text":"<pre><code># for dtable-server\n## The private key is used to authenticate between DTable Web and DTable Server\n## DTABLE_SERVER_URL is for telling DTable Web the DTable Server's URL\n## DTABLE_SOCKET_URL is for telling DTable Web the web socket URL of DTable Server\nDTABLE_PRIVATE_KEY = 'xxxxx'\nDTABLE_SERVER_URL = 'https://seatable.yourdomain.com/dtable-server/'\nDTABLE_SOCKET_URL = 'https://seatable.yourdomain.com/'\n\n# The URL of dtable-web that for users to visit your SeaTable server\nDTABLE_WEB_SERVICE_URL = 'https://seatable.yourdomain.com/'\n\n# The help link URL\nHELP_LINK = 'https://seatable.com/help/'\n\n# The file server URL\nFILE_SERVER_ROOT = 'https://seatable.yourdomain.com/seafhttp/'\n\n# Redirect URL when logout\uff0cif not set, it will redirect to the SeaTable default page of logout\nLOGOUT_REDIRECT_URL = 'https://example.com/&lt;your-own-logout-page&gt;'\n</code></pre> <p>If you changed your domain, the URLs in above settings must be changed accordingly.</p>"},{"location":"configuration/dtable-web-settings/#sending-email-notifications","title":"Sending Email Notifications","text":"<p>Refer to email sending documentation.</p>"},{"location":"configuration/dtable-web-settings/#user-management-options","title":"User management options","text":"<p>The following options affect user registration, password and session.</p> <pre><code># Enable or disable registration on web. Default is `False`.\nENABLE_SIGNUP = False\n\n# Activate or deactivate user when registration complete. Default is `True`.\n# If set to `False`, new users need to be activated by admin in admin panel.\nACTIVATE_AFTER_REGISTRATION = True\n\n# Whether or not send activation Email to user when registration complete. Default is `False`.\n# This option will be ignored if `ACTIVATE_AFTER_REGISTRATION` set to `True`.\nREGISTRATION_SEND_MAIL = False\n\n# Whether allow user to delete its account. Default is `True`.\nENABLE_DELETE_ACCOUNT = True\n\n# Enforce all users to use 2-factor-authentication. Default is 'False'.\n# Changing 'True' to 'False' will deactivate 2FA for all users (they could still activate it\n# in their personal settings).\nENABLE_FORCE_2FA_TO_ALL_USERS = True\n\n# Whether to send email when a system admin adding a new member. Default is `True`.\nSEND_EMAIL_ON_ADDING_SYSTEM_MEMBER = True\n\n# Whether to send email when a system admin resetting a user's password. Default is `True`.\nSEND_EMAIL_ON_RESETTING_USER_PASSWD = True\n\n# Whether to send email when an admin activates a new account. Default is `True`.\nSEND_EMAIL_ON_ACTIVATING_USER = True\n\n# Whether to send email when add new user. Default is `True`.\nSEND_EMAIL_ON_ORG_ADD_NEW_USER = True\n\n# Whether to send email when org admin activating a member. Default is `False`.\nSEND_EMAIL_ON_ACTIVATING_ORG_USER = False\n\n# Send system admin notify email when user registration is complete. Default is `False`.\nNOTIFY_ADMIN_AFTER_REGISTRATION = True\n\n# Remember days for login. Default is 7\nLOGIN_REMEMBER_DAYS = 7\n\n# Attempt limit before showing a captcha when login.\nLOGIN_ATTEMPT_LIMIT = 3\n\n# deactivate user account when login attempts exceed limit\nFREEZE_USER_ON_LOGIN_FAILED = False\n\n# minimum length for user's password\nUSER_PASSWORD_MIN_LENGTH = 6\n\n# LEVEL based on four types of input:\n# num, upper letter, lower letter, other symbols\n# '3' means password must have at least 3 types of the above.\nUSER_PASSWORD_STRENGTH_LEVEL = 3\n\n# default False, only check USER_PASSWORD_MIN_LENGTH\n# when True, check password strength level, STRONG(or above) is allowed\nUSER_STRONG_PASSWORD_REQUIRED = False\n\n# Force user to change password when admin add/reset a user.\nFORCE_PASSWORD_CHANGE = True\n\n# Whether to allow SSO users to set a local password; default True, admin or user can set a local password by 'Reset password'\nENABLE_SSO_USER_CHANGE_PASSWORD = True\n\n# Whether to allow LDAP users to set a local password; default False, when True, admin or user can set a local password by 'Reset password'\nENABLE_LDAP_USER_CHANGE_PASSWORD = False\n\n# Age of cookie, in seconds (default: 2 weeks).\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n\n# Whether a user's session cookie expires when the Web browser is closed.\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\n\n# Whether to save the session data on every request. Default is `False`\nSESSION_SAVE_EVERY_REQUEST = False\n\n# Whether to allow a user to create a base in personal workspace. Default by `False`\nDISABLE_ADDING_PERSONAL_BASES = False\n</code></pre>"},{"location":"configuration/dtable-web-settings/#other-options","title":"Other options","text":"<pre><code># Choices can be found here:\n# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# Otherwise there may be problems with the export or data processing\n# of the date-column.\n# Here some examples:\nTIME_ZONE = 'UTC'\nTIME_ZONE = 'Europe/Berlin'\nTIME_ZONE = 'America/New_York'\n\n# Disable settings via Web interface in system admin-&gt;settings\n# Default is True\nENABLE_SETTINGS_VIA_WEB = False\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\n# Default language for sending emails.\nLANGUAGE_CODE = 'en'\n\n# Custom language code choice.\nLANGUAGES = (\n    ('en', 'English'),\n    ('zh-cn', '\u7b80\u4f53\u4e2d\u6587'),\n    ('zh-tw', '\u7e41\u9ad4\u4e2d\u6587'),\n)\n\n# Set this to your website/company's name. This is contained in email notifications and welcome message when user login for the first time.\nSITE_NAME = 'SeaTable'\n\n# Browser tab's title\nSITE_TITLE = 'Private SeaTable'\n\n\n# Configure user help pages\nHELP_LINK = 'https://seatable.com/help/'\n\n# Add privacy policy link and terms link\nPRIVACY_POLICY_LINK = ''\nTERMS_OF_SERVICE_LINK = ''\n\n# Predefined custom colors that can be used in color rules, options of single select and so on\nCUSTOM_COLORS = [\n    {'color':'#F5C043','text_color':'#212529'},\n    {'color':'#3064BC','text_color':'#FFFFFF'},\n]\n\n# Default Seafile Server URL used in third party integration\nDEFAULT_SEAFILE_SERVER = 'https://seafile.example.com/'\n</code></pre>"},{"location":"configuration/dtable-web-settings/#group-member-limit","title":"Group member limit","text":"<p>SeaTable groups are subject to a member limit.</p> <pre><code>GROUP_MEMBER_LIMIT = 500  # users, 500 is the default value\n</code></pre>"},{"location":"configuration/dtable-web-settings/#big-data-import-export-limits","title":"Big data import / export limits","text":"<p>When importing / updating a base from excel or exporting an big data view to Excel, you can set the maximum number of rows in the configuration file:</p> <pre><code>ARCHIVE_VIEW_EXPORT_ROW_LIMIT = 250000\nBIG_DATA_ROW_IMPORT_LIMIT = 500000\nBIG_DATA_ROW_UPDATE_LIMIT = 500000\n</code></pre>"},{"location":"configuration/dtable-web-settings/#base-export-limit","title":"Base export limit","text":"<p>SeaTable exports bases in DTABLE files. A DTABLE file contains all tabular data, assets, and a lot of metadata and can thus become large.</p> <pre><code>DTABLE_EXPORT_MAX_SIZE = 100 # in MB, 100MB is the default value\n</code></pre>"},{"location":"configuration/dtable-web-settings/#common-dataset-limits","title":"Common dataset limits","text":"<p>SeaTable synchronizes common datasets manually and automatically. The sync frequency is limited. The parameter <code>SYNC_COMMON_DATASET_INTERVAL</code> defines the minimum time between two syncs.</p> <pre><code>SYNC_COMMON_DATASET_INTERVAL = 5 * 60 # in seconds, 300 is the default value\n</code></pre>"},{"location":"configuration/dtable-web-settings/#limit-of-collaborators-loaded-in-a-base","title":"Limit of collaborators loaded in a base","text":"<p>After opening a base, the first 300 collaborators and the first 100 external application accounts are loaded by default. These data are used to select collaborators in the collaborator column. If you need to load more collaborators, you can modify the following parameters.</p> <pre><code>DTABLE_RELATED_USERS_PER_PAGE = 300\nDTABLE_APP_USERS_PER_PAGE = 100\n</code></pre>"},{"location":"configuration/dtable-web-settings/#embed-bases-into-other-webpages","title":"Embed bases into other webpages","text":"<p>To embed bases into other webpages using an iframe, the following options must be added to support user login:</p> <pre><code>SESSION_COOKIE_SAMESITE = 'None'\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SAMESITE = 'None'\nCSRF_COOKIE_SECURE = True\n</code></pre>"},{"location":"configuration/dtable-web-settings/#restful-api","title":"RESTful API","text":"<p>API throttling related settings. Enlarger the rates if you got 429 response code during API calls. API_THROTTLE_RATES is used to replace the old REST_FRAMEWORK option. API_THROTTLE_RATES is empty by default. You can add your custom THROTTLE_RATE to the option</p> <pre><code>API_THROTTLE_RATES = {\n   'ping': '3000/minute',\n   'anon': '60/minute',\n   'user': '3000/minute',\n   'sync_common_dataset': '60/minute',\n   'password_reset': '10/minute',\n   'org-admin': '1000/day',\n   'app': '1000/minute',\n   'import': '20/minute',   # Limit the rate of API calls for importing via excel/csv\n   'export': '20/minute',   # Limit the rate of export base, table and view\n}\n\n# Throttling whitelist used to disable throttle for certain IPs.\n# e.g. REST_FRAMEWORK_THROTTLING_WHITELIST = ['127.0.0.1', '192.168.1.1']\n# Please make sure `REMOTE_ADDR` header is configured in Nginx conf\nREST_FRAMEWORK_THROTTLING_WHITELIST = []\n</code></pre>"},{"location":"configuration/dtable-web-settings/#trash-retention-period","title":"Trash retention period","text":"<p>SeaTable keeps a deleted base in trash for a certain period of time (retention period). When the retention period expires, the base is purged from trash.</p> <pre><code>TRASH_CLEAN_AFTER_DAYS = 30   # in days, 30 days is the default value\n</code></pre>"},{"location":"configuration/environment-variables/","title":"List of available environment variables","text":"<p>SeaTable supports environment variables for initial deployment and configuration of some settings. This is the complete list of supported settings. With every version, new variables will be added. Please note that this page only denotes environment variables used by SeaTable and its core components.</p> <pre><code># components to be used\nCOMPOSE_FILE='caddy.yml,seatable-server.yml' # (1)!\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin' # (2)!\n\n# seatable server base url\nSEATABLE_SERVER_HOSTNAME='seatable.example.com' # (3)!\nSEATABLE_SERVER_PROTOCOL='https' # (4)!\n\n# initial web admin\nSEATABLE_ADMIN_EMAIL='me@example.com' # (5)!\nSEATABLE_ADMIN_PASSWORD='topsecret' # (6)!\n\n# database\nMARIADB_HOST='mariadb'\nMARIADB_PORT='3306'\nMARIADB_PASSWORD='topsecret' # (7)!\n\n# Redis\nREDIS_HOST='redis'\nREDIS_PORT='6379'\nREDIS_PASSWORD='topsecret'\n\nJWT_PRIVATE_KEY='topsecret' # (8)!\n\n# SeaDoc\nENABLE_SEADOC='false'\nSEADOC_PORT=''\n\n# Python-Pipeline\nPYTHON_SCHEDULER_URL='http://python-scheduler' # (13)!\nPYTHON_SCHEDULER_AUTH_TOKEN='topsecret'\n\n# E-Mail\nSEATABLE_EMAIL_USE_TLS= # (12)!\nSEATABLE_EMAIL_HOST=\nSEATABLE_EMAIL_HOST_USER=\nSEATABLE_EMAIL_HOST_PASSWORD=\nSEATABLE_EMAIL_PORT=\nSEATABLE_DEFAULT_FROM_EMAIL=\nSEATABLE_SERVER_EMAIL=\n\n# Templates\nSEATABLE_SHOW_TEMPLATES_LINK= # (9)!\nSEATABLE_TEMPLATE_BASE_API_TOKEN=\nSEATABLE_TEMPLATE_TABLE_NAME=\nSEATABLE_ENABLE_CREATE_BASE_FROM_TEMPLATE=\n\n# Logging\nSEATABLE_LOG_LEVEL=INFO # (10)!\n\n# Docker Images\n# You can use these variables to override the default images\nSEATABLE_IMAGE=\nSEATABLE_DB_IMAGE=\nSEATABLE_REDIS_IMAGE=\nIMAGE_CADDY=\n\n# Miscellaneous\nSEATABLE_HELP_LINK=https://help.seatable.com # (11)!\n</code></pre> <ol> <li>COMPOSE_FILE is a comma separated list of files without spaces. This list defines which components should run on this server.</li> <li>Get a list of timezones from Wikipedia.</li> <li>Select your domain or subdomain that points to your Server (without https://). You have to set an A-Record or CNAME pointing to your IP.</li> <li>Available options are <code>http</code> and <code>https</code>. Default value is <code>https</code>.</li> <li>Email address of an initial admin user. Is only used during the first startup.</li> <li>Password of an initial admin user. Is only used during the first startup.</li> <li>Password for the root user for the MariaDB databases.</li> <li>This private key is used to sign JWTs in SeaTable.</li> <li>Please refer to Templates for more information.</li> <li>Allowed values are <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code>.</li> <li>Please refer to Manual Link for more information.</li> <li>Please refer to Email Sending for more information.</li> <li>Please refer to Python Pipeline for more information.</li> </ol>"},{"location":"configuration/gunicorn-py/","title":"Configuration of Gunicorn","text":"<p>Gunicorn is used within the SeaTable Docker container as the WSGI server that runs the main web application and API processes (account endpoints). It sits between the web server nginx and the SeaTable Python code, efficiently handling concurrent user requests and ensuring robust performance.</p> <p>Typically no changes are necessary!</p> <p>SeaTable automatically configures Gunicorn with optimal settings for most deployments. Adjustments are only required in advanced scenarios, such as customizing performance, logging, or security settings. For most administrators, the default configuration ensures secure and efficient operation.</p>"},{"location":"configuration/gunicorn-py/#example-configuration","title":"Example configuration","text":"<p>A typical Gunicorn configuration file is created automatically by SeaTable during the first startup:</p> <pre><code>daemon = True\nworkers = 5\nthreads = 5\n\n# default localhost:8000\nbind = '127.0.0.1:8000'\n\n# Pid\npidfile = '/opt/seatable/pids/dtable-web.pid'\n\n# for file upload, we need a longer timeout value (default is only 30s, too short)\ntimeout = 1200\n\nlimit_request_line = 8190\n\n# Log\n#accesslog = '/opt/seatable/logs/gunicorn-access.log'\n#errorlog = '/opt/seatable/logs/gunicorn-error.log'\n</code></pre>"},{"location":"configuration/nginx-conf/","title":"Configuration of Nginx","text":"<p>SeaTable automatically generates a default <code>nginx.conf</code> file in the configuration folder. Since version 5.3, we no longer use this file.</p> <p>The reason for this change is that SeaTable updates often require modifications to the <code>nginx.conf</code> file to support new features. These changes are not customer-specific and can complicate the update process. To simplify updates and ensure stable, maintainable configurations, we now provide a custom <code>nginx.conf</code> file together with the YAML configuration files. This custom file, located in the compose folder (<code>/opt/seatable-compose</code>), is mounted into the container at startup.</p> <p>As a result, the <code>nginx.conf</code> file in the container\u2019s configuration folder is obsolete.</p>"},{"location":"configuration/nginx-conf/#customizing-nginx-configuration","title":"Customizing Nginx Configuration","text":"<p>When you update SeaTable, all default files in <code>/opt/seatable-compose</code> will be overwritten. This includes all changes that you may do in <code>nginx.conf</code> and <code>seatable-server.yml</code>. To preserve your custom configurations, follow these steps:</p> <ol> <li> <p>Create Custom Copies:    Make a copy of the <code>nginx.conf</code> and <code>seatable-server.yml</code> files, for example as <code>custom-nginx.conf</code> and <code>custom-seatable-server.yml</code> in your compose folder (<code>/opt/seatable-compose</code>).</p> </li> <li> <p>Edit the Custom Files:    Make any necessary changes to your custom configuration files. Note: All future modifications should be made to these custom files, not the original files.</p> </li> <li> <p>Update the .env File:    In your <code>.env</code> file, update the <code>COMPOSE_FILES</code> variable to include your <code>custom-seatable-server.yml</code> file.</p> </li> </ol> <p>After making changes, restart the SeaTable container for your changes to take effect. </p> <p>This ensures that your custom configuration is used instead of the original files.</p>"},{"location":"configuration/plugins/","title":"Plugins","text":"<p>SeaTable Server supports plugins. Plugins provide additional visualization or interaction possibilities within a SeaTable base. Examples of SeaTable plugins include the Gallery, the Map or the Kanban board, providing users with versatile options to visualize their data.</p> <p>Discover a comprehensive list of publicly available plugins and learn how to leverage them in our user documentation.</p> <p>Typically, installation of a plugin requires action from the system administrator on the SeaTable server. Once installed, any user can easily activate the plugin within their base, unlocking its full potential.</p>"},{"location":"configuration/plugins/#activation-update-of-plugins","title":"Activation / Update of plugins","text":"<p>System administrators have three distinct methods to install plugins into your SeaTable server. Users or team admins do not have the capability to install plugins.</p>"},{"location":"configuration/plugins/#option-1-installationupdate-via-web-interface","title":"Option 1: Installation/Update via Web Interface","text":"<p>Navigate to the system administration area and select Plugins from the left navigation bar. Click on Import plugin from market and choose the desired plugin. Please ensure that your SeaTable Server has internet access and can download zip files from https://market.seatable.io.</p> <p></p> <p>After a few moments, the plugin will appear in the list of installed plugins. Subsequently, all users can activate the plugins in any base.</p> <p>In the event that a new version becomes available, a button will appear on the plugin card. Simply click on this button to initiate the update process for the plugin.</p> <p></p>"},{"location":"configuration/plugins/#option-2-upload-via-zip-file","title":"Option 2: Upload via ZIP-File","text":"<p>If your server lacks internet connectivity, you can still install Plugins by downloading them as ZIP files to your local PC and subsequently uploading them to the SeaTable Server.</p> <p>The complete plugin archive can be found at the following URL: https://cloud.seatable.io/apps/custom/plugin-archive.</p> <p></p> <p>After a brief moment, the plugin will appear in the list of installed plugins, allowing all users to activate it in any base.</p> <p>To update a plugin, simply upload the latest version as a zip file. SeaTable will automatically detect the newer version and update the plugin accordingly.</p>"},{"location":"configuration/plugins/#option-3-plugins-via-api","title":"Option 3: Plugins via API","text":"<p>SeaTable Server offers API endpoints for installing and updating plugins. For further details, please refer to the API reference documentation.</p> <ul> <li>https://api.seatable.com/reference/addplugin</li> <li>https://api.seatable.com/reference/updateplugin</li> </ul>"},{"location":"configuration/plugins/#configuration-of-the-plugins","title":"Configuration of the plugins","text":"<p>Typically, plugins do not necessitate additional configuration. However, there are two exceptions:</p> <ul> <li>the Map plugin, which presently relies on the Google Maps API and requires two API keys.</li> <li>the Whiteboard Plugin (tldraw), which requires a separate Docker container.</li> </ul>"},{"location":"configuration/plugins/#map-plugin","title":"Map Plugin","text":"<p>The Map plugin exclusively supports the Google Maps Platform. To enable access to Google Maps data, two Google API Keys are required.</p> <p></p> <p>Generate two API keys and append the following lines to the configuration file <code>dtable_web_settings.py</code>.</p> <pre><code>DTABLE_GOOGLE_MAP_KEY = '&lt;replace with your Google Maps API Key&gt;'\nSERVER_GOOGLE_MAP_KEY = '&lt;replace with your Google Maps API Key&gt;'\n</code></pre> <p>Required scope of the API keys</p> <p>To safeguard your Google API Keys from abuse, restrict their usage. However, even with restrictions in place, abuse remains a risk\u2014especially since <code>DTABLE_GOOGLE_MAP_KEY</code> must be included in your source code and is therefore publicly accessible. Additionally, heavy use of the maps plugin may increase your Google billing, so monitor your spending closely.</p> Key Application restriction API restriction <code>DTABLE_GOOGLE_MAP_KEY</code> Restrict to your Server URL,like <code>https://cloud.seatable.io</code> Maps Javascript API <code>SERVER_GOOGLE_MAP_KEY</code> No website restriction Geocoding API <p>Remember to restart the SeaTable Service to apply the changes from the updated configuration file.</p> <p></p>"},{"location":"configuration/plugins/#whiteboard-plugin","title":"Whiteboard Plugin","text":"<p>Please follow this instruction to install the tldraw container on the same host where the SeaTable Server is running.</p>"},{"location":"configuration/roles-and-permissions/","title":"Roles and Permissions","text":"<p>1.0 Enterprise Edition</p> <p>In SeaTable Enterprise Edition, user and administor roles determine a user's/an administrator's permissions and quotas. (For org users, some permissions and quotes are also determined by the role assigned to the organization.)</p> <p>All changes relating to the SeaTable's roles are done in the configuration file <code>dtable_web_settings.py</code>.</p> <p>NOTE: Admin privileges are not part of the user role.</p>"},{"location":"configuration/roles-and-permissions/#user-roles","title":"User Roles","text":"<p>A user role is comprised of up to 10 permissions and up to 7 quotas. If a permissions or a quote is not specifically set in a role, the permission is assumed to be given (default value = True) and no quota is applied (default value = no value or empty string).</p>"},{"location":"configuration/roles-and-permissions/#user-permissions","title":"User Permissions","text":"<p>The following permissions are supported in user roles:</p> Permission Added in version Permission to ... Additional information can_add_dtable 1.0 Create bases If set to False, the user cannot create bases, neither under \"My bases\" nor in groups. can_add_group 1.0 Create groups If set to False, the user cannot create groups. The permission can_add_dtable is necessary to create bases inside a group. can_generate_external_link 1.0 Create external links If set to False, the user cannot create external links. (The menu item \"External link\" in the share dialog is hidden.) can_create_common_dataset 1.0 Create common datasets (CDS) If set to False, the user cannot create CDS. can_use_advanced_permissions 1.1 Use advanced permissions Advanced permissions include table permissions, column permissions, view share, custom sharing permissions, and row locking. can_run_python_script 1.4 Run Python scripts If set to False, the action \"Run script\" in the button column and \"Run script\" in the script side panel are disabled; in automation rules, the action \"Run Python script\" is not available. The execution of Python scripts requires the installation of Python Pipeline. Does not apply to org users and group bases. can_use_advanced_customization 2.0 Use advanced customizations Advanced customization includes custom team logo, custom form logo, custom URL for forms and app, base security settings, and role permissions in apps. can_use_external_app 2.2 Create and manage apps If set to False, the user cannot create apps or access apps in edit mode. (The app-icon is hidden in the base.) can_use_automation_rules 2.2 Create and manage automation rules If set to False, the user cannot create or modify automation rules. (The menu item \"Automation rules\" is hidden in the base.)  Does not apply to org users and group bases. can_archive_rows 2.3 Manage big data and move rows into the big data storage If set to False, the user cannot enable/disable big data management in a base, nor can the user move rows into the big data storage; if set to False, but big data is enabled in a base, the user can create and access big data views as well as unarchive rows. <p>The default value for all permissions is True. This means that if a permission is not specifically set, the role grants the permission.</p>"},{"location":"configuration/roles-and-permissions/#user-quotas","title":"User Quotas","text":"<p>The following quotas are supported in user roles:</p> Quota Added in version Description Additional information role_asset_quota 1.0 Total storage quota for all personal bases: '1G' means a limit of one gigabyte for files and images (assets); '' means no storage quota for assets Assets in shared bases owned by another user and assets in group bases do not count against the storage quota. Does NOT apply to org users. row_limit 1.0 Total row limit for all personal bases: 10000 means a limit of 10 000 rows; -1 means no row limit Rows in shared bases owned by another user, rows in group bases, and rows in the big data storage do not count against the row limit. Does NOT apply to org users. big_data_row_limit 3.1 Total row limit in big data storage for all bases: 100000 means a limit of 100 000 rows This item is used for the role of teams rather than users. Does NOT apply to org users. big_data_storage_quota 4.3 Total storage quota for all bases in big data storage: '1G' means a limit of one gigabyte; '' means no storage quota for big data storage. Assets in rows in the big data storage do not count against this quota. This item is used for the role of teams rather than users. Does NOT apply to org users. scripts_running_limit 2.3 Total number of Python scripts run within a month: 100 means 100 script runs per month; -1 means unlimited script runs The script run counter is reset at the beginning of every month. snapshot_days 2.1 Retention period for snapshots in days: 180 means a storage period of 180 days; no value means an unlimited retention period Snapshots older than the retention period are automatically removed. share_limit Max number of users a base can be shared with: 100 means a base can be shared with 100 users"},{"location":"configuration/roles-and-permissions/#standard-user-roles","title":"Standard User Roles","text":"<p>SeaTable has two standard, preconfigured user roles <code>default</code>and <code>guest</code>. They can be used in the Users' section of the system administration without prior configuration.</p> <p>The standard user roles are defined as follows:</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n    'default': {\n        'can_add_dtable': True,\n        'can_add_group': True,\n        'can_generate_external_link': True,\n        'can_create_common_dataset': True,\n        'can_run_python_script': True,\n        'can_use_advanced_permissions': True,\n        'can_use_advanced_customization': True,\n        'can_use_external_app': True,\n        'can_use_automation_rules': True,\n        'can_archive_rows': True,\n        'role_asset_quota': '',\n        'row_limit': -1,\n        'big_data_row_limit': -1,\n        'big_data_storage_quota': '',\n        'scripts_running_limit': -1,\n        'snapshot_days': 180,\n        'share_limit': 100\n    },\n    'guest': {\n        'can_add_dtable': False,\n        'can_add_group': False,\n        'can_generate_external_link': False,\n        'can_create_common_dataset': False,\n        'can_run_python_script': False,\n        'can_use_advanced_permissions': False,\n        'can_use_advanced_customization': False,\n        'can_use_external_app': False,\n        'can_use_automation_rules': False,\n        'can_archive_rows': False,\n        'role_asset_quota': '',\n        'row_limit': -1,\n        'snapshot_days': 30,\n        'share_limit': 100\n    },\n}\n</code></pre> <p>If you want to modify the permissions and quotes of either or both standard roles, copy-and-paste the above codeblock into <code>dtable_web_settings.py</code> and modify as per your needs. Restart SeaTable for the changes to take effect.</p>"},{"location":"configuration/roles-and-permissions/#custom-user-roles","title":"Custom User Roles","text":"<p>You can add additional user roles by extending the codeblock in <code>dtable_web_settings.py</code>.</p> <p>To add a role <code>employee</code>, for example, add the following lines (beginning at <code>'employee'</code> and ending at <code>},</code> ) to the existing role definition.</p> <pre><code>ENABLED_ROLE_PERMISSIONS = {\n    'employee': {\n        'can_add_dtable': True,\n        'can_add_group': False,\n        'can_create_common_dataset': False\n    },\n}\n</code></pre> <p>Restart SeaTable for the new role to become available in SeaTable.</p>"},{"location":"configuration/roles-and-permissions/#administrator-roles","title":"Administrator Roles","text":"<p>Similar to a user role, an administrator role is comprised of several permissions, but no quotes.</p>"},{"location":"configuration/roles-and-permissions/#administrator-permissions","title":"Administrator Permissions","text":"<p>The following permissions are supported in administrator roles:</p> Permission Added in version Permission to ... Additional information can_view_system_info 1.0 See/access \"Info\" menu in System admin can_view_statistic 1.0 See/access \"Statistic\" menu in System admin can_config_system 1.0 See/access \"Settings\" menu in System admin can_manage_user 1.0 See/access \"Users\" menu in System admin can_manage_group 1.0 See/access \"Groups\" menu in System admin can_manage_external_link 1.0 See/access \"External links\" menu in System admin can_view_admin_log 1.0 See/access \"Admin logs\" menu in System admin can_manage_user_log 1.0 See/access the tab \"Login logs\" in \"Audit logs\" menu in System admin can_manage_audit_log 1.0 See/access the tabs \"Action logs\" and \"File access logs\" in \"Audit logs\" menu in System admin can_manage_organization 1.0 See/access \"Organizations\" menu in System admin"},{"location":"configuration/roles-and-permissions/#standard-admininstrator-roles","title":"Standard Admininstrator Roles","text":"<p>SeaTable has four standard, preconfigured administrator roles <code>default admin</code>, <code>audit admin</code>, <code>daily admin</code> and <code>custom admin</code>. They can be used in the Users' section of the system administration without prior configuration.</p>"},{"location":"configuration/roles-and-permissions/#custom-administrator-roles","title":"Custom Administrator Roles","text":"<p>Just like a user role, you can add additional administrator roles by adding/modifying the following codeblock in <code>dtable_web_settings.py</code>.</p> <pre><code>ENABLED_ADMIN_ROLE_PERMISSIONS = {\n    'new_admin_role': {\n        'can_view_system_info': True,\n        'can_config_system': True,\n        'can_manage_user': True,\n        'can_manage_group': True,\n        'can_view_admin_log': True,\n    }\n}\n</code></pre>"},{"location":"configuration/seafile-conf/","title":"Configuration of Seafile","text":"<p>This is a cheat sheet for the seaf-server configuration file <code>seafile.conf</code>. It contains all possible settings that can be configured as well as their default values.</p> <p>The default values provided here are best-effort (not built automatically). They will be used, if no value is defined at all. It is not necessary the value, that is written in the configuration file on first startup.</p> <p>In the default values below, a value in the form <code>$XYZ</code> refers to an environment variable.</p> Configuration changes require a restart <p>New configuration options will only apply after a restart of SeaTable.</p> Notes about the configuration file format <p>The configuration file uses the INI format, which is a simple text-based format for storing configuration data. It consists of sections (denoted by square brackets, e.g., [general]) and key-value pairs.</p> <p>Comments in the configuration file start with the hash symbol <code>#</code> and extend to the end of the line.</p> <p>When dealing with special characters like single quotes <code>'</code>, double quotes <code>\"</code> or the hash symbol <code>#</code>, it's generally best to enclose the value in double quotes.</p> <p>The following options are grouped by their sections.</p>"},{"location":"configuration/seafile-conf/#example-configuration","title":"Example configuration","text":"<p>This is a typical configuration file, created automatically on the first startup by SeaTable.</p> <pre><code>[fileserver]\nport=8082\n\n[history]\nkeep_days = 60\n</code></pre>"},{"location":"configuration/seafile-conf/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/seafile-conf/#fileserver","title":"<code>[fileserver]</code>","text":"Parameter Description Default <code>host</code> The address the fileserver listens on. You can set this to <code>127.0.0.1</code> to further restrict access. 0.0.0.0 <code>port</code> The port the fileserver listens on. 8082 <code>worker_threads</code> The number of worker threads used to serve HTTP requests. 10"},{"location":"configuration/seafile-conf/#history","title":"<code>[history]</code>","text":"Parameter Description Default <code>keep_days</code> How many days the file history should be kept. 60"},{"location":"configuration/seafile-conf/#database","title":"<code>[database]</code>","text":"<p>Since version 5.3, Seafile reads the main database configuration settings from environment variables.</p> <p>The following options are optional and can be used to further tweak Seafile:</p> Parameter Description Default <code>connection_charset</code> The connection charset to use. <code>max_connections</code> Size of the connection pool for database connections. 100"},{"location":"configuration/seafile-conf/#deprecated-or-removed-options","title":"Deprecated or removed options","text":""},{"location":"configuration/seafile-conf/#database_1","title":"<code>[database]</code>","text":"[database] is not necessary anymore <p>Since version 5.3, <code>Seafile</code> reads the main database settings from environment variables.</p> <p>The section <code>[database]</code> contained options for accessing the MariaDB database used by <code>Seafile</code>.</p> <ul> <li><code>type</code>: Database connection type. Use <code>mysql</code> for MySQL and MariaDB. Other databases are not yet supported.</li> <li><code>host</code>: Address of database. You must provide this option.</li> <li><code>port</code>: Port of database. Defaults to 3306.</li> <li><code>username</code>: Username for login to the database. You must provide this option.</li> <li><code>password</code>: Password for the database user. You must provide this option.</li> <li><code>db_name</code>: Database name used by <code>seafile_db</code>. You must provide this option.</li> </ul>"},{"location":"configuration/sending-email/","title":"Sending Email Notifications on SeaTable","text":"<p>SeaTable requires an external SMTP account to send emails. There are currently five types of emails that SeaTable sends:</p> <ul> <li>User resets their password</li> <li>User has been added as a collaborator in a table, or mentioned in a comment (depends on the user's email notification settings and that the notification is not seen within 1 hour)</li> <li>User has been shared with a base or added to a group</li> <li>System admin adds new members</li> <li>System admin resets user password</li> </ul>"},{"location":"configuration/sending-email/#configuration","title":"Configuration","text":"<p>There are two ways to configure this SMTP account for system wide emails.</p> Environment variablesConfiguration file <p>4.4</p> <p>The SeaTable Server image supports auto configuration via environment variables. Add these variables to your .env file to configure the SMTP account.</p> Environment variable Description Example values <code>SEATABLE_EMAIL_USE_TLS</code> Activate/Deactivate TLS/SSL encryption <code>True</code> or leave empty. <code>SEATABLE_EMAIL_HOST</code> URL or IP address or the SMTP server <code>mail.gmx.net</code> <code>SEATABLE_EMAIL_HOST_USER</code> Username for authentication <code>seatable@gmx.de</code> <code>SEATABLE_EMAIL_HOST_PASSWORD</code> Password for authentication <code>topsecret</code> <code>SEATABLE_EMAIL_PORT</code> Port that should be used Typically <code>25</code>, <code>587</code> or <code>465</code> <code>SEATABLE_DEFAULT_FROM_EMAIL</code> Used for <code>From:</code> <code>seatable@gmx.de</code> <code>SEATABLE_SERVER_EMAIL</code> Used for <code>From:</code> in case of error reporting <code>seatable@gmx.de</code> <p>Add the following lines to <code>dtable_web_settings.py</code> to enable email sending.</p> <pre><code>EMAIL_USE_TLS = False                       # Either True or False\nEMAIL_HOST = 'smtp.example.com'             # Hostname of your SMTP server\nEMAIL_HOST_USER = 'username@example.com'    # Username for authentication\nEMAIL_HOST_PASSWORD = 'password'            # Password\nEMAIL_PORT = 25\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n</code></pre> <p>SMTP without authentication</p> <p>If you want to use the email service without authentication, leave <code>EMAIL_HOST_USER</code> and <code>EMAIL_HOST_PASSWORD</code> blank (<code>''</code>).</p> <p>Restart SeaTable service to reload the changes.</p>"},{"location":"configuration/sending-email/#debugging","title":"Debugging","text":"<p>If your email service does not work, check the log file <code>logs/dtable_web.log</code> to see what may have caused the problem. Otherwise use a command line tool like Swaks to debug your smtp settings.</p> <pre><code># example of a swaks command to verify your settings\nswaks --auth -tls \\\n--server &lt;EMAIL_HOST&gt; \\\n--protocol SMTP \\\n--port &lt;EMAIL_PORT&gt; \\\n--au &lt;EMAIL_HOST_USER&gt; \\\n--ap &lt;EMAIL_HOST_PASSWORD&gt; \\\n--from &lt;DEFAULT_FROM_EMAIL&gt; \\\n--to &lt;TO_ADDRESS&gt; \\\n--h-Subject: \"Subject of the mail\" \\\n--body 'Test email!'\n</code></pre>"},{"location":"configuration/sending-email/#examples","title":"Examples","text":""},{"location":"configuration/sending-email/#gmail","title":"Gmail","text":"<p>If you are using Gmail as email server, you can use the following settings.</p> <pre><code>EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'username@gmail.com'\nEMAIL_HOST_PASSWORD = 'password'\nEMAIL_PORT = 587\nDEFAULT_FROM_EMAIL = 'username@gmail.com'\nSERVER_EMAIL = 'username@gmail.com'\n</code></pre> <p>Allow access to less secure apps</p> <p>Google blocks by default external apps to authenticate against their SMTP servers. To enable SeaTable to send emails via your gmail account, you have to two possibilities:</p> <ol> <li>If you have enabled 2-step-verification in your Gmail settings, you'll need an App Password instead of your login password.</li> <li>If you haven't enabled 2-step-verification in your Gmail settings, you must then enable Less Secure Apps.</li> </ol>"},{"location":"configuration/sending-email/#brevo","title":"Brevo","text":"<p>SeaTable Cloud uses the SMTP relay of Brevo.</p> <pre><code>EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp-relay.sendinblue.com'\nEMAIL_HOST_USER = 'username@domain.com'\nEMAIL_HOST_PASSWORD = 'xsmtpsib-xxx'\nEMAIL_PORT = 587\nDEFAULT_FROM_EMAIL = 'SeaTable &lt;noreply@domain.com&gt;'\nSERVER_EMAIL = 'noreply@domain.com'\n</code></pre>"},{"location":"configuration/universal-apps/","title":"Universal apps","text":"<p>3.3 Enterprise Edition </p> <p>Enabled by default</p> <p>Since Version 4.0, universal apps are enabled by default.</p> <p>Before that version, universal app could be enabled with the following parameter in <code>dtable_web_settings.py</code>.</p> <pre><code>ENABLE_UNIVERSAL_APP = True\n</code></pre>"},{"location":"configuration/authentication/auth-switch/","title":"Switch authentication type","text":"<p>SeaTable Server supports multiple authentication types. Switching between the types is possible, but any switch requires modifications of SeaTable's databases.</p> <p>Note</p> <p>Before manually manipulating your database, make a database backup, so you can restore your system if anything goes wrong!</p> <p>See more about make a database backup.</p>"},{"location":"configuration/authentication/auth-switch/#migrating-from-local-user-database-to-external-authentication","title":"Migrating from local user database to external authentication","text":"<p>As an organisation grows and its IT infrastructure matures, the migration from local authentication to external authentication like LDAP, SAML, OAUTH is common requirement. Fortunately, the switch is comparatively simple.</p>"},{"location":"configuration/authentication/auth-switch/#general-procedure","title":"General procedure","text":"<ol> <li>Configure and test the desired external authentication. Note the name of the <code>provider</code> you use in the config file. The user to be migrated should already be able to log in with this new authentication type, but he will be created as a new user with a new unique identifier, so he will not have access to his existing bases. Note the <code>uid</code> from the <code>social_auth_usersocialauth</code> table. Delete this new, still empty user again.</li> <li>Determine the <code>xxx@auth.local</code> address of the user to be migrated.</li> <li>Replace the password hash with an exclamation mark.</li> <li>Create a new entry in <code>social_auth_usersocialauth</code> with the <code>xxx@auth.local</code>, your <code>provider</code> and the <code>uid</code>.</li> </ol> <p>The login with the password stored in the local database is not possible anymore. After logging in via external authentication, the user has access to all his previous bases.</p>"},{"location":"configuration/authentication/auth-switch/#example","title":"Example","text":"<p>This example shows how to migrate the user with the username <code>12ae56789f1e4c8d8e1c31415867317c@auth.local</code> from local database authentication to SAML. The SAML authentication is configured in <code>dtable_web_settings.py</code> with the provider name <code>authentik-saml</code>. The <code>uid</code> of the user inside the Identity Provider is <code>HR12345</code>.</p> <p>This is what the database looks like before these commands must be executed:</p> <pre><code>mysql&gt; select email,left(passwd,25) from EmailUser where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+------------------------------+\n| email                                       | left(passwd,25)              |\n+---------------------------------------------+------------------------------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | PBKDF2SHA256$10000$4cdda6... |\n+---------------------------------------------+------------------------------+\n\nmysql&gt; update EmailUser set passwd = '!' where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n\nmysql&gt; insert into social_auth_usersocialauth \\\n  (`username`, `provider`, `uid`, `extra_data`) \\\n  set \\\n  ('12ae56789f1e4c8d8e1c31415867317c@auth.local', 'authentik-saml', 'HR12345', '{}');\n</code></pre> <p>Afterwards the databases should look like this:</p> <pre><code>mysql&gt; select email,passwd from EmailUser where email = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+------- +\n| email                                       | passwd |\n+---------------------------------------------+--------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | !      |\n+---------------------------------------------+--------+\n\nmysql&gt; select username,provider,uid from social_auth_usersocialauth where username = '12ae56789f1e4c8d8e1c31415867317c@auth.local';\n+---------------------------------------------+----------------+---------+\n| username                                    | provider       | uid     |\n+---------------------------------------------+----------------+---------+\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | authentik-saml | HR12345 |\n+---------------------------------------------+----------------+---------+\n</code></pre>"},{"location":"configuration/authentication/auth-switch/#migrating-from-one-external-authentication-to-another","title":"Migrating from one external authentication to another","text":"<p>First configure the two external authentications and test them with a dummy user. Then, to migrate all the existing users you only need to make changes to the <code>social_auth_usersocialauth</code> table. No entries need to be deleted or created. You only need to modify the existing ones. The <code>xxx@auth.local</code> remains the same, you only need to replace the <code>provider</code> and the <code>uid</code>.</p>"},{"location":"configuration/authentication/auth-switch/#migrating-from-external-authentication-to-local-user-database","title":"Migrating from external authentication to local user database","text":"<p>First, delete the entry in the <code>social_auth_usersocialauth</code> table that belongs to the particular user.</p> <p>Then you can reset the user's password, e.g. via the web interface. The user will be assigned a local password and from now on the authentication against the local database of SeaTable will be done.</p>"},{"location":"configuration/authentication/auth-switch/#use-ldap-and-saml-together","title":"Use LDAP and SAML together","text":"<p>SeaTable supports since version 3.5 to use SAML and LDAP together for one user. To activate this function the following configuration has to be set in <code>dtable_web_settings.py</code>.</p> <pre><code># Enable that SAML and LDAP use the same username\nLDAP_SAML_USE_SAME_UID = True\n</code></pre> <p>More details about this option will follow soon.</p>"},{"location":"configuration/authentication/jwt/","title":"JSON Web Tokens","text":"<p>JSON Web Tokens (=JWT) is another authentication type SeaTable provides. It is used by the SeaTable API but it can also be used to allow server-to-server authentication. JWTs are used for example if you switch from (SeaTable Cloud)[https://cloud.seatable.io] to the (team administration)[https://account.seatable.io] without the need to re-authenticate. </p>"},{"location":"configuration/authentication/jwt/#what-is-jwt","title":"What is JWT?","text":"<p>JWT is a very popular technology but comes with its share of controversy. Some say you should never use it. Others say JWT authentication is amazing. We think that JWT can be very helpful in some specific scenarios. If you want to know more aboout JWT, please read this article. </p> <p>Here is a short introduction into JWT:</p> <ul> <li>JWT is an encoded and cryptographically signed URL, that contains an json object.</li> <li>This json object can contain any kind and amount of data. </li> <li>When a server receives this JWT it can guarantee the data it contains can be trusted because it's signed (not encrypted).</li> <li>Both parties (sender and receiver) must know a shared secret that is used to sign the JWT request.</li> </ul>"},{"location":"configuration/authentication/jwt/#how-to-configure-and-use-jwt","title":"How to configure and use JWT?","text":"<p>To enable the login with JWTs you have to define a secret key in your <code>dtable_web_settings.py</code> and restart the SeaTable service: <pre><code>SSO_SECRET_KEY = 'your-shared-secret-like-a38B232XQJLx392871#2DEF_dowfWE#_39dwefidWFwLw39fDFEF='\n</code></pre></p> <p>Afterwards SeaTable allows the login with the following URL <code>https://cloud.seatable.io/sso-auto-login/?token=...</code>. </p> <p>The token is the encoded json object with these elements:</p> <pre><code>{\n    \"exp\": \"1682582542\",\n    \"user_id\": \"b7bd00e840a14b748ce2bffdf409488b@auth.local\"\n}\n</code></pre>"},{"location":"configuration/authentication/jwt/#examples-how-to-use-jwt-and-generate-the-login-link","title":"Examples how to use JWT and generate the login-link","text":"<p>Every programming language offers libraries to sign JWTs. A good place to start looking for such a library is (https://jwt.io/libraries)[https://jwt.io/libraries].</p> <p>Here is an example with PHP and the (firebase-library)[https://github.com/firebase/php-jwt]:</p> <pre><code>// This code generates an URL to login as the user defined in user_id.\n// The URL is valid for 30 seconds.\n// After successful login, the user jumps to $url_next. \n\n$url_next = \"/\"\n$jwt_signing_key = \"your-shared-secret\"\n$payload = [\n    \"exp\" =&gt; time() + 30,\n    \"user_id\" =&gt; \"b7bd00e840a14b748ce2bffdf409488b@auth.local\",\n];\n$jwt = \\Firebase\\JWT\\JWT::encode($payload, $jwt_signing_key, 'HS256');\n$jwt_url = 'https://cloud.seatable.io/sso-auto-login/?token='. rawurlencode($jwt) . $url_next;\necho $jwt_url;\n</code></pre> <p>Other examples can be found here:</p> <ul> <li>Vue and Node.js</li> <li>Python</li> </ul>"},{"location":"configuration/authentication/ldap/","title":"LDAP","text":"<p>Lightweight Directory Access Protocol (LDAP) is is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services. Microsoft's Active Directory (AD) is fully compatible with LDAP. For simplicity, this Manual refers to LDAP and AD when using the term LDAP unless explicitly stated otherwise.</p> <p>This document assumes that you have a basic understanding of LDAP and that you understand the related terminology.</p>"},{"location":"configuration/authentication/ldap/#ldap-integration-in-seatable","title":"LDAP integration in SeaTable","text":"<p>SeaTable supports two modes of operation with LDAP:</p> <ul> <li>LDAP authentication: SeaTable uses the LDAP Server for user authentication.</li> <li>LDAP synchronisation: SeaTable syncs users and groups with the LDAP server regularly.</li> </ul> <p>Regardless of the mode of operation used, SeaTable requires each user in the LDAP server to have a unique ID.</p> <p>Additionally, LDAP in SeaTable can be configured to work seamlessly with SAML.</p>"},{"location":"configuration/authentication/ldap/#ldap-authentication","title":"LDAP Authentication","text":"<p>To enable LDAP Authentication (LDAP Auth), add the following parameters to <code>dtable_web_settings.py</code>, customize to your environment, and restart the SeaTable service:</p> Parameter Description Values ENABLE_LDAP On/off switch for authentication via LDAP <code>True</code> or <code>False</code> LDAP_PROVIDER Internal name to refer to LDAP as authentication type Alphanumeric string, e.g. 'ldap' LDAP_SERVER_URL URL of the LDAP server and port if non-standard URL, e.g. 'ldap://192.168.0.10:389' LDAP_BASE_DN DN of the root node used for querying users - all users under this node can log in LDAP DN LDAP_ADMIN_DN DN of the user used for querying the LDAP server - user must have the rights to access all information under LDAP_BASE_DN For LDAP: LDAP DNFor AD: LDAP DN or email LDAP_ADMIN_PASSWORD User password for LDAP_ADMIN_DN user Alphanumeric string LDAP_LOGIN_ATTR User attribute used for logging in 'mail', 'userPrincipalName' or 'sAMAccountName' <p>This is a simple sample configuration:</p> <pre><code>ENABLE_LDAP = True\nLDAP_PROVIDER = 'ldap'\nLDAP_SERVER_URL = 'ldap://192.168.0.10'\nLDAP_BASE_DN = 'ou=test,ou=test,dc=example,dc=com'\nLDAP_ADMIN_DN = 'administrator@example.com'\nLDAP_ADMIN_PASSWORD = 'secret'\nLDAP_LOGIN_ATTR = 'mail'\n</code></pre> <p>Some tips on how to select LDAP_BASE_DN and LDAP_ADMIN_DN:</p> <ul> <li>To determine your LDAP_BASE_DN attribute, you first need to open the graphical interface of the domain manager and browse your organizational structure.</li> <li>If you want all users in the system to be able to access SeaTable, you can use 'cn=users,dc=yourdomain,dc=com' as the BASE option (need to replace your domain name).</li> <li>If you only want people in a certain department to be able to access, you can limit the scope to a certain OU. You can use the <code>dsquery</code> command-line tool to find the DN of the corresponding OU. For example, if the name of the OU is <code>staffs</code>, you can run <code>dsquery ou -name staff</code>. More information can be found here.</li> <li>Although AD supports the use of usernames in email address format as <code>LDAP_ADMIN_DN</code> such as administrator@example.com, it sometimes does not correctly recognize this format. At this point, you can use <code>dsquery</code> to find the DN of the user. For example, if the username is <code>seatableuser</code>, run <code>dsquery user -name seatableuser</code> to find the user. More information can be found here.</li> </ul> <p>The following parameters are also available, but optional:</p> Parameter Description Values LDAP_FILTER Filter for users who can log in, e.g. a certain security group LDAP filter, e.g. 'memberOf=CN=group,CN=developers,DC=example,DC=com' LDAP_GROUP_FILTER LDAP_USER_ROLE_ATTR Name of user role in the LDAP server Attribute name, e.g. <code>title</code> LDAP_USER_FIRST_NAME_ATTR First part of the user's SeaTable nickname when nickname is spliced; default value is '' Attribute name, e.g. <code>givenName</code> LDAP_USER_LAST_NAME_ATTR Second part of the user's SeaTable nickname when nickname is spliced; default value is '' Attribute name, e.g. <code>sn</code> LDAP_USER_NAME_REVERSE Option to reverse order of first name and last name f spliced nickname; default value is <code>False</code> <code>True</code>or <code>False</code> LDAP_SAML_USE_SAME_UID Option to allow users to log in via LDAP and SAML using the same username <code>True</code>or <code>False</code> LDAP_CONTACT_EMAIL_ATTR Alternative attribute as a mail address when LDAP_LOGIN_ATTR is not <code>mail</code>; the attribute overrides the email address imported through LOGIN_ATTR; default value is '' LDAP_EMPLOYEE_ID_ATTR ID of the employee Attribute name, e.g. <code>33</code> <p>To enable LDAP authentication via SASL, add the following parameters to <code>dtable_web_settings.py</code>:</p> Parameter Description Values ENABLE_SASL On/off switch for LDAP authentication via SASL <code>True</code> or <code>False</code> SASL_MECHANISM SASL mechanism configured on LDAP server SASL mechanism, e.g. <code>DIGEST-MD5</code>, <code>CRAM-MD5</code>, <code>GSSAPI</code>, <code>Plain</code> SASL_AUTHC_ID_ATTR User attribute used for authentication identity mapping Attribute name, e.g. <code>uid</code>, <code>cn</code>"},{"location":"configuration/authentication/ldap/#ldap-synchronisation","title":"LDAP Synchronisation","text":"<p>To enable LDAP synchronisation (LDAP Sync), LDAP Auth must be configured and the following parameters added to <code>dtable_web_settings</code>:</p> Parameter Description Values LDAP_SYNC_GROUP On/off switch for group sync <code>True</code>or <code>False</code> LDAP_GROUP_MEMBER_ATTR Attribute used when syncing group members For most directory servers, the attributes is \"member\", which is the default value. For \"posixGroup\", it should be set to \"memberUid\". LDAP_GROUP_MEMBER_UID_ATTR User attribute set in 'memberUid' option, which is used in \"posixGroup\"; default value is <code>uid</code> LDAP_USER_OBJECT_CLASS Name of the class used to search for user objects; default value is <code>person</code> LDAP_GROUP_OBJECT_CLASS Name of the class used to search for group objects; default value is <code>group</code> For LDAP: <code>groupOfNames</code>, <code>groupOfUniqueNames</code>, <code>posixGroup</code>For AD: <code>group</code> LDAP_GROUP_UUID_ATTR ...; default value is <code>ObjectGUID</code> For LDAP: refer to https://ldapwiki.com/wiki/Universally%20Unique%20IdentifierFor AD: <code>ObjectGUID</code> SYNC_GROUP_AS_DEPARTMENT Option to sync LDAP groups as departments rather than SeaTable groups <code>True</code>or <code>False</code> LDAP_DEPARTMENT_NAME_ATTR Name of the department when SYNC_GROUP_AS_DEPARTMENT = True, the default department name is the OU name Object name, e.g. <code>description</code> <p>Additionally, the following parameters must be added to <code>dtable-events.conf</code>:</p> <pre><code>[LDAP_SYNC]\nenabled = true\nsync_interval = 60  # The unit is seconds\n</code></pre>"},{"location":"configuration/authentication/ldap/#ldap-and-saml","title":"LDAP and SAML","text":"<p>In some situations, it is useful to configure LDAP - especially LDAP Sync - and SAML as authentication providers. In this case, SeaTable must be prevented from creating two different users (as identified by the <code>username</code>) for one and the same <code>uid</code>when the person authenticates via LDAP and SAML, which would be the default behavior.</p> <p>Add the following parameter to <code>dtable_web_settings.py</code> to instruct SeaTable to use the same <code>username</code> no matter if a user (as identified by its <code>uid</code>) authenticates via LDAP or SAML.</p> <pre><code>LDAP_SAML_USE_SAME_UID = True\n</code></pre> <p>When enabled, SeaTable creates an additional record for the authenticating user in social_auth_usersocialauth when the user logs in using LDAP. This record maps the <code>username</code> to the <code>uid</code> for the SAML provider.</p>"},{"location":"configuration/authentication/oauth/","title":"OAuth","text":"<p>First, register the Client App on the OAuth authorization server (such as Github), remember the Client ID and Client Secret, and set the Redirect Uri (Authorization callback URL in Github).</p> <p>Add the following configuration to dtable_web_settings.py:</p> <pre><code>ENABLE_OAUTH = True\nOAUTH_ENABLE_INSECURE_TRANSPORT = True\nOAUTH_PROVIDER_DOMAIN = 'github.com'\nOAUTH_CLIENT_ID = \"wd529b3b2ae8320e06fr\"\nOAUTH_CLIENT_SECRET = \"8159c3dcc8ef197cc3bbd94ff6cf101c93ba6d8r\"\nOAUTH_REDIRECT_URL = 'https://test.seatable.cn/oauth/callback/'\nOAUTH_AUTHORIZATION_URL = 'https://github.com/login/oauth/authorize'\nOAUTH_TOKEN_URL = 'https://github.com/login/oauth/access_token'\nOAUTH_USER_INFO_URL = 'https://api.github.com/user'\nOAUTH_SCOPE = [\"user\",]\nOAUTH_ATTRIBUTE_MAP = {\n    \"id\": \"uid\",\n    \"name\": \"name\",\n    \"email\": \"contact_email\",\n}\n</code></pre> <p>The meaning of configuration option is as follows:</p>"},{"location":"configuration/authentication/oauth/#enable_oauth_insecure_transport","title":"ENABLE_OAUTH_INSECURE_TRANSPORT","text":"<p>If https is not configured, you can add it in dtable_web_settings.py <code>ENABLE_OAUTH_INSECURE_TRANSPORT = True</code>\u3002</p> <p>See more in https://requests-oauthlib.readthedocs.io/en/latest/examples/examples.html</p> <p>note:</p> <p>If you use Google OAuth2 login, the OAUTH_SCOPE configuration should be configured as follows: <pre><code>OAUTH_SCOPE = [\"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\"]\n</code></pre></p>"},{"location":"configuration/authentication/oauth/#oauth_provider","title":"OAUTH_PROVIDER","text":"<p>SeaTable uses this configuration to distinguish OAuth from other login methods\uff0csuch as: github.com.</p>"},{"location":"configuration/authentication/oauth/#oauth_redirect_url","title":"OAUTH_REDIRECT_URL","text":"<p>The Redirect URL, Authorization callback URL in Github, such as: https://test.seatable.cn/oauth/callback/</p>"},{"location":"configuration/authentication/oauth/#oauth_authorization_urloauth_token_urloauth_user_info_urloauth_scope","title":"OAUTH_AUTHORIZATION_URL\u3001OAUTH_TOKEN_URL\u3001OAUTH_USER_INFO_URL\u3001OAUTH_SCOPE","text":"<p>Set these values according to the document of OAuth provider, for GitHub, please check https://docs.github.com/en/developers/apps/authorizing-oauth-app</p>"},{"location":"configuration/authentication/oauth/#oauth_attribute_map","title":"OAUTH_ATTRIBUTE_MAP","text":"<p>The correspondence between the user fields obtained from the OAuth authorization server and the user fields in SeaTable.</p> <ul> <li>uid: the unique identifier for SeaTable identify a user from the OAuth provider.</li> <li>name: the name of a user in SeaTable</li> <li>contact_email: a user's contact email in SeaTable</li> </ul>"},{"location":"configuration/authentication/overview/","title":"Authentication","text":"<p>SeaTable Server Enterprise Edition (SeaTable) supports multiple authentication types.</p> <p>The default authentication type is authentication against the local user database with or without two-factor authentication.</p> <p>Additionally, SeaTable supports the following external authentication types:</p> <ul> <li>LDAP (Auth and Sync)</li> <li>OAuth</li> <li>SAML</li> </ul> <p>Finally, users can also authenticate using JWT, which may be interesting for some special use cases.</p>"},{"location":"configuration/authentication/overview/#username","title":"Username","text":"<p>SeaTable assigns every user a unique <code>username</code>, regardless of the authentication type used. The <code>username</code> serves as a key to link the different SQL database tables.</p> <p>The <code>username</code> looks like this: <code>b7bd00e840a14b748ce2bffdf409488b@auth.local</code> The corresponding regular expression is <code>^[a-f0-9]{32}(@auth.local)$</code>. The part of the username in front of the @-sign is a random value. If a user account is deleted and recreated with exactly the same details, the new <code>username</code> will be different from the previous one.</p> <p>The <code>username</code> is generated when the account is created. The time at which SeaTable creates the account in the database depends on the authentication type:</p> <ul> <li>Local user database: when the administrator registers the user or when the user self-registers</li> <li>LDAP Auth, OAuth, and SAML: when the user logs in for the first time</li> <li>LDAP Sync: when the sync job runs for the first time after the corresponding modification in the LDAP directory</li> </ul> <p>One username - multiple names</p> <p>For historical reasons, the SQL database tables use non-uniform names for <code>username</code>. In some tables, <code>username</code> is simply <code>user</code>. In some others, it goes by the name of <code>email</code> or <code>virtual_id</code>. Despite the inconsistent naming, it is always the same object. In the SeaTable Manual, only <code>username</code> is used unless reference is made to a specific table column.</p>"},{"location":"configuration/authentication/overview/#database-structure","title":"Database Structure","text":"<p>SeaTable's databases encompass almost 100 tables. Four of those are relevant for user management and authentication. (Tables related to 2FA are disregarded in this document.)</p> Database Table ccnet_db EmailUser dtable_db profile_profile dtable_db social_auth_usersocialauth dtable_db id_in_org_tuple <p>Note: The table LDAPUsers in ccnet_db is no longer used.</p> <p>The database tables shown in the following sections are for illustrative purposes only. Yet, they represent a possible system configuration and are internally consistent.</p>"},{"location":"configuration/authentication/overview/#table-emailuser","title":"Table EmailUser","text":"<p>The table EmailUser stores all user accounts of a SeaTable Server with the account status and privileges for every user account. Additionally, the table also contains the (hashed) passwords for all users that authenticate directly against SeaTable.</p> <pre><code>mysql&gt; select email,is_staff,is_active,left(passwd,25) from ccnet_db.EmailUser;\n+---------------------------------------------+----------+-----------+---------------------------+\n| email                                       | is_staff | is_active | left(passwd,20)           |\n+---------------------------------------------+---------------------------+----------+-----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local |        1 |         1 | PBKDF2SHA256$10000$4cd... |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local |        0 |         1 | PBKDF2SHA256$10000$736... |\n| 145504ae043c438cbb55f2afb084d586@auth.local |        0 |         1 | !                         |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local |        0 |         1 | !                         |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local |        0 |         1 | !                         |\n+---------------------------------------------+---------------------------+----------+-----------+\n</code></pre> <p><code>is_staff</code> determines whether the user has system administrator privileges. <code>is_staff</code> accepts only 0 (False) and 1 (True) as values.</p> <p><code>is_active</code> determines whether the user is active. Only active users can log into SeaTable. <code>is_active</code> also accepts only 0 (False) and 1 (True) as values.</p> <p>Users with a password in the local SQL database:</p> <p>SeaTable stores the passwords in the database as hash values. Every password hash starts with <code>PBKDF2SHA256$10000$</code> which means that the password was hashed using the PBKDF2SHA256 algorithm and that 10.000 iterations where used (more about PBKDF2 on Wikipedia).</p> <p>The first two users in the sample table above are users using the default authentication type. The first of the two is system administrator.</p> <p>External authentication:</p> <p>A <code>!</code> instead of a hash value means that the user uses external authentication. The table, however, does not contain the information of which authentication type.</p> <p>The last three users in the sample table above are users authenticating using either LDAP, OAuth, or SAML.</p>"},{"location":"configuration/authentication/overview/#table-profile_profile","title":"Table profile_profile","text":"<p>The table <code>profile_profile</code>, as the name indicates, contains profile information for every user in the system such as nickname, interface language, and contact email address. Every record in the table <code>EmailUser</code> has its correspondence in <code>profile_profile</code>.</p> <pre><code>mysql&gt; select user,nickname,lang_code,contact_email,login_id from dtable_db.profile_profile;\n+---------------------------------------------+--------------+-----------+-------------------+----------+\n| user                                        | nickname     | lang_code | contact_email     | login_id |\n+---------------------------------------------+--------------+-----------+-------------------+----------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | admin        | en        | admin@seatable.io | NULL     |\n| 12ae56789f1e4c8d8e1c31415867317c@auth.local | Test         | en        | test@seatable.io  | NULL     |\n| 145504ae043c438cbb55f2afb084d586@auth.local | Hulk         | en        | hulk@seatable.io  | hulk     |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Tony Stark   | en        | tony@seatable.io  | tony     |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | Steve Rogers | en        | steve@seatable.io | steve    |\n+---------------------------------------------+--------------+-----------+----------+-------------------+\n</code></pre> <p><code>nickname</code> is the display name of the user in the web interface of SeaTable.</p> <p><code>contact_email</code> is the real email address of the user. SeaTable sends notifications to this address.</p> <p><code>login_id</code> is an alternative to the username that the user can use to log in. The <code>login_id</code> can only be set via SeaTable API and not in system administration in SeaTable's web interface.</p> <p>Three valid combos for default authentication</p> <p>Users authenticating against the local database can use the following three combinations to login: \\1) <code>contact_email</code> + <code>password</code> \\2) <code>login_id</code> + <code>password</code> \\3) <code>username</code> + <code>password</code></p>"},{"location":"configuration/authentication/overview/#table-social_auth_usersocialauth","title":"Table social_auth_usersocialauth","text":"<p>The table <code>social_auth_usersocialauth</code> is critical for external authentication with LDAP, SAML, or OAuth. This table maps the user's SeaTable username to its unique identifiers from the identity providers. Every record in the table <code>EmailUser</code> without a password must have at least one correspondence in this table to be able to log into SeaTable using external authentication.</p> <pre><code>mysql&gt; select username,provider,uid from dtable_db.social_auth_usersocialauth;\n+---------------------------------------------+----------------+--------------------------------------+\n| username                                    | provider       | uid                                  |\n+---------------------------------------------+----------------+--------------------------------------+\n| 145504ae043c438cbb55f2afb084d586@auth.local | OAuth          | 877e1964-5585-4e1a-b069-1951ff79d373 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | Authentik-SAML | 28347@authentik                      |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | my-ldap        | 39731673920273                       |\n+---------------------------------------------+----------------+--------------------------------------+\n</code></pre> <p><code>provider</code> specifies the external authentication used. The name shown in this column is the name specified in the configuration of the external authentication source in<code>dtable_web_settings.py</code>.</p> <p><code>uid</code> in this table is the unique identifier as communicated by the external authentication service. The <code>uid</code> has to be provided by the external authentication method and allows to match the users from the external service with the users inside SeaTable. This <code>uid</code> must not be changed over the lifetime of the user (despite name, email address, ... changes) If the <code>uid</code> changes, SeaTable considers the user as a new user and creates a new <code>username</code> accordingly.</p>"},{"location":"configuration/authentication/overview/#table-id_in_org_tuple","title":"Table id_in_org_tuple","text":"<p>This table stores the user IDs. Because setting a user ID is optional, this table can be significantly shorter than all the other three tables.</p> <pre><code>mysql&gt; select * from dtable_db.id_in_org_tuple;\n+---------------------------------------------+-----------+--------+\n| virtual_id                                  | id_in_org | org_id |\n+---------------------------------------------+-----------+--------+\n| b7bd00e840a14b748ce2bffdf409488b@auth.local | 21        |     -1 |\n| 145504ae043c438cbb55f2afb084d586@auth.local | 222       |     12 |\n| 91e3f171e9214b0cab6418abfb70bc53@auth.local | 333AZE    |     34 |\n| 1a8d6725c4ae40c688b40028fd62c73f@auth.local | EF_3479   |     -1 |\n+---------------------------------------------+-----------+--------+\n</code></pre> <p><code>id_in_org</code> is the ID of the user. The user ID can be an alphanumeric string and must be unique within every team/organization.</p> <p><code>org_id</code> is the id of the team/organization which is unique in the system. An <code>org_id</code> value of -1 signifies that the user does not belong to any team/organization.</p>"},{"location":"configuration/authentication/saml/","title":"SAML","text":"<p>Security Assertion Markup Language (SAML) is an open standard for exchanging authentication and authorization data between parties. An important use case of SAML is web-browser single sign-on (SSO).</p> <p>This document assumes that you have a basic understanding of SAML and that you understand the related terminology.</p> <p>Recent</p> <pre><code>SeaTable's SAML configuration has undergone substantial changes in SeaTable 3.5. It is highly recommended to update to SeaTable 3.5 or younger if you use SAML. The SAML configuration in prior versions is no longer included in this document. You can still find it in Github.\n</code></pre>"},{"location":"configuration/authentication/saml/#sso-with-saml-in-seatable","title":"SSO with SAML in SeaTable","text":"<p>SeaTable supports SSO with SAML. Specifically, SeaTable supports SAML's IdP-init and SP-init authentication flows.</p> <p>Besides basic authentication and authorization, SeaTable's SAML implementation also allows to have additional attributes be set by the IdP. Specifically, the following five attributes are supported:</p> Attribute Description Stored in database table ... in column uid Unique identifier from the IdP dtable_db.social_auth_usersocialauth uid contact_email Email address of the user dtable_db.profile_profile contact_email name Name of the user dtable_db.profile_profile nickname employee_id User ID dtable_db.id_in_org_tuple id_in_org user_role Name of the role ccnet_db.UserRole role <p>SeaTable also supports the side-by-side configuration of SAML and LDAP. For more information, see LDAP.</p>"},{"location":"configuration/authentication/saml/#configuration","title":"Configuration","text":"<p>The SAML configuration proceeds in two phases:</p> <ol> <li>IdP: You create a new application in your IdP and configure the application. The IdP-side configuration is concluded with the download of the IdP's signing certificate.</li> <li>SeaTable: You upload the certificate and configure SAML in the config file <code>dtable_web_settings.py</code></li> </ol> <p>SeaTable's SAML configuration must be done manually on the command line. SeaTable does not provide a graphic wizard for configuring SAML. SeaTable cannot be configured by uploading the IdP's <code>metadata.xml</code>.</p> <p>Due to the large number of identity and access management (IAM) solutions, this document explains the SeaTable's SAML SSO configuration in general terms in the rest of this section and showcases the procedure using Microsoft Azure AD (Azure) as one example. (Additional IAM solutions may be added in the future.)</p>"},{"location":"configuration/authentication/saml/#creating-and-configuring-a-new-application-in-the-idp","title":"Creating and configuring a new application in the IdP","text":"<p>Add a new application in the IdP and assign at least one user to this application.</p> <p>The configuration of SSO with SAML for the just created application involves adding SeaTable's SAML URLs as well as specifying the SAML attributes. The following table contains the relevant URLs in generalized form. Replace <code>&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;</code> with the fully qualified domain name (FQDN) of your SeaTable Server.</p> Type URL Metadata URL <code>https://&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;/saml/metadata/</code> Assertion consumer service (ACS) URL <code>https://&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;/saml/acs/</code> Service URL <code>https://&lt;YOUR_SEATABLE_SERVER_HOSTNAME&gt;/</code>"},{"location":"configuration/authentication/saml/#downloading-the-certificate-from-the-idp","title":"Downloading the certificate from the IdP","text":"<p>After creating and configuring the application, download the IdP's signing certificate in PEM format. If the certificate cannot be downloaded in PEM format, download the metadata.xml instead and extract the certificate file from there. The content in the \\&lt;\\&lt;xxx:X509Certificate&gt;&gt; tag contains the certificate.</p> <p>Also note the URL for the IdP's metadata.xml.</p>"},{"location":"configuration/authentication/saml/#uploading-the-idps-certificate-to-seatable","title":"Uploading the IdP's certificate to SeaTable","text":"<p>The IdP's certificate must be saved on the SeaTable Server. The volume of the SeaTable container is the right place. When saved there, the certificate can be used in different SeaTable Docker containers, e.g. when a new container is created during an update.</p> <p>The default host path for the SeaTable Docker container is <code>/opt/seatable-server/</code> which is mapped to <code>/shared/</code> in the container. It is recommended to create a directory here. If you decide to create the directory elsewhere - which you can - you'll need to account for the custom path in the following steps.</p> <pre><code>$ mdkir /opt/seatable-server/certs/\n</code></pre> <p>Change into the directory, create a file idp.crt, and open the file with a text editor of your choice (here nano):</p> <pre><code>$ cd /opt/seatable-server/certs/\n$ touch idp.crt\n$ nano idp.crt\n</code></pre> <p>Paste the content of the certificate in the text editor and save the edits.</p> <p>Note: You can check the validity of the certificate file using openssl:</p> <pre><code>$ openssl x509 -in idp.crt -noout -dates\n</code></pre>"},{"location":"configuration/authentication/saml/#creating-seatables-certificate-and-key","title":"Creating SeaTable's certificate and key","text":"<p>Create SeaTable's certificate and key using openssl. The two files must be placed in the same directory as the IdP's certificate.</p> <pre><code>$ cd /opt/seatable-server/certs/\n$ openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout sp.key -out sp.crt\n</code></pre> <p>Once the command has finished, the directory contains three files: <code>idp.crt</code>, <code>sp.crt</code>, and <code>sp.key</code>.</p>"},{"location":"configuration/authentication/saml/#modifying-the-config-file-in-seatable","title":"Modifying the config file in SeaTable","text":"<p>To enable SAML, add the following parameters to <code>dtable_web_settings.py</code>, customize the values to your environment, and restart the SeaTable service:</p> Parameter Description Values ENABLE_SAML On/off switch for authentication via SAML <code>True</code> or <code>False</code> SAML_PROVIDER_IDENTIFIER Name for SAML provider used internally by SeaTable Alphanumeric string, e.g. \"Azure\", \"Auth0\" or \"Authentik\" SAML_REMOTE_METADATA_URL URL of metadata.xml used by SAML IdP URL, e.g. 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx' SAML_ATTRIBUTE_MAP Key-value pairs mapping SAML attributes to local attributes Keys are the SAML attributes from the IdP; some IdPs use attribute like 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress' SAML_CERTS_DIR Path to certificates within the Seatable Docker container Path, e.g. /opt/seatable/seahub-data/certs <p>This is a sample configuration. Adapt the values to your needs.</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'MySAMLProvider'\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/xxx/federationmetadata/2007-06/federationmetadata.xml?appid=xxx'\nSAML_ATTRIBUTE_MAP = {\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uid': 'uid',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'contact_email',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n}\nSAML_CERTS_DIR = '/shared/certs'\n</code></pre> <p>Details</p> <pre><code>The `SAML_ATTRIBUTE_MAP` defines the values provided by the IdP that SeaTable uses to create a user or update the user's profile.\nKey is the uid which is the unique identifier from the identity providers (not the username within SeaTable). The value of the uid should never change over the life cycle of the user. If you choose the email address as uid and the address changes, SeaTable will create a new user the next time the user logs in.\n</code></pre>"},{"location":"configuration/authentication/saml/#testing","title":"Testing","text":"<p>Now restart SeaTable to activate the configuration settings.</p> <p>Navigate to the login page of your SeaTable Server and click on \"Single Sign-On\" and try to log in. If the configuration is correct, you'll be redirected the IdP's login. Enter the credentials of a user that was assigned to the application created above.</p> <p>Check <code>dtable_web.log</code> for troubleshooting info if authentication fails.</p>"},{"location":"configuration/authentication/saml/#configuration-azure","title":"Configuration Azure","text":"<p>Browse to 'Azure Active Directory' and select 'Enterprise Applications'. In the 'Enterprise applications | All Applications' pane, click on 'New application' to open the 'Browse Azure AD Gallery'. Hit 'Create your own application', enter the name of the application in the input field (e.g. SeaTable), and click 'Create'. (For more information on how to add an enterprise application or how to create and assign a user account to an enterprise application, see Microsoft's Azure product documentation.) Azure will then create the application and open its overview page (see screenshot below).</p> <p></p> <p>Select the just created enterprise application. Click on '2. Set up single sign-on' in the overview page and then select SAML as single sign-on method. All SAML-related parameters for the new application are set in the configurator that now opens.</p> <p>Step 1 - Basic SAML Configuration: Click on 'Edit' in the top right corner and add SeaTable's metadata URL, ACS URL, and service URL as shown in the screenshot below.</p> <p></p> <p>Step 2 - Attributes and Claims: Click on 'Edit' in the top corner and define the claims as shown in the screenshot below.</p> <p></p> <p>Step 3 - SAML Certificates: Note the App Federation Metadata URL and download the certificate. The certificate in Base 64 is the correct certificate format.</p> <p></p> <p>Proceed with the upload of the certificate file to SeaTable. The SAML configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Azure'\nSAML_REMOTE_METADATA_URL = 'https://login.microsoftonline.com/826f1810-ccc9-.../federationmetadata/2007-06/federationmetadata.xml?appid=...'\nSAML_ATTRIBUTE_MAP = {\n    'uid': 'uid',                       #required\n    'mail': 'contact_email',            #required\n    'name': 'name',                     #required\n    'employeeid': 'employee_id',        #optional\n    'jobtitle': 'user_role',            #optional\n}\nSAML_CERTS_DIR = '/shared/certs/'\n</code></pre> <p>Replace the value of the <code>SAML_REMOTE_METADATA_URL</code> with the URL obtained in step 3 above.</p>"},{"location":"configuration/authentication/saml/#configuration-okta","title":"Configuration Okta","text":"<p>Browse to 'Your apps' and switch to the admin mode.</p> <p></p> <p>Click on 'Applications' in the navigation on the left and one more time on 'Applications' in the drop-down menu.</p> <p>Select 'Create App Integration' and choose 'SAML 2.0' as sign-in method. All SAML-related parameters for the new application are defined in the configurator that now opens.</p> <p></p> <p>Step 1 - General Settings: Enter the name of the app in the input field and upload an app logo.</p> <p></p> <p>Step 2 - Configure SAML: Add the single sign-on URL, the audience URI as well as the attributes as shown in the screenshot below. Finish the IdP-side configuration by clicking the button of the same name.</p> <p></p> <p>Step 3 - Feedback: You can skip this step.</p> <p>An overview of the configuration including all information for the server-side configuration is displayed once you made it past the 'Feedback'. Note the Metadata URL and download the signing certificate.</p> <p></p> <p>Switch to the tab 'Assignments', click the 'Assign' button, and add user to the app via 'Assign to People'</p> <p></p> <p>Proceed with the upload of the certificate file to SeaTable. The SAML configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Okta'\nSAML_REMOTE_METADATA_URL = 'https://...'\nSAML_ATTRIBUTE_MAP = {\n    'uid': 'uid',\n    'contact_email': 'contact_email',\n    'name': 'name',\n}\nSAML_CERTS_DIR = '/shared/certs'\n</code></pre> <p>Replace the value of the <code>SAML_REMOTE_METADATA_URL</code> variable with the URL obtained above.</p> <p>Restart the SeaTable service for the changes to take effect.</p>"},{"location":"configuration/authentication/saml/#configuration-auth0","title":"Configuration Auth0","text":"<p>Click on 'Applications' in the navigation on the left. Then choose 'Applications' in the drop-down menu to see a list of the apps that have already been configured in your account.</p> <p>Step 1 - Create Application: Enter the name of the app in the input field, select 'Regular Web Applications', and click on 'Create'.</p> <p></p> <p>Step 2 - Addons: Enable 'SAML2 WEB APP'. You will now see the 'SAML Protocol Parameters'. Copy the link of the 'Identity Provider Certificate' and the 'Identity Provider Metadata' in a temporary document.</p> <p></p> <p>Next, switch to the 'Settings' tab. Enter the URL of the SeaTable's assertion consumer service in the 'Application Callback URL' field.</p> <p></p> <p>Once you did that, scroll down a bit to finish the process by clicking 'enable'.</p> <p>Proceed with the upload of the certificate file to SeaTable that you obtained in step 2. The SAML configuration in <code>dtable_web_settings.py</code> should look like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'Auth0'\nSAML_REMOTE_METADATA_URL = 'https://...'\nSAML_ATTRIBUTE_MAP = {\n   'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier': 'uid',\n   'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'contact_email',\n   'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n}\nSAML_CERTS_DIR = '/shared/certs'\n</code></pre> <p>Replace the value of the SAML_REMOTE_METADATA_URL variable with the URL obtained in step 2.</p> <p>Restart the SeaTable service for the changes to take effect.</p>"},{"location":"configuration/authentication/saml/#configuration-authentik","title":"Configuration Authentik","text":"<p>Click on 'Applications' in the navigation on the left. Then choose 'Applications' in the drop-down menu to see a list of the apps that have already been configured in your account.</p> <p>Step 1 - Application</p> <p>Enter a name and a slug and click on Next.</p> <p>Step 2 - Choose A Provider</p> <p>Select SAML Provider.</p> <p>Step 3 - Configure Provider</p> <p>Select <code>default-provider-authorization-explicit-consent (Authorize Application)</code>.</p> <p>Under Protocol settings, set the ACS URL to <code>https://${SEATABLE_SERVER_HOSTNAME}/saml/acs</code> and set the Service Provider Binding to Post.</p> <p>Under Advanced protocol settings, select authentik Self-Signed Certificate as the Signing Certificate and enable the Sign assertions toggle.</p> <p>Step 4 - Configure Bindings</p> <p>Click on Next.</p> <p>Step 5 - Review and Submit Application</p> <p>Click on Submit</p> <p>Next, select Applications -&gt; Providers in the left sidebar and select the newly created provider. You should now see a Copy download URL to get the metadata URL and a Download button to download the signing certificate button.</p> <p>Since authentik's download URL returns a 302 redirect, you must run the following command to figure out the true download URL:</p> <pre><code>curl ${AUTHENTIK_DOWNLOAD_URL} -I\n</code></pre> <p>This will display the true download URL in the location header. Take a note of this URL.</p> <p>You should also download the signing certificate and store it under <code>/opt/seatable-server/certs</code>.</p> <p>You should now run the <code>openssl</code> command described in here to create <code>sp.crt</code> and <code>sp.key</code> inside <code>/opt/seatable-server/certs</code>.</p> <p>A basic SAML configuration in <code>dtable_web_settings.py</code> for authentik looks like this:</p> <pre><code>ENABLE_SAML = True\nSAML_PROVIDER_IDENTIFIER = 'authentik'\nSAML_REMOTE_METADATA_URL = 'YOUR_METADATA_URL'\nSAML_ATTRIBUTE_MAP = {\n    'http://schemas.goauthentik.io/2021/02/saml/uid': 'uid',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress': 'contact_email',\n    'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name': 'name',\n}\nSAML_CERTS_DIR = '/shared/certs'\n</code></pre> <p>Replace the value of the SAML_REMOTE_METADATA_URL variable with the URL you obtained via the <code>curl</code> command.</p> <p>Restart the SeaTable service for the changes to take effect.</p>"},{"location":"configuration/authentication/two-factor-auth/","title":"Two-Factor Authentication","text":"<p>Two-factor authentication (2FA) provides an extra layer of security against unauthorized access by requiring an additional piece of information besides username and password.</p> <p>SeaTable supports time-based, one-time passwords (TOTP) as a second factor with the default authentication.</p> <p>A TOTP app such as Google Authenticator or 2FAS is required to use 2FA with SeaTable.</p>"},{"location":"configuration/authentication/two-factor-auth/#global-configuration","title":"Global Configuration","text":"<p>To enable 2FA, add the following configuratiaon in the configuration file <code>dtable_web_settings.py</code>:</p> <pre><code>ENABLE_TWO_FACTOR_AUTH = True # Default value is False.\n</code></pre> <p>Optionally, 2FA can be enforced for for all users. If you wish to do that, add the following configuration to <code>dtable_web_settings</code>:</p> <pre><code>ENABLE_FORCE_2FA_TO_ALL_USERS = True # Defaule value is False.\n</code></pre> <p>Note: When disabling 2FA enforcement by changing <code>True</code> to <code>False</code>, 2FA is disabled for all users.</p>"},{"location":"configuration/authentication/two-factor-auth/#user-specific-configuration","title":"User-specific Configuration","text":"<p>System and team administrators can enforce 2FA for individual users in system and team administration of SeaTable's web interface, respectively.</p>"},{"location":"configuration/user-hierarchy/departments/","title":"Departments","text":"<p>Departments is an extension of the groups in SeaTable. It activates a new column type. This feature was developed especially for the chinease market and is deactivated by default at cloud.seatable.io.</p> <p>Departments can be configured with ...</p>"},{"location":"configuration/user-hierarchy/groups/","title":"Groups","text":"<p>No need to configure groups. Groups are enabled by default. With a user role, the abbility to create a group can be removed.</p>"},{"location":"configuration/user-hierarchy/overview/","title":"User Hierarchy","text":"<p>SeaTable offers:</p> <ul> <li>Users</li> <li>Groups</li> <li>Teams/Organizations</li> <li>Departments</li> </ul>"},{"location":"configuration/user-hierarchy/teams-organizations/","title":"Teams / Organizations (like in cloud.seatable.io)","text":"<p>Teams / Organizations is a feature mainly for bigger installations where groups of people should be completely separated. In fact, cloud.seatable.io uses this feature to separate the teams from each other. The users of a team can see each other, but other users are invisible for them.</p> <p>Besides Teams, SeaTable offers also deparments and groups. This article is focusing on teams only.</p> <p>Are Teams and Organizations the same?</p> <p>Teams and organizations can be considered as the same. Organization is the name of the function and therefore used in the configuration files but in cloud.seatable.io we used this function to separate accounts from each other and there we call it teams. In short:</p> <ul> <li>organization is the technical term.</li> <li>teams is the marketing term.</li> </ul>"},{"location":"configuration/user-hierarchy/teams-organizations/#how-to-configure-teams","title":"How to configure teams","text":"<p>You have to add these two settings in <code>dtable_web_settings.py</code>.</p> <pre><code>CLOUD_MODE = True\nMULTI_TENANCY = True\n</code></pre> <p>Please be aware that this activates a whole bunch of settings and restrictions. These are ...</p>"},{"location":"customization/custom-css/","title":"Custom CSS","text":"<p>SeaTable provides the flexibility to incorporate custom CSS code, allowing users to either conceal specific elements or modify their behavior. This article showcases several examples of what you can achieve with CSS customization.</p>"},{"location":"customization/custom-css/#how-to-add-custom-css","title":"How to add custom CSS","text":"<p>Custom css can be added as system admin via the browser of via the command line. Please refer to the article main color to get an explanation how to add custom css code.</p> <p></p>"},{"location":"customization/custom-css/#examples-of-custom-css","title":"Examples of custom CSS","text":""},{"location":"customization/custom-css/#example-switching-column-selection-to-a-single-row","title":"Example: Switching Column Selection to a Single Row","text":"<p>If you've transitioned from using https://cloud.seatable.io to a self-hosted system, you may have noticed a difference in how new columns are added. SeaTable Cloud presents the available column types in a single-row list, while your self-hosted server displays them in a two-row box.</p> <p>Two-Row Selection in a Self-Hosted Server</p> <p></p> <p>Single-Row Selection, as in SeaTable Cloud</p> <p></p> <p>To achieve a single-row display like in SeaTable Cloud, add the following CSS styles:</p> <pre><code>.select-column-popover .select-column-list .select-column-title {display:none;}\n.select-column-popover .select-column-list {display:block !important;}\n.select-column-popover .select-column-list .select-column-item {width:100% !important;}\n.mobile-editor-column .select-column-container .am-list-header {display:none;}\n</code></pre>"},{"location":"customization/customize-email-notifications/","title":"Customize Email Notifications","text":"<p>Note: Subject line may vary between different releases, this is based on Release 2.0.1. Restart Seahub so that your changes take effect.</p>"},{"location":"customization/customize-email-notifications/#user-reset-hisher-password","title":"User reset his/her password","text":"<p>Subject</p> <p>seahub/seahub/auth/forms.py line:103</p> <p>Body</p> <p>seahub/seahub/templates/registration/password_reset_email.html</p> <p>Note: You can copy password_reset_email.html to <code>seahub-data/custom/templates/registration/password_reset_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"customization/customize-email-notifications/#system-admin-add-new-member","title":"System admin add new member","text":"<p>Subject</p> <p>seahub/seahub/views/sysadmin.py line:424</p> <p>Body</p> <p>seahub/seahub/templates/sysadmin/user_add_email.html</p> <p>Note: You can copy user_add_email.html to <code>seahub-data/custom/templates/sysadmin/user_add_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"customization/customize-email-notifications/#system-admin-reset-user-password","title":"System admin reset user password","text":"<p>Subject</p> <p>seahub/seahub/views/sysadmin.py line:368</p> <p>Body</p> <p>seahub/seahub/templates/sysadmin/user_reset_email.html</p> <p>Note: You can copy user_reset_email.html to <code>seahub-data/custom/templates/sysadmin/user_reset_email.html</code> and modify the new one. In this way, the customization will be maintained after upgrade. </p>"},{"location":"customization/customize-email-notifications/#user-send-filefolder-share-link","title":"User send file/folder share link","text":"<p>Subject</p> <p>seahub/seahub/share/views.py line:668</p> <p>Body</p> <p>seahub/seahub/templates/shared_link_email.html</p>"},{"location":"customization/email-templates/","title":"E-Mail Templates","text":"<p>... will be added soon...</p>"},{"location":"customization/favicon/","title":"Replace Favicon in SeaTable","text":"<p>SeaTable allows you to easily replace the default SeaTable favicon with a custom one. SeaTable uses two favicons: a default one  and a notification favicon  that appears when you have unread notifications.</p>"},{"location":"customization/favicon/#configuration-via-the-web-interface","title":"Configuration via the Web Interface","text":"<p>Currently, it is not possible to replace these favicons through the system administrator interface.</p>"},{"location":"customization/favicon/#configuration-via-the-command-line","title":"Configuration via the Command Line","text":"<p>Instead of uploading favicons via the web interface, you must save them on the host using the command line. Simply save your favicons to the following paths and restart your container:</p> <ul> <li><code>/opt/seatable-server/seatable/seahub-data/custom/seatable-favicon.ico</code></li> <li><code>/opt/seatable-server/seatable/seahub-data/custom/seatable-notification.ico</code></li> </ul> <p>If the <code>custom</code> directory does not exist, you will need to create it.</p>"},{"location":"customization/favicon/#custom-path","title":"Custom Path","text":"<p>If you prefer to use a different file name, you can modify this by adding the following settings to <code>dtable_web_settings.py</code>. The path must be publically available and is therefore relative to the media path. SeaTable supports both <code>png</code> and <code>ico</code> files.</p> <pre><code>CUSTOM_FAVICON_PATH = 'custom/my-favicon.png'\nCUSTOM_FAVICON_NOTIFICATION_PATH = 'custom/my-notification-favicon.png'\n</code></pre>"},{"location":"customization/logo/","title":"Logo","text":"<p>The Logo of your SeaTable server can easily be replaced via the web interface or the command line.</p>"},{"location":"customization/logo/#configuration-via-the-web-interface","title":"Configuration via the web interface","text":"<p>Login to your SeaTable Server as system administrator and switch to the system admin area. Select the navigation point <code>Settings</code>.</p> <p></p> <p>Click an <code>Change</code> and select a new image file with the recommended resolution of 256*64 px. After a page reload the new logo is visible.</p> <p>It is recommended that your logo has a transparent background because it is used on the login-page, emails and also the web interface.</p> <p>SeaTable will save the logo as <code>mylogo.png</code> on the server at <code>/opt/seatable-server/seatable/seahub-data/custom/</code>.</p>"},{"location":"customization/logo/#configuration-via-the-command-line","title":"Configuration via the command line","text":"<p>Instead of upload the logo via the webinterface, you could also create the logo file via the command line. SeaTable expects that you generate a file called <code>mylogo.png</code> in the directory <code>/opt/seatable-server/seatable/seahub-data/custom/</code>. The directory <code>custom</code> does not exist in general, therefore you might have to create it first.</p> <pre><code>mkdir /opt/seatable-server/seatable/seahub-data/custom/\ncp mylogo.png /opt/seatable-server/seatable/seahub-data/custom/mylogo.png\n</code></pre> <p>If your logo is not immediately visible after a page reload, you have to restart the SeaTable container (not the SeaTable service). The SeaTable container has to create a symlink to make the logo file available to SeaTable.</p>"},{"location":"customization/main-color/","title":"Change the main color","text":"<p>SeaTable has an orange main color with the color-code <code>#FF8000</code>. If this color does not match your custom logo, it might be useful to replace this main color with another color of your choice.</p> <p>To do this we force SeaTable to use custom css code to overwrite the main color.</p> <p>The first step is you use the following color picker and select a new main color of your choice.</p> <p>Dark colors are better than bright ones</p> <p>You should select a color that is dark enough to be a good background for white font color. To switch also the font color from white to black is not yet part of this manual.</p> <p>Web interface overrule config files</p> <p>Please be aware that if you define a value in the webinterface, this always overrules the value in the config file.</p> Version 5.3Version 5.2Version 5.1Version 5.0Version 4.3 <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p> <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p> <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p> <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p> <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p>"},{"location":"customization/main-color/#configuration-via-the-web-interface","title":"Configuration via the web interface","text":"<p>Login to your SeaTable Server as system administrator and switch to the system admin area. Select the navigation point <code>Settings</code>. Team admins or normal users does not have the permission to access the system admin area.</p> <p>First you should set the checkbox for <code>ENABLE_BRANDING_CSS</code>. Then simply copy and paste () the css code and paste it to the input box of <code>Custom CSS</code>. Submit by clicking on the green .</p> <p>Reload your page of your browser and the color should be changed.</p>"},{"location":"customization/main-color/#configuration-via-config-file","title":"Configuration via config file","text":"<p>Open the configuration file <code>dtable_web_settings.py</code> and add this configuration line:</p> <pre><code>BRANDING_CSS = 'custom/custom.css'\n</code></pre> <p>Now copy the css code from this manual and save it to <code>/opt/seatable-server/seatable/seahub-data/custom/custom.css</code>. If the directory <code>custom</code> does not exist, you have to create it first.</p> <p>If your new color is not immediately visible after a page reload, you have to restart the SeaTable container (not the SeaTable service). The SeaTable container has to create a symlink to make the css file available to SeaTable.</p>"},{"location":"customization/manual-in-nav/","title":"Custom manual","text":"<p>By default SeaTable presents a \"Manual\" link on its home page. Starting with version v4.4 this link points to https://help.seatable.com but in all former versions, the link opened only a blank new browser tab.</p> <p></p> <p>Luckily it is super easy to change the behaviour of this manual link and to change the target URL.</p>"},{"location":"customization/manual-in-nav/#setup-the-target-url-of-the-manual-link","title":"Setup the target URL of the manual link","text":"<p>Open the configuration file <code>dtable_web_settings.py</code> located at <code>/opt/seatable-server/seatable/conf/</code> and add this configuration line. Change the value to your needs.</p> <pre><code>HELP_LINK = 'https://help.seatable.com/'\n</code></pre> <p>Don't forget to restart SeaTable service.</p>"},{"location":"customization/nav-items/","title":"Additional Navigation Items","text":"<p>SeaTable provides an easy way to add custom navigation items below the Help and Resources section on the left side of the page. For example, you can add a link to a status page (like from Gatus or Uptime Kuma).</p> <p>Here's how it might look:</p> <p></p>"},{"location":"customization/nav-items/#configuration","title":"Configuration","text":"<p>To add new items, simply append the following code to your <code>dtable_web_settings.py</code>. You can choose from nearly 400 available icons for the <code>icon</code> field. Use the search function below to find the perfect one.</p> <pre><code>CUSTOM_NAV_ITEMS = [\n  {\n    'icon': 'dtable-icon-app-statistics',\n    'desc': 'Status Page',\n    'link': 'https://stats.uptimerobot.com/R5GVEtrQK8'\n  }\n]\n</code></pre>"},{"location":"customization/nav-items/#search-for-icons-in-seatable","title":"Search for Icons in SeaTable","text":"<p>Browse through nearly 400 available icons in SeaTable by typing a keyword and pressing Enter. This will display all matching results. For a comprehensive view, type <code>dtable-icon</code> to see the entire collection of available icons.</p> <p></p>"},{"location":"customization/overview/","title":"UI Customiziation in SeaTable","text":"<p>SeaTable Server offers numerous options for tailoring the system to your specific needs. This includes customization of colors, logos, images, emails and HTML templates. While most customization tasks can be performed via the command line interface, system administrators also have the ability to make certain changes directly through the web interface.</p> <p>Let's explore the various possibilities for UI customization</p> <p></p>"},{"location":"customization/overview/#where-to-find-the-configuration-files","title":"Where to find the configuration files?","text":"<p>You don't have to switch to the SeaTable docker container, to make changes at the configuration files. The configuration files of a SeaTable server can usually be found in the host server at the directory <code>/opt/seatable-server/seatable/conf/</code>.</p> <p>Use the editor of your choice like <code>nano</code> or <code>vim</code> to edit the files.</p>"},{"location":"customization/overview/#how-to-persist-changes","title":"How to persist changes","text":"<p>Please be aware that any change that you do inside a docker container will be removed if the changes files are not mounted to the host system. Also changes should never be done in the directory <code>seatable-server-latest</code>. This folder will always be replaced as soon as you upgrade to another version.</p> <p>Keep this in mind, but the articles will explain precisely where you should do the changes.</p>"},{"location":"customization/overview/#how-to-restart-seatable","title":"How to restart SeaTable?","text":"<p>Changes in the configuration files, require a restart of the SeaTable container or the SeaTable service. Read here, how to restart SeaTable or the complete container.</p>"},{"location":"customization/page-templates/","title":"SeaTable Frontend Modification","text":"<p>With the help of dtable_web_settings.py SeaTable offers a wealth of configuration options to enable or disable individual functions in the frontend or to customize the frontend to your own needs.</p> <p>At the same time, you can only intervene in the design of the frontend to a limited extent with the help of the configuration files. For this, SeaTable offers a sophisticated template system to selectively replace individual page areas with their own versions.</p> <p>This article introduces this form of customizing.</p>"},{"location":"customization/page-templates/#what-can-be-customized","title":"What can be customized?","text":"<p>SeaTable uses predefined HTML templates for almost all web pages and emails, which can be customized. Changes to the base editor are thus not possible, but adjustments to the login page or changes to individual email texts are possible without problems.</p> <p>The basic idea is simple. You take the files provided by seatable and copy them to a special place outside the container. These copied files can then be customized. If SeaTable (after a restart) finds these files, they will be used instead of the original files. The duplicated and customized files are stored outside the SeaTable docker container, so that the customizations survive an update vno seatable.</p> <p>All files below <code>/opt/seatable/seatable-server-latest/dtable-web/seahub/templates/</code> (inside the SeaTable container) can be customized. Here are a few examples that lend themselves to this:</p> <ul> <li>404.html: Error page, if the URL is not available.</li> <li>500.html: Error page, in case of a critical error</li> <li>registration/login.html: Login page</li> <li>registration/logout.html: Logout page</li> <li>registration/registration_form.html: Self-registration page</li> <li>registration/activation_email.html: E-Mail after self-registration (if activation is required)</li> <li>shared_link_email.html: E-Mail if somebody shares a link with another user</li> </ul> <p>There are many more files, and all of them can be customized.</p>"},{"location":"customization/page-templates/#how-to-customize-these-files","title":"How to customize these files?","text":"<p>The basic approach is simple. Create a custom folder in your host system (usually <code>/opt/seatable-server/seatable/seahub-data/custom</code>) and copy the files you want to change to this folder. After a restart SeaTable will check for existing files in your custom directory and replace the original files with the new ones.</p> <p>IMPORTANT NOTES:</p> <ol> <li>Files must not be renamed. If the file is called <code>404.html</code>, then the file has to keep this name. Otherwise the replacement with your custom files will not work.</li> <li>Keep the files in the same directory structure. If you want to replace <code>registration/login.html</code>, then you have to create a folder <code>registration</code> in your custom folder and copy the file <code>login.html</code> to this new directory.</li> </ol> <p>Imagine this customizing like an overlay. SeaTable takes the original files from inside the container. If SeaTable finds the files with the same name in the same directory structure, it replaces the original files.</p>"},{"location":"customization/page-templates/#example-new-login-page","title":"Example: new login page","text":"<p>Imagine you want to replace the login page of SeaTable with something fancier. Here is what you have to do. The following example assumes that your SeaTable docker container is called <code>seatable-server</code> and that your mounted docker volume is located at <code>/opt/seatable-server</code>. Please check your docker-compose.yml and change the following examples if necessary.</p> <p></p>"},{"location":"customization/page-templates/#1-create-custom-folder","title":"1. Create custom folder","text":"<p>This step must be done only once. It generates the setup that you can start overwrite existing html-files from SeaTable with your own ones. You need the folder to save the copies outside of your docker container and you need a symlink that SeaTable can find your custom files.</p> <pre><code>cd /opt/seatable-server/seatable/seahub-data\nmkdir -p custom/templates/registration\ndocker exec -it seatable ln -s /shared/seatable/seahub-data/custom /opt/seatable/seatable-server-latest/dtable-web/media/custom\n</code></pre>"},{"location":"customization/page-templates/#2-copy-the-original-loginhtml-to-your-custom-folder","title":"2. Copy the original login.html to your custom folder","text":"<pre><code>$ docker cp seatable-server:/opt/seatable/seatable-server-latest/dtable-web/seahub/templates/registration/login.html /opt/seatable/seatable-data/seatable/seahub-data/custom/templates/registration/login.html\n</code></pre>"},{"location":"customization/page-templates/#3-adapt-the-loginhtml-according-to-your-needs","title":"3. Adapt the login.html according to your needs","text":"<p>Now you can start editing your login.html. Otherwise you can take one of these examples (tested with SeaTable 4.0.x):</p> <p>Example 1: Simple login form</p> <p></p> <p>Copy the following content to your login.html. As you can see, the login page was reduced to the maximum. There is no box around the input fields, there is no language selector, no single sign on, no signup or forget password. Error messages are still shown and security features like CSCF and Captcha is still part of the login page.</p> <pre><code>{% extends \"base_clean.html\" %}\n{% load i18n %}\n{% block private_style %}\n.show-password-toggle {\n    position: absolute;\n    top: 8px;\n    right: 10px;\n    cursor: pointer;\n    color: #999;\n}\n.show-password-toggle:hover {\n    color: #666;\n}\n.login-panel {\n  background: none;\n  border-radius: none;\n  box-shadow: none;\n}\n.vh {\n  visibility: inherit !important;\n}\n{% endblock %}\n{% block main_content %}\n&lt;div class=\"login-panel-outer-container mt-6 vh\"&gt;\n&lt;div class=\"login-panel\"&gt;\n    &lt;form action=\"\" method=\"post\" id=\"login-form\"&gt;{% csrf_token %}\n        &lt;input type=\"text\" name=\"login\" placeholder=\"Email / Username\" %}\" aria-label=\"{% trans \"Phone, email or username\" %}\" title=\"{% trans \"Phone, email or username\" %}\" value=\"\" class=\"input name-input\" /&gt;&lt;br /&gt;\n        &lt;div class=\"position-relative\"&gt;\n            &lt;input type=\"password\" name=\"password\" placeholder=\"{% trans \"Password\" %}\" aria-label=\"{% trans \"Password\" %}\" title=\"{% trans \"Password\" %}\" value=\"\" class=\"input passwd-input\" id=\"id_password1\" autocomplete=\"off\" /&gt;\n            &lt;span class=\"show-password-toggle dtable-font dtable-icon-eye-slash\"&gt;&lt;/span&gt;\n        &lt;/div&gt;\n        {% if form.captcha %}\n        &lt;div class=\"ovhd\"&gt;\n            &lt;span id=\"refresh-captcha\" title=\"{% trans \"Refresh\" %}\" class=\"icon-refresh op-icon fright\"&gt;&lt;/span&gt;\n            {{ form.captcha }}\n        &lt;/div&gt;\n        {% endif %}\n        &lt;input type=\"hidden\" name=\"next\" value=\"{% if next %}{{ next|escape }}{% else %}{{ SITE_ROOT }}{% endif %}\" /&gt;\n        {% if form.errors %}\n        {% if form.captcha.errors %}\n        {{ form.captcha.errors}}\n        {% elif form.errors.freeze_account %}\n        &lt;p class=\"error\"&gt;{{ form.errors.freeze_account }}&lt;/p&gt;\n        {% elif form.errors.inactive %}\n        &lt;p class=\"error\"&gt;{{ form.errors.inactive }}&lt;/p&gt;\n        {% elif form.errors.not_found %}\n        &lt;p class=\"error\"&gt;{{ form.errors.not_found }}&lt;/p&gt;\n        {% elif form.password.errors %}\n        &lt;p class=\"error\"&gt;{{ form.password.errors }}&lt;/p&gt;\n        {% else %}\n        &lt;p class=\"error\"&gt;{% trans \"Incorrect account or password\" %}&lt;/p&gt;\n        {% endif %}\n        {% else %}\n        &lt;p class=\"error hide\"&gt;&lt;/p&gt;\n        {% endif %}\n        &lt;input type=\"hidden\" name=\"member_me\" value=\"on\" /&gt;\n        &lt;button type=\"submit\" class=\"submit btn btn-primary btn-block\"&gt;{% trans \"Log In\" %}&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n{% block extra_script %}\n&lt;script type=\"text/javascript\"&gt;\n$('[name=\"login\"]').trigger('focus');\nfunction setCaptchaInputWidth() {\n    $('#id_captcha_1').outerWidth($('.input').outerWidth() - $('.captcha').width() - $('#refresh-captcha').outerWidth(true) - 10);\n}\n$(window).on('load', setCaptchaInputWidth);\n$('.captcha').on('load', setCaptchaInputWidth);\n$('#refresh-captcha').on('click', function() {\n    $.ajax({\n        url: '{% url 'captcha-refresh' %}',\n        dataType:'json',\n        cache:false,\n        success: function(data) {\n            $('.captcha').attr('src', data['image_url']);\n            $('#id_captcha_0').val(data['key']);\n        },\n        error: function() {\n            $('.error').removeClass('hide').html(\"{% trans \"Failed to refresh the CAPTCHA, please try again later.\" %}\");\n        }\n    });\n    return false;\n});\n$(\"body\").on('click', '.show-password-toggle', function(){\n    var $pass1 = document.getElementById(\"id_password1\");\n    if ($pass1.type === \"password\") {\n        $pass1.type = \"text\";\n    } else {\n        $pass1.type = \"password\";\n    }\n    $(this).toggleClass(\"dtable-icon-eye-slash dtable-icon-eye\")\n});\n$('#login-form').on('submit', function(){\n    if (!$.trim($('input[name=\"login\"]').val())) {\n        $('.error').removeClass('hide').html(\"{% trans \"Phone, email or username cannot be blank\" %}\");\n        return false;\n    }\n    if (!$.trim($('input[name=\"password\"]').val())) {\n        $('.error').removeClass('hide').html(\"{% trans \"Password cannot be blank\" %}\");\n        return false;\n    }\n});\n$(function() {\n    $('input:not([type=\"hidden\"])').each(function(index) {\n        $(this).attr('tabindex', index + 1);\n    });\n});\n&lt;/script&gt;\n{% endblock %}\n</code></pre>"},{"location":"customization/page-templates/#4-restart-seatable-service","title":"4. Restart seatable service","text":"<p>Now restart SeaTable to activate your new login page.</p>"},{"location":"customization/page-templates/#customize-css","title":"Customize CSS","text":"<p>Create customize folder, add your css file to custom/, for example, <code>custom.css</code></p> <pre><code>mkdir -p /opt/seatable-server/seatable/seahub-data/custom\ncd /opt/seatable-server/seatable/seahub-data/custom\nvim custom.css\ndocker exec -it seatable ln -s /shared/seatable/seahub-data/custom /opt/seatable/seatable-server-latest/dtable-web/media/custom\n</code></pre> <p>Then modify <code>BRANDING_CSS</code> in <code>dtable_web_settings.py</code></p> <pre><code>BRANDING_CSS = 'custom/custom.css'\n</code></pre> <p>Restart SeaTable container</p> <pre><code>docker compose restart\n</code></pre>"},{"location":"customization/page-templates/#translation","title":"Translation","text":"<p>In the HTML files you will see strings like <code>{% trans \"Forgot password?\" %}</code>. This is a placeholder, that will be replaced by other language strings depending on which language the user has selected. Translations and changes to these language strings is not part of this article. There will be another article in the near future.</p>"},{"location":"customization/site-title/","title":"Site Title and Site Name","text":"<p>Site Title and Site Name are two basic customization options. The Title is used in the browser tab and the Name is used in notifications or email messages.</p> <p></p> <p>Web interface overrule config files</p> <p>Please be aware that if you define a value in the webinterface, this always overrules the value in the config file.</p>"},{"location":"customization/site-title/#configuration-via-the-web-interface","title":"Configuration via the web interface","text":"<p>Login to your SeaTable Server as system administrator and switch to the system admin area. Select the navigation point <code>Settings</code>. Team admins or normal users does not have the permission to access the system admin area.</p> <p></p> <p>Add a new Title and/or Name and save the values. The changes are live right away.</p>"},{"location":"customization/site-title/#configuration-via-config-file","title":"Configuration via config file","text":"<p>Add these configurations to <code>dtable_web_settings.py</code> and restart SeaTable service.</p> <pre><code># Browser tab's title\nSITE_TITLE = 'Private SeaTable'\n\n# Set this to your website/company's name.\n# The title is used in email notifications and welcome messages.\nSITE_NAME = 'SeaTable'\n</code></pre>"},{"location":"customization/templates/","title":"Templates","text":"<p>1.6</p> <p>Templates offer a convenient method for offering predefined base structures to your users. Adding and managing templates in SeaTable is straightforward since each template is just a SeaTable base and essentially all templates are managed in a main template base..</p> <p>Simply by adding a row to the designated main template base, it instantly becomes available in the list of templates.</p> <p></p> <p>Sounds easy? Actually it is easy.</p>"},{"location":"customization/templates/#establishing-your-template-base","title":"Establishing Your Template Base","text":"<p>To begin, you'll need to create a base that will serve as the repository for all the templates you intend to offer your users. Let's call this the main template base.</p>"},{"location":"customization/templates/#recommended-structure","title":"Recommended Structure","text":"<p>Here's a suggested approach for organizing your templates:</p> <ol> <li>Create a New Group: Start by creating a group titled <code>Templates</code>.</li> <li>Main Template Base: Within this group, set up a base named <code>All templates</code>.</li> <li>Organize Categories: Utilize folders within the group to categorize your templates based on different themes or purposes.</li> <li> <p>Template Creation: Create individual bases within each category folder to accommodate your various templates.</p> </li> <li> <p>Create a new group with the name <code>Templates</code></p> </li> <li>in this group, there will be a base with the name <code>All templates</code>.</li> <li>Add folders in your group for each category you would like to provide.</li> <li>Create as many bases in the category folder as you want.</li> </ol> <p>Here's an example of how the structure might appear. In this illustration, I've included folders for both Marketing and Projects categories.</p> <p></p>"},{"location":"customization/templates/#creating-the-main-template-base","title":"Creating the Main Template Base","text":"<p>You have two options for setting up the master template base:</p> Option 1: Download and Import <p>The simplest method is to download our predefined dtable file and import it into your SeaTable server to create the main template base.</p> <p>Download our predefined template base</p> Option 2: Create it from Scratch <p>Alternatively, you can create the base from scratch. Your base should include the following columns:</p> <ul> <li>name [text]: An internal name for distinguishing between different templates.</li> <li>category [single-select]: Categorization of the template.</li> <li>display_name [text]: The name of the template displayed on the website.</li> <li>description [long-text]: Introduction and suggestions for the template.</li> <li>card_image [image]: Image displayed on the template panel.</li> <li>card_image_expanded [image]: Image displayed in the template detail dialog.</li> <li>link [url]: The sharing link for the specific template.</li> </ul> <p>Ensure that the table name is <code>templates</code>. You can name the base whatever you prefer.</p> <p>Below is an example of how the main template base could be structured:</p> <p></p>"},{"location":"customization/templates/#recommended-size-of-template-images","title":"Recommended size of template images","text":"<p>To ensure optimal display in the SeaTable main template, please provide two different images with the following dimensions:</p> <ul> <li>card_image: 560 x 240 pixels</li> <li>card_image_expanded: 1840 x 400 pixels</li> </ul>"},{"location":"customization/templates/#create-your-templates","title":"Create your Templates","text":"<p>Now it's time to create your initial bases, which you'll offer as templates. As recommended, organize these templates within folders.</p> <p>Once you've created your bases, you'll need to generate external links for each base and paste them into your master template base. Refer to this help article from the user documentation on how to create external links.</p> <p>You can add more templates to your main template base at any time. They'll be immediately accessible to all users, and no restart is required.</p>"},{"location":"customization/templates/#generate-an-api-token-for-your-base","title":"Generate an API Token for Your Base","text":"<p>Now that you've set up your master base and created some template bases, it's time to generate an API token for the master base. Refer to this help article from the user documentation on how to create an API token.</p> <p>Make sure to note down the API token as you'll need it for the next step.</p>"},{"location":"customization/templates/#activate-templates-in-seatable","title":"Activate templates in SeaTable","text":"<p>Equiped with API token and your template base, you can activate the templates in your SeaTable Server. There are two ways to do this:</p> Environment variablesConfiguration file <p>4.4</p> <p>The SeaTable Server image supports auto configuration via environment variables. Add these variables to your .env file.</p> Environment variable Description Example values <code>SEATABLE_SHOW_TEMPLATES_LINK</code> Activate to show the link on the home page <code>True</code> or leave empty <code>SEATABLE_TEMPLATE_BASE_API_TOKEN</code> API token of the base containing your templates <code>759...3a05f8</code> <code>SEATABLE_TEMPLATE_TABLE_NAME</code> Name of the table containing your templates <code>Table1</code> or <code>Templates</code> <code>SEATABLE_ENABLE_CREATE_BASE_FROM_TEMPLATE</code> Allow the creation of new bases from templates <code>True</code> or leave empty. <p>Add the following lines to <code>dtable_web_settings.py</code>.</p> <pre><code>SHOW_TEMPLATES_LINK = True\nTEMPLATE_BASE_API_TOKEN = 'replace-with-your-api-token'\nTEMPLATE_TABLE_NAME = 'templates'\nENABLE_CREATE_BASE_FROM_TEMPLATE = True\n</code></pre> <p>Restart SeaTable service to activate your templates.</p> <p> Congratulations! Every user can now use these templates.</p>"},{"location":"installation/basic-setup/","title":"Single-Node installation of SeaTable Server","text":"<p>This manual will guide you through the process of installing a SeaTable Server instance with Caddy as proxy. By the end of it, you'll have a SeaTable Server instance that is accessible via HTTPS under your custom domain.</p> <p>Want to watch a step-by-step video instead of reading a manual?</p> <p>Watch a brief English video demonstrating all the essential steps:</p> <p> How to install SeaTable within minutes  10m</p> <p>Installation made easy</p> <p>Most commands in this manual are provided in a way that you can copy and paste them into your command line. Simply click the () icon in the top-right corner of the code boxes to copy the commands to the clipboard.</p>"},{"location":"installation/basic-setup/#install-basic-tools","title":"Install basic tools","text":"<p>First things first, open a root shell on your server and install some basic tools that you'll need. Usually all these tools are already installed on your Linux server.</p> <pre><code>apt update &amp;&amp; \\\napt -y install curl pwgen tree wget tar nano\n</code></pre>"},{"location":"installation/basic-setup/#install-docker-and-docker-compose-plugin","title":"Install Docker and Docker Compose Plugin","text":"<p>At get.docker.com, you find a script designed for the easy and convenient installation of the Docker Engine. While the script isn't recommended for production environments, it has shown no issues in our observations. You can effortlessly install Docker using this single command:</p> <pre><code>curl -fsSL get.docker.com | bash\n</code></pre> <p>Alternatively, you can opt to follow Docker's official installation instructions.</p>"},{"location":"installation/basic-setup/#install-seatable-server","title":"Install SeaTable Server","text":"<p>This installation assumes that all SeaTable components are installed under <code>/opt</code>. We highly recommended to keep this folder structure. All articles in the SeaTable Admin Manual assume SeaTable's installation in this directory.</p>"},{"location":"installation/basic-setup/#1-create-basic-structure","title":"1. Create basic structure","text":"<p>Create a directory <code>seatable-compose</code> in <code>/opt</code> and download the latest YML-files from the repository  seatable-release into it.</p> <pre><code>mkdir /opt/seatable-compose &amp;&amp; \\\ncd /opt/seatable-compose &amp;&amp; \\\nwget -c https://github.com/seatable/seatable-release/releases/latest/download/seatable-compose.tar.gz \\\n-O - | tar -xz -C /opt/seatable-compose &amp;&amp; \\\ncp -n .env-release .env\n</code></pre> <p>To get an overview of the downloaded files, use the <code>tree</code> command.</p> <pre><code>tree -a /opt/seatable-compose\n</code></pre> <p>The expected output should appear as follows.</p> <pre><code># this should be the output of the tree command\n/opt/seatable-compose\n\u251c\u2500\u2500 caddy.yml\n\u251c\u2500\u2500 clamav.yml\n\u251c\u2500\u2500 collabora.yml\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .env-release\n...\n\u251c\u2500\u2500 python-pipeline.yml\n\u251c\u2500\u2500 restic.yml\n\u251c\u2500\u2500 seadoc.yml\n\u251c\u2500\u2500 seatable-server.yml\n\u251c\u2500\u2500 tldraw.yml\n\u251c\u2500\u2500 tools\n\u251c\u2500\u2500 uptime-kuma.yml\n\u2514\u2500\u2500 zabbix.yml\n</code></pre> <p>Don't change the default YML-files</p> <p>Generally, there's no need to make changes to the YML-files. Modifications should only be made by experienced Docker administrators. If you do, it is recommended to duplicate the file(s) first and rename the file(s) because the default yml files are overwritten with the next update.</p> <pre><code># create a custom copy\ncp n8n.yml custom-n8n.yml\n</code></pre>"},{"location":"installation/basic-setup/#2-add-secrets","title":"2. Add secrets","text":"<p>SeaTable is configured with the hidden <code>.env</code> file (=enviroment configuration file) that is stored in the folder <code>/opt/seatable-compose</code>.</p> <p>Now use the command line tool <code>pwgen</code> to create secure passwords for your admin account, the database root password, the Redis instance and a secret for secure communication between the SeaTable components. The following commands will generate four such passwords and insert them in the <code>.env'</code> file.</p> <pre><code>sed -i \"s/^SEATABLE_ADMIN_PASSWORD=.*/SEATABLE_ADMIN_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^MARIADB_PASSWORD=.*/MARIADB_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^REDIS_PASSWORD=.*/REDIS_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^JWT_PRIVATE_KEY=.*/JWT_PRIVATE_KEY=$(pwgen 40 1)/\" .env\n</code></pre> <p>Alternatively, you can manually add your own passwords.</p>"},{"location":"installation/basic-setup/#3-complete-settings-in-the-env-file","title":"3. Complete settings in the .env file","text":"<p>Open the <code>.env</code> file with the text editor of your choice, like <code>nano</code> or <code>vim</code>.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Continue setting up your SeaTable server by adjusting only three more variables. These are:</p> <ul> <li>TIME_ZONE</li> <li>SEATABLE_SERVER_HOSTNAME</li> <li>SEATABLE_ADMIN_EMAIL</li> </ul> <code>.env</code> for SeaTable Server Enterprise Edition<code>.env</code> for SeaTable Server Developer Edition <pre><code># components to be used\nCOMPOSE_FILE='caddy.yml,seatable-server.yml' # (1)!\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin' # (2)!\n\n# seatable server base url\nSEATABLE_SERVER_HOSTNAME='seatable.example.com' # (3)!\nSEATABLE_SERVER_PROTOCOL='https'\n\n# initial web admin\nSEATABLE_ADMIN_EMAIL='me@example.com'\nSEATABLE_ADMIN_PASSWORD='topsecret'\n\n# database\nMARIADB_PASSWORD='alsotopsecret'\n\n# redis\nREDIS_PASSWORD='anotherverysecurepassword'\n\n# shared secret for secure communication\nJWT_PRIVATE_KEY='anothersecret'\n</code></pre> <ol> <li>COMPOSE_FILE is a comma-separated list without spaces. This list defines which components the server runs. Leave <code>caddy.yml</code> and <code>seatable-server.yml</code> at the beginning. You will add more components at a later time.</li> <li>A list of timezones is available on Wikipedia.</li> <li>SEATABLE_SERVER_HOSTNAME is the (sub)domain (without http:// or https://) under which the server is accessible on (at least) port 80 and 443.     If you want to use a public IP address (e.g. 5.35.28.112), you can use the free service nip.io. In this case, enter your your-ip.nip.io address (e.g. 5.35.28.112.nip.io).     If you want to use a local IP address (e.g. 192.168.178.10), please see section Custom Certificates</li> </ol> <p>To install the SeaTable Developer Edition instead of Enterprise edition, add the following parameter to your <code>.env</code> file. This overwrites the used SeaTable Docker image. Everything else remains identical to the SeaTable Enterprise Edition.</p> <pre><code>SEATABLE_IMAGE='seatable/seatable-developer:latest' # (1)!\n</code></pre> <ol> <li>Instead of latest you can select a concrete version from https://hub.docker.com/r/seatable/seatable-developer/tags.</li> </ol> <p>Mind the quotation marks</p> <p>The variable values in the <code>.env</code> are strings. So they should be put in ' '.</p>"},{"location":"installation/basic-setup/#4-get-a-license","title":"4. Get a license","text":"<p>SeaTable Enterprise requires a license to start. </p> <p>Three users, two years - for free.</p> <p>You can use SeaTable Server Enterprise Edition for free with up to three users, but you must request and download a license file. The license file is valid for two years. You can generate a new license file at any time. If you want to use SeaTable Server Enterprise Edition with more than three users, you can buy a (on-premises) license on seatable.com/prices.</p> <p>Run the following command, replacing <code>me@example.com</code> with your valid email address. Shortly after, you'll receive an email with instructions to download your license to the current directory.</p> <pre><code>curl https://get.seatable.com/license/me@example.com\n# ... follow the steps in the email ...\n</code></pre> <p>Your license should now be saved at <code>/opt/seatable-compose/seatable-license.txt</code>.</p>"},{"location":"installation/basic-setup/#5-fire-up-the-server","title":"5. Fire up the server","text":"<p>Now it is time to run the following command to download and initiate the docker images for the initial setup. This process will require some time.</p> <pre><code>docker compose up -d\n</code></pre> <p>If the initialization completes successfully, you can open your web browser and access your SeaTable Server instance using the URL specified in the <code>.env</code> file. Sign in using the credentials you provided in the same file.</p> <p> Congratulations! You've completed the basic setup of SeaTable Server.</p>"},{"location":"installation/basic-setup/#next-steps","title":"Next steps","text":"<p>Your SeaTable journey has just begun! While you can dive straight into SeaTable, creating bases, adding users, utilizing the API, and more, there's an array of possibilities to explore. Here are a few examples:</p> <ul> <li>Expand functionality by installing additional components like the Python Pipeline or n8n.</li> <li>Integrate Plugins into your SeaTable Server to enable users to utilize them within a base.</li> <li>Configure your server to enable email notifications, templates, or Single Sign-On (SSO).</li> <li>For troubleshooting or queries during installation, refer to the FAQ section for assistance.</li> </ul> <p>This manual covers a range of topics, from advanced cluster installations to detailed configuration options. Take your time to explore these possibilities. If you can't find what you need or require assistance, consider posting in the community forum.</p> <p>Encounter an issue or need clarity? Feel free to create a post on the SeaTable community forum. We're here to assist and improve this manual based on your feedback.</p> <p>For sure you can also contribute directly and create a pull request at GitHub.</p>"},{"location":"installation/deployment-approach/","title":"Deployment Approach","text":"<p>A SeaTable Server consists of multiple containers. Therefore let's talk about how you typically install such a system.</p>"},{"location":"installation/deployment-approach/#multi-container-installations-can-be-intricate","title":"Multi-container installations can be intricate","text":"<p>Usually, software relying on multiple containers involves a large and complex <code>docker-compose.yml</code> file. This complexity intensifies with optional containers, leading to bloated files or the need to manually manage additional services. This is quite a challenging task.</p> <p>In addition, consistently maintaining correct indentation and syntax alignment in the YAML file demands caution. In summary, this process can be cumbersome, prone to errors, and challenging\u2014particularly for beginners or users unfamiliar with docker-compose files.</p>"},{"location":"installation/deployment-approach/#we-want-to-keep-it-simple","title":"We want to keep it simple ...","text":"<p>Instead of handling one extensive <code>docker-compose.yml</code> file, we present a more structured approach:</p> <ul> <li>We provide a set of individual yml files and one <code>.env</code> file.</li> <li>Each yml file defines commands for installing a specific component, such as the SeaTable Server, web proxy (caddy), or python pipeline.</li> <li>An accompanying <code>.env</code> file manages environment variables to configure your setup.</li> </ul>"},{"location":"installation/deployment-approach/#layered-structure","title":"Layered structure","text":"<p>Think of the <code>.env</code> file as a recipe for your setup and the yml files are like ingredients.</p> <p>Create copy for custom changes of the yml files</p> <p>Generally, there's no need to modify the YAML files. We provide updated YAML files with each new SeaTable version. However, if you wish to make alterations, create a copy and name it something like <code>custom-&lt;original-name&gt;.yml</code>.</p> <p>You can configure components in the <code>.env</code> file, determining which ones to install. Start with essential components like SeaTable Server and Caddy web proxy.</p> <p>Example in the <code>.env</code> file:</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml'\n</code></pre> <p>By adding or removing yml files from this list, you control the composition during runtime, eliminating the need for a single, extensive <code>docker-compose.yml</code> file.</p> <p></p> <p>With this understanding, the subsequent installation descriptions should be straightforward to follow.</p> <p>Primarily, use copy and paste</p> <p>Throughout the installation process, we strive to eliminate the need for manual file editing. Most commands can be executed by simply copying and pasting. Look for the copy-and-paste icon () at the end of each code box, which conveniently copies the content to your clipboard. This helps prevent typing errors and ensures a smoother installation experience.</p>"},{"location":"installation/deployment-approach/#additional-components","title":"Additional Components","text":"<p>Like the basic installation, the installation of the additional components will be easy and straight forward. Additional components are solutions that either extend the functionality of SeaTable or help your during your daily live.</p> <p>These are the assumptions that we assume:</p> <ul> <li>Your SeaTable Basic Setup is up and running</li> <li>Your server is public reachable and you use a let's encrypt certificate</li> <li>Additional services are provided by port (and not by subdomain or subfolder)</li> <li>If you block incoming traffic with a firewall, you have to open some ports to make the solution reachable over the internet.</li> </ul>"},{"location":"installation/deployment-approach/#used-ports","title":"Used Ports","text":"<p>This is the list of ports that the components use. You only have to open them if you want</p> <ul> <li>SeaTable: 80 and 443</li> <li>N8n: 6231</li> <li>Collabora: 6232</li> <li>OnlyOffice: 6233</li> <li>Uptime Kuma: 6230</li> <li>Zabbix: 6235</li> </ul>"},{"location":"installation/deployment-approach/#separate-server-or-subdomain","title":"Separate server or subdomain","text":"<p>This is possible for sure. Right now the installation follows the assumption from the top. You will find articles in the Advanced Setup explaining how to use custom certificates, custom domains or separate servers.</p>"},{"location":"installation/faq/","title":"FAQ / Troubleshooting","text":""},{"location":"installation/faq/#troubleshooting-seatable-server","title":"Troubleshooting SeaTable Server","text":"SeaTable doesn't start / Webinterface is not reachable <p>First let's try to find out, where the problem is. If you try to access your SeaTable Server goes like this:</p> <p>Browser -&gt; Domain/DNS -&gt; Caddy -&gt; Nginx -&gt; SeaTable Container -&gt; SeaTable Server</p> <p>Check the following solutions to determine what is not running.</p> Verify that SeaTabler Server is running <p>Execute <code>docker logs seatable-server</code>. This should result in:</p> <pre><code>2024-02-04 12:59:17 Start server\nSeaTable started\n2024-02-04 12:59:21 For more startup information, please check the /opt/seatable/logs/init.log\n2024-02-04 12:59:21 This is an idle script (infinite loop) to keep container running.\n</code></pre> <p>Another check might be:</p> <pre><code>docker exec -it seatable-server curl http://127.0.0.1:8000/server-info/\n</code></pre> <p>This should return:</p> <pre><code>{\"version\":\"4.3.8\",\"edition\":\"enterprise edition\"}\n</code></pre> <p>If you don't see this, SeaTable Service is definately not running. Try to restart the service and check the logs for more details.</p> <p>Here are the two commands for more logs</p> <ul> <li><code>cd /opt/seatable-compose &amp;&amp; docker compose logs -f</code></li> <li><code>tail -f /opt/seatable-server/seatable/logs/*.log</code></li> </ul> <p>Probably you have a wrong configuration value in <code>dtable_web_settings.py</code>.</p> Verify that SeaTable Container is healthy <p>Execute <code>docker ps</code>. This should be the result:</p> <pre><code>CONTAINER ID   IMAGE                               STATUS                NAMES\n0411d977eb25   seatable/seatable-enterprise:4.3.8  Up 3 days (healthy)   seatable-server\n</code></pre> <p>If the container is not (healthy), you can be sure, that something is wrong with the container.</p> Check nginx <p>There might be a misconfiguration of <code>nginx.conf</code>. nginx provides a configuration checker.</p> <pre><code>docker exec -it seatable-server nginx -t\n</code></pre> <p>It should look like:</p> <pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre> <p>If not, check the nginx configuration file at <code>/opt/seatable-server/seatable/conf/nginx.conf</code>.</p> Check Caddy <pre><code>docker logs caddy\n</code></pre> <p>more info will follow.</p> Domain/DNS <p>execute <code>curl https://&lt;your-seatable-server-domain&gt;</code> or <code>ping &lt;your-seatable-server-domain&gt;</code> to get more details.</p> Other typical problems <ul> <li>License expired or not provided</li> <li>PLUGIN_REPO_ID wrong in dtable_web_settings.py</li> <li>spaces in COMPOSE_FILE variable in <code>.env</code> file.</li> </ul>"},{"location":"installation/faq/#faqs","title":"FAQ's","text":"If, for whatever reason, the installation fails, how do I to start from a clean slate again? <p>Stop all containers, remove the directories caddy, mariadb, seatable-compose, and seatable-server in <code>/opt</code> and start again.</p> <p>To stop all containers, change to <code>/opt/seatable-compose</code> and run <code>docker compose down</code>.</p> I want to run my SeaTable Server instance on my local machine? Can I do that? <p>You can, but it is only recommended for testing purposes. Follow the instructions for the single-node deployment and simply set SEATABLE_SERVER_HOSTNAME and SEATABLE_SERVER_PROTOCOL to <code>127.0.0.1</code> and 'http', respectively, in the <code>.env</code> file. To access your local SeaTable Server instance, enter http:\\127.0.0.1 in your browser.</p> <p>If you want to enable https, consult section Custom Certificates for details.</p> I want to use my own reverse proxy / my custom certificate, how do I do that? <p>You can opt out of using Caddy and use another webserver of your choice. In this case, remove <code>caddy.yml</code> from the COMPOSE_FILE variable in the <code>.env</code> file and follow the instructions in section Custom Revers Proxy.</p>"},{"location":"installation/start/","title":"Introduction to SeaTable Server Installation","text":"<p>SeaTable is the world leading self hosted no-code platform. You can run SeaTable on consumer or enterprise-grade hardware and a variety of operating systems and architectures. The installation always uses Docker and the docker compose plugin. This guide outlines the installation process for SeaTable Server (Enterprise and Developer Edition) on a Linux OS using Docker.</p> <p>Our goal is to offer a straightforward installation method that results in a fully operational SeaTable system accessible via HTTPS within minutes. While the steps have been tested on Debian and Ubuntu-based systems, they should also work on other Linux server systems. The installation is executed via the command line as the <code>root</code> user.</p> <p>Before You Begin: Review the requirements.</p> <p>You can deploy SeaTable-Server in one of the following topologies:</p>"},{"location":"installation/start/#single-node-deployment","title":"Single-Node Deployment","text":"<ul> <li>Easy installation with docker and docker compose.</li> <li>Ideal for testing purposes or smaller teams for up to 100 users.</li> </ul> <p>Start the installation Our deployment approach</p>"},{"location":"installation/start/#cluster-deployment","title":"Cluster Deployment","text":"<ul> <li>Enterprise-grade high-performance no-code platform.</li> <li>Maximum performance and scalability for thousands of users.</li> </ul> <p>Read more about Cluster</p>"},{"location":"installation/advanced/additional-subdomains/","title":"Additional Subdomain","text":"<p>By default SeaTable and all additional components use one single public available domain. This manual explains what to do if you want to make an additional component like n8n available via (sub)domain instead of a port. This article describes the necessary change to the existing caddy container. If you want to use a complete different proxy, please refer the the article ...</p>"},{"location":"installation/advanced/additional-subdomains/#typical-configuration","title":"Typical configuration","text":"<p>Look at <code>n8n.yml</code> to get an understanding of how caddy is configured to make n8n accessable via port 6231.</p> <pre><code>services:\n  caddy:\n    ports:\n      - ${N8N_PORT:-6231}:${N8N_PORT:-6231} # &lt;-- enhances caddy.yml\n\n  n8n-postgres:\n    ...\n\n  n8n:\n    ...\n</code></pre> <p>In the n8n.yml we add an additional port to the caddy container by adding an additional port. Imagine you use seatable.example.com to access SeaTable, then port 443 is routed to SeaTable and port 6231 is routed to the n8n container.</p>"},{"location":"installation/advanced/additional-subdomains/#new-configuration-to-use-a-custom-domain","title":"New configuration to use a custom domain","text":"<p>The following example assumes that you want to access n8n not anymore via the port 6231 but with the URL <code>n8n.example.com</code>.</p> <ol> <li>Make a copy of the n8n.yml and name it e.g. custom-n8n.yml.</li> <li>Replace n8n.yml with custom-n8n.yml in your .env in COMPOSE_FILE.</li> <li>Replace the caddy part of the custom-n8n.yml in this way.</li> </ol> <pre><code>services:\n  caddy:\n    labels:\n      caddy: n8n.example.com\n      caddy.reverse_proxy: \"{{upstream 6231}}\"\n</code></pre> <p>This configures caddy to proxy all requests to n8n.example.com to the port 6231, in this case n8n.</p> <p>Restart all docker containers with the following command to enforce this new setting.</p> <p>All containers have to be restarted</p> <p>It is not sufficient to restart only the container that should use a separate domain. The caddy container has to be restarted to. <code>docker compose</code> will not detect any change of the caddy.yml, therefore we recommend to stop and restart all containers with these commands.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose down &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation/advanced/air-gap-installation/","title":"Air gap installation","text":"<p>Air gap installation means that your SeaTable server has no connection to the internet and runs air gapped on the local network. This is feasable for high-security environments but it should be obvious that such a setup requires additional configurations and is not an easy task.</p> <p>This article is a summary of the topics that should be considered.</p>"},{"location":"installation/advanced/air-gap-installation/#problems-that-arise-with-air-gap","title":"Problems that arise with air gap:","text":"<ul> <li>Certificate management (HTTPS/TLS) is complicated.</li> <li>A separate container registry is necessary.</li> <li>A local APT repository is necessary.</li> <li>Plugins have to be installed manually.</li> </ul> <p>Let's go into the details.</p>"},{"location":"installation/advanced/air-gap-installation/#certificate-management","title":"Certificate Management","text":"<p>The easiest solution would be to just use HTTP for all communication but this contradicts the idea of increased security of an air gapped setup. Therefore it is necessary that you use a globally trusted wildcard certificate. This is quite easy to obtain but will cost some money. This manual explains how to use such a custom root certificate.</p>"},{"location":"installation/advanced/air-gap-installation/#separate-container-registry","title":"Separate container registry","text":"<p>Usually SeaTable Server and the other containers are downloaded from Docker Hub. If your SeaTable server has no connection to the internet you need to provide a local container repository like Quay or Harbor.</p> <p>The installation, configuration and usage of such a repository if far beyond the scope of this manual.</p>"},{"location":"installation/advanced/air-gap-installation/#separate-local-apt-repository","title":"Separate local APT repository.","text":"<p>To keep your linux base system up-to-date and to install docker and other software components, you have to provide a local APT repository. This is also not part of this manual to explain how this works.</p>"},{"location":"installation/advanced/air-gap-installation/#plugins","title":"Plugins","text":"<p>This is the most easy part because SeaTable provides a way that you download the Plugins as ZIP files to your local PC and then you can upload it from the local network. Read this article for more details.</p>"},{"location":"installation/advanced/custom-certificates/","title":"Custom root certificates","text":"<p>Usually we use let's encrypt to generate valid certificates for public access. Nethertheless caddy provides an easy way to use custom certificates. This article assumes that you want to use a valid (standard or wildcard) certificate from a widely trusted authority.</p> <p>Self signed certificates are not fully supported</p> <p>The use of a self signed certificate is not recommended. Even if you clients (browsers) trust the certificate, the docker containers do not trust each other by default. The Python Pipeline will not work etc...</p>"},{"location":"installation/advanced/custom-certificates/#make-certificates-available-to-caddy","title":"Make certificates available to caddy","text":"<p>With the caddy.yml a default volume-mount is created: <code>/opt/caddy:/data/caddy</code> By convention you should provide your certificate &amp; key files in the container host filesystem under <code>/opt/caddy/certs/</code> to make it available to caddy.</p> <p>In the article, we assume that your certificates were saved as <code>cert.pem</code> and <code>key.pem</code>.</p> <pre><code>/opt/caddy/certs/\n\u251c\u2500\u2500 cert.pem\n\u251c\u2500\u2500 key.pem\n</code></pre> <p>Command to generate custom certificates</p> <p>With this command, you can generate your own custom certificates. Please be aware that custom certicates can not be used for ip-adresses. <pre><code>cd /opt/caddy/certs\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./key.pem -out ./cert.pem\n</code></pre></p>"},{"location":"installation/advanced/custom-certificates/#configure-seatable-container-to-use-custom-certificates","title":"Configure SeaTable Container to use custom certificates","text":"<p>The caddy docker proxy container from lucaslorentz supports dynamic configuration with labels.</p> <p>It is not recommended to make changes to the provides <code>seatable-server.yml</code>. Create a custom yml file and reference it in your .env file instead. Add the following line to your <code>custom-seatable-server.yml</code> to tell caddy to use your custom certificates. The label <code>caddy.tls</code> will tell caddy to use your custom certificates.</p> <pre><code># configuration of custom-seatable-server.yml\nservices:\n  seatable-server:\n    ...\n    labels:\n      caddy: ${SEATABLE_SERVER_HOSTNAME}\n      caddy.tls: \"/data/caddy/certs/cert.pem /data/caddy/certs/key.pem\"\n      ...\n</code></pre> <p>DNS resolution must work inside the container</p> <p>If you're using a non-public url like \"my-custom-setup.local\", you have to make sure, that the docker container can resolve this DNS query. If you don't run your own DNS servers, you have to add <code>extras_hosts</code> to your <code>.yml</code> file.</p>"},{"location":"installation/advanced/custom-certificates/#add-certificates-to-your-truststore","title":"Add certificates to your truststore","text":"<p>SeaTable Server and the Python Pipeline (Scheduler und Starter) execute at every start the command <code>update-ca-certificates</code>. This updates the truststore of the containers at runtime.</p> <p>If you are working with self signed or low trust certificates, there is an easy way to put your certificates to the container truststore. You can just mount your certificate to the container. This works for seatable-server, python-scheduler and python-starter.</p> <pre><code>services:\n  seatable-server:\n    ...\n    volumes:\n      ...\n      - \"/opt/caddy/certs/cert.pem:/usr/local/share/ca-certificates/cert.crt\"\n</code></pre> <p>SeaTable should use the certificate store</p> <p>Please make sure that <code>- REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt</code> is in your list of environment variables of your seatable-server. We added this with version 5.0.</p>"},{"location":"installation/advanced/custom-certificates/#self-signed-certificates-generated-by-caddy","title":"Self-signed certificates generated by Caddy","text":"<p>Even if it is not recommended, it is possible to ask Caddy to use auto generated self-signed certificates. This can be achieved by adding these lines to your <code>custom-seatable-server.yml</code>.</p> <pre><code># configuration of custom-seatable-server.yml\nservices:\n  seatable-server:\n    ...\n    labels:\n      caddy: ${SEATABLE_SERVER_HOSTNAME}\n      caddy.tls: \"internal\"\n</code></pre>"},{"location":"installation/advanced/custom-certificates/#problems-with-local-ip","title":"Problems with local IP","text":"<p>The current setup does not allow that you add a local IP adress as <code>SEATABLE_SERVER_HOSTNAME</code> in your .env file. There are two alternatives that we recommend to use:</p>"},{"location":"installation/advanced/custom-certificates/#use-local-address","title":"use local address","text":"<p>Instead of the IP adress you should use an address like <code>seatable.local</code>. This requires that you either use a self-signed certificate or a custom root certificate.</p>"},{"location":"installation/advanced/custom-certificates/#use-nipio","title":"use nip.io","text":"<p>There is a free service https://nip.io which allows mapping any IP Address to a hostname using the following formats:</p> <ul> <li>10.0.0.1.nip.io maps to 10.0.0.1</li> <li>192-168-1-250.nip.io maps to 192.168.1.250</li> <li>0a000803.nip.io maps to 10.0.8.3</li> </ul> <p>So if you want to use the local address like <code>192.168.17.20</code>, you should use <code>192.168.17.20.nip.io</code> as <code>SEATABLE_SERVER_HOSTNAME</code>.</p>"},{"location":"installation/advanced/custom-certificates/#limitations","title":"Limitations","text":"<p>Currently it is not possible to generate PDF-Files with the Page Design Plugin if you're running SeaTable with your self-signed certificate. The workaround is to use <code>Print</code> inside the Page Design Plugin and then use a local PDF-Printer to generate the PDF.</p>"},{"location":"installation/advanced/custom-proxy/","title":"Replace caddy with another proxy","text":"<p>The Single-Node Installation describes an installation of a SeaTable server with the webserver caddy. We dediced to use Caddy because it simplifies the handling of let's encrypt certificates. If you create a DNS entry and point it to your server, caddy will do everything else for you. Also we configured caddy with state of the art security configurations.</p>"},{"location":"installation/advanced/custom-proxy/#custom-proxy-with-seatable-server","title":"Custom proxy with SeaTable Server","text":"<p>But of cause there might be reasons when you want to replace caddy with another proxy like ha-proxy, traffik, nginx, apache etc. The logic of replacing might be simple.</p> <p>You can use any proxy as long as your forward all traffic to the SeaTable Server. Part of the SeaTable Server container is a nginx web proxy, which routes the traffic by URL. This port 80 is not exposed therefore your proxy has to be in the same docker network like SeaTable Server.</p> <p></p>"},{"location":"installation/advanced/custom-proxy/#how-to-configure","title":"How to configure","text":"<p>Remove <code>caddy.yml</code> from COMPOSE_FILE from .env file. Restart all docker containers. Forward all traffic to the SeaTable Container via port 80.</p> <p>SeaTable does not expose any ports</p> <p>Please be aware that SeaTable does not expose port 80 to the outside. Therefore your proxy has to be in the same docker network. Otherwise you have to expose port 80 of SeaTable Server.</p>"},{"location":"installation/advanced/custom-proxy/#custom-proxy-with-additional-components","title":"Custom proxy with additional components","text":"<p>For the additional components you can choose between two different options. You can access the services either via separate port or (sub)domain.</p>"},{"location":"installation/advanced/custom-proxy/#option-1-use-ports-to-access-the-services","title":"Option 1: use ports to access the services","text":"<p>The additional components run on separate ports. n8n uses the port 6231. If you only have one public domain available, you can forward the required port to the internal network and access the service. This does not require any further configuration.</p> <p></p>"},{"location":"installation/advanced/custom-proxy/#option-2-other-domains-to-access-the-services","title":"Option 2: other domains to access the services","text":"<p>In this case, you use another (sub)domain to access the service. You create a proxy rule to route the traffic to the service with its internal port. Usually this requires that you also change the configuration of the service to be accessable via this additonal domain.</p> <p></p>"},{"location":"installation/advanced/custom-proxy/#proxy-outside-of-the-docker-network","title":"Proxy outside of the docker network","text":"<p>To use a proxy outside of your Docker network, you\u2019ll need to expose port 80 on your SeaTable server and route all traffic through it. Alternatively, you can expose a different port and forward it to the internal port 80 on Nginx.</p> <p>Because network configurations vary widely, it\u2019s difficult to provide specific instructions for every setup. This approach requires familiarity with networking and routing concepts.</p>"},{"location":"installation/advanced/database-standalone/","title":"Standalone Database","text":"<p>Managed Database is an often used managed service. SeaTable can easily be configured to use a separate database. We recommend to initialize SeaTable with the default mariadb container. Then dump the database, load the dump to a separate database, update the <code>.env</code> file and restart SeaTable. Due to this assumption, this manual is the same for a new SeaTable Server or a service where you want to migrate the database.</p>"},{"location":"installation/advanced/database-standalone/#stop-seatable","title":"Stop SeaTable","text":"<pre><code>docker stop seatable-server\n</code></pre> <p>Now you can be sure, that no more records are written or modified in the database.</p>"},{"location":"installation/advanced/database-standalone/#dump-and-restore-to-another-database","title":"Dump and restore to another database","text":"<p>Please refer to Backup and Recovery for instructions regarding the backup process for the MariaDB database.</p> <p>You can use the <code>mariadb</code> CLI to import the contents of the dumped databases into the managed databases.</p>"},{"location":"installation/advanced/database-standalone/#stop-mariadb","title":"Stop Mariadb","text":"<p>After the dump, stop also the database container:</p> <pre><code>docker stop mariadb\n</code></pre>"},{"location":"installation/advanced/database-standalone/#dont-start-mariadb-container","title":"Don't start mariadb container","text":"<p>Create a copy of <code>seatable-server.yml</code> and rename it to <code>custom-seatable-server.yml</code>. You should remove the <code>mariadb</code> service definition and update the <code>depends_on</code> declaration for the <code>seatable-server</code> service to ensure that it can start up.</p> <pre><code>services:\n  seatable-server:\n    depends_on:\n      mariadb:                        # &lt; remove\n        condition: service_healthy    # &lt; remove\n\n  mariadb:                            # remove complete service\n    ...                               # with all lines\n</code></pre>"},{"location":"installation/advanced/database-standalone/#update-environment-variables","title":"Update environment variables","text":"<p>You should update/set the following environment variables in your <code>.env</code> file:</p> <pre><code>MARIADB_HOST=\nMARIADB_PORT=\nMARIADB_PASSWORD=\n</code></pre>"},{"location":"installation/advanced/database-standalone/#restart-seatable","title":"Restart SeaTable","text":"<p>After that you can restart SeaTable.</p>"},{"location":"installation/advanced/database-standalone/#troubleshooting","title":"Troubleshooting","text":"<p>Check the logs and look for any connection errors.</p> <pre><code>tail -f /opt/seatable-server/seatable/logs/*.log\n</code></pre>"},{"location":"installation/advanced/database-standalone/#remove-old-database","title":"Remove old database","text":"<p>if everything is running good, you can delete the local database folder /opt/mariadb.</p> <pre><code>rm -r /opt/mariadb\n</code></pre>"},{"location":"installation/advanced/http-only/","title":"Force http only for your SeaTable Server","text":""},{"location":"installation/advanced/http-only/#force-http-during-installation","title":"Force http during installation","text":"<p>It is not recommended to run SeaTable without https. Still it is possible. During the installation it is sufficient to set the .env variable <code>SEATABLE_SERVER_PROTOCOL</code> with the value <code>http</code> and all configuration files and caddy will be set up correctly.</p>"},{"location":"installation/advanced/http-only/#switching-after-the-installation","title":"Switching after the installation","text":"<p>If you want to force http after the initial setup, you also have to adapt these configuraton files and replace all https:// values with http://:</p> <ul> <li>dtable_web_settings.py</li> <li>ccnet.conf</li> <li>nginx.conf</li> </ul> <p>Especially the change of the nginx file is not trivial, if you don't have any experience with nginx.</p>"},{"location":"installation/advanced/ipv6-support/","title":"Activate IPv6 Support for SeaTable","text":"<p>The SeaTable Docker container does not activate IPv6 by default because Nginx is configured to listen only to IPv4.</p> <p>To enable IPv6 on your Nginx server, you need to add a single line to the Nginx configuration file located at <code>/opt/seatable-server/seatable/conf/nginx.conf</code>.</p> <p>Find the line <code>listen 80;</code> and add the following line below it, ensuring you include the trailing <code>;</code>:</p> <pre><code>listen [::]:80;\n</code></pre> <p>After making this change, your configuration file should look like this:</p> <pre><code>...\nserver {\n    server_name &lt;your-server-url&gt;\n    listen 80;\n    listen [::]:80;\n    ...\n}\n</code></pre> <p>Next, run the following two commands. The first command checks the configuration file for errors. If there are no errors, execute the second command to reload Nginx:</p> <pre><code>docker exec seatable-server nginx -t\ndocker exec seatable-server nginx -s reload\n</code></pre> <p>Your SeaTable server will now support IPv6.</p>"},{"location":"installation/advanced/maintenance-mode/","title":"Maintenance Mode","text":"<p>Sometimes updates or changes in the configuration are necessary, and it's important to limit access to the server during this period. Enabling maintenance mode ensures that only dedicated IP addresses can access the server, while all other users see a simple maintenance page with a <code>503 Service Unavailable</code> status code.</p>"},{"location":"installation/advanced/maintenance-mode/#enabling-maintenance-mode","title":"Enabling Maintenance Mode","text":"<p>Here's how to configure such a maintenance page using Caddy:</p> <ol> <li>Go to <code>/opt/seatable-compose/</code></li> <li>Create a copy of your <code>seatable-server.yml</code> and name it <code>maintenance.yml</code></li> <li>Replace the current labels of your SeaTable Server with the following labels.</li> <li>Replace <code>&lt;your-allowed-ip&gt;</code> with one IP adresses, that should have access to your server.</li> <li>Open your <code>.env</code> file and replace <code>seatable-server.yml</code> with <code>maintenance.yml</code> (in the variable <code>COMPOSE_FILE</code>)</li> <li>Run <code>docker compose up -d</code></li> </ol> <pre><code>...\n    labels:\n      caddy: ${SEATABLE_SERVER_PROTOCOL:-https}://${SEATABLE_SERVER_HOSTNAME:?Variable is not set or empty}\n      caddy.@blocked: 'not remote_ip &lt;your-allowed-ip&gt; private_ranges'\n      caddy.respond: '@blocked \"SeaTable Cloud is currently undergoing maintenance. The service will be restored shortly. Thank you for your patience.\" 503'\n      caddy.header.Retry-After: 3600\n      caddy.reverse_proxy: \"{{upstreams 80}}\"\n...\n</code></pre>"},{"location":"installation/advanced/maintenance-mode/#how-does-maintenance-look-like","title":"How does maintenance look like","text":"<p>If you are accessing your system from an IP address that has been specified in your labels, you can continue using SeaTable as usual.</p> <p>All other users will see a maintenance page displaying the following message:</p> <p></p>"},{"location":"installation/advanced/maintenance-mode/#disable-maintenance-mode","title":"Disable Maintenance Mode","text":"<p>To disable maintenance mode, update your <code>.env</code> file by replacing <code>maintenance.yml</code> with <code>seatable-server.yml</code>. Then, run the command:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Your SeaTable server will once again be accessible to all users.</p>"},{"location":"installation/advanced/python-pipeline-configuration/","title":"Configure Python Pipeline","text":""},{"location":"installation/advanced/python-pipeline-configuration/#configuration","title":"Configuration","text":"<p>The Python Pipeline can be configured through environment variables for further customization. The available parameters inside your <code>.env</code> file are:</p>"},{"location":"installation/advanced/python-pipeline-configuration/#resources","title":"Resources","text":"Parameter Description Default <code>PYTHON_PROCESS_TIMEOUT</code> The timeout for a single script (in seconds) <code>60</code> <code>PYTHON_TRANSFER_DIRECTORY_PATH</code> The directory on the host where python-starter creates a folder for each individual script job <code>/tmp</code> <code>PYTHON_RUNNER_CONTAINER_CPUS</code> The number of CPUs available to each script container <code>1</code> <code>PYTHON_RUNNER_CONTAINER_MEMORY</code> The amount of memory available to each script container <code>1g</code> <code>PYTHON_RUNNER_READ_ONLY_FILESYSTEM</code> Whether the root filesystem should be mounted as read-only (<code>true</code> or <code>false</code>) <code>true</code> <code>PYTHON_RUNNER_TMPFS_MOUNT_SIZE_IN_BYTES</code> Maximum size of the <code>tmpfs</code> mount (mounted at <code>/tmp</code> inside the container) for each script container (in bytes) <code>104857600</code> (100MB) <code>PYTHON_RUNNER_DROPPED_CAPABILITIES</code> Comma-separated list of capabilities that should be removed from the container. Please refer to the Docker documentation for more details <code>CAP_NET_RAW</code> <code>PYTHON_RUNNER_NO_NEW_PRIVILEGES</code> Whether container processes should be prevented from gaining additional privileges <code>true</code>"},{"location":"installation/advanced/python-pipeline-configuration/#logging","title":"Logging","text":"Parameter Description Default <code>PYTHON_SCHEDULER_LOG_LEVEL</code> The log level for the python-scheduler (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> or <code>CRITICAL</code>) <code>WARNING</code> <code>PYTHON_STARTER_LOG_LEVEL</code> The log level for the python-starter (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> or <code>CRITICAL</code>) <code>WARNING</code>"},{"location":"installation/advanced/python-pipeline-configuration/#limiting-volume-size","title":"Limiting Volume Size","text":"<p>By default, any script container can use up all of the available storage resources on your disk.</p> <p>You can use the following instructions to set a limit for the directory that contains all volumes. These commands should be executed on your host.</p> <pre><code># Create an empty file\ntouch python-pipeline-volume\n\n# Resize the file (e.g. 2GB)\ntruncate -s 2G python-pipeline-volume\n\n# Create a new ext4 filesystem\nmke2fs -t ext4 -F python-pipeline-volume\n\n# Create a new directory which will serve as the data transfer directory\nmkdir /opt/python-pipeline-transfer\n\n# Mount the filesystem\nmount python-pipeline-volume /opt/python-pipeline-transfer\n\n# Validate your changes\ndf -h /opt/python-pipeline-transfer\n</code></pre> <p>Afterwards, you should update your <code>.env</code> file and restart the python-starter by running <code>docker compose up -d</code>:</p> <pre><code>PYTHON_TRANSFER_DIRECTORY_PATH='/opt/python-pipeline-transfer'\n</code></pre>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/","title":"Create your own SeaTable Python Runner","text":"<p>The SeaTable Python Pipeline includes a pre-configured python-runner image with numerous third-party Python libraries to execute your scripts. For a complete list of the included libraries, refer to the Developer Manual.</p> <p>If you require additional Python packages, you can either contact support to request their inclusion in future versions or build your own custom image by extending the existing one.</p>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/#build-your-own-custom-python-runner-image","title":"Build your own custom python runner image","text":"<p>This guide assumes you will create the custom Python runner image directly on your server. If you choose to build it locally, you must push the custom image to an image registry (e.g., Docker Hub), which is outside the scope of this guide.</p>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/#step-1-create-a-dockerfile","title":"Step 1: Create a <code>Dockerfile</code>:","text":"<p>Create a <code>Dockerfile</code> with the following content:</p> <pre><code># You can find the latest tag here: https://hub.docker.com/r/seatable/seatable-python-runner/tags\n# or simply use the \"latest\" tag.\nFROM seatable/seatable-python-runner:latest\n\n# Install your custom-packages with pip\nRUN pip install --user --no-cache-dir \\\n  pypdf \\\n  pytesseract \\\n  # Replace with your required packages\n</code></pre>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/#step-2-build-your-image","title":"Step 2: Build your Image","text":"<p>Run the following command to build your image. Use the <code>-t</code> option to specify a custom name and tag:</p> <pre><code>docker build . -t custom-python-runner:1.0\n</code></pre>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/#step-3-configure-seatable-to-use-your-custom-image","title":"Step 3: Configure SeaTable to Use Your Custom Image","text":"<p>Update your <code>/opt/seatable-compose/.env</code> file to specify your custom Python runner image:</p> <pre><code>PYTHON_RUNNER_IMAGE='custom-python-runner:1.0'\n</code></pre> <p>After updating the .env file, restart your SeaTable setup with:</p> <pre><code>docker compose up -d\n</code></pre> <p>You can verify that your custom image is being used by running:</p> <pre><code>docker ps\n</code></pre>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/#step-4-verify-installed-packages","title":"Step 4: Verify Installed Packages","text":"<p>Run this Python script within SeaTable to confirm that your required packages are available:</p> <pre><code>import importlib.metadata\n\ndistributions = importlib.metadata.distributions()\ninstalled_packages = [dist.metadata['Name'] for dist in distributions]\nprint(installed_packages)\n</code></pre> <p>This script will display a list of installed Python packages.</p> <p></p>"},{"location":"installation/advanced/python-pipeline-custom-python-runner/#important-considerations","title":"Important Considerations","text":"<p>No Automatic Updates</p> <p>By creating a custom Python runner image, you forgo automatic updates. When a new base image version is released, manually rebuild your custom image to incorporate the latest changes.</p> <p>Footprint</p> <p>While installing additional Python packages won't significantly slow down your Python Docker Runner, it will:</p> <ul> <li>Increase the container's size</li> <li>Potentially increase memory usage</li> </ul> <p>These factors may affect deployment time and resource allocation, but usually won't impact runtime performance noticeably.</p>"},{"location":"installation/advanced/python-pipeline-dedicated-server/","title":"Python Pipeline on a separate server","text":"<p>If your user base on your Seatable Server is growing, one of the first components that you could move to a separate server is the python pipeline. This frees up ressoures for the main server and it increases the security because customer python code is not executed on the main server.</p>"},{"location":"installation/advanced/python-pipeline-dedicated-server/#requirements","title":"Requirements","text":"<p>To install Python Pipeline on a separate server, use at least these ressources:</p> <ul> <li>2 CPU</li> <li>4 GB RAM</li> <li>40 GB SSD</li> </ul> <p>Use a separate domain or subdomain that is public available or you need a valid wildcard certificate. Caddy will generate a let's encrypt certificate.</p> <p>No self signed certificates</p> <p>Self signed certificates are not recommended. Read the article about custom certificates for more details.</p> <p>Configure a firewall</p> <p>Please configure a firewall to only allow access to port 80 and 443. These ports are required in order to receive a certificate from Let's Encrypt.</p> <p>The value of the variable <code>SEATABLE_SERVER_PUBLIC_IP</code> is used by Caddy to restrict access to the <code>python-scheduler</code> on layer 7. Only the virtual machine running <code>dtable-web</code> should be allowed to access the python-scheduler component.</p> <p>The Python pipeline should not be deployed on a virtual machine that is attached to a private network since the script containers can access this network interface if you do not configure any additional firewall rules.</p>"},{"location":"installation/advanced/python-pipeline-dedicated-server/#deployment-of-the-python-pipeline","title":"Deployment of the Python Pipeline","text":"<p>The deployment of a separate python pipeline is simple. Get seatable-release from github like described in the installation of seatable server and only use <code>caddy.yml</code> and <code>python-pipeline-standalone.yml</code>.</p> <p>Update your <code>.env</code>, that it looks like this and add/update the values according to your needs:</p> <pre><code>COMPOSE_FILE='caddy.yml,python-pipeline-standalone.yml'\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin'\n\n# seatable server url\nSEATABLE_SERVER_HOSTNAME=seatable.your-url.com\n\n# database\nMARIADB_PASSWORD=your-password\n\n# python-pipeline-standalone\nPYTHON_SCHEDULER_HOSTNAME=python.your-url.com\nPYTHON_SCHEDULER_AUTH_TOKEN=shared secret with dtable_web_settings.py\n# Only this IP is allowed to access the python-scheduler\nSEATABLE_SERVER_PUBLIC_IP='IP of seatable.your-url.com'\n</code></pre> <p>Execute <code>docker compose up -d</code> to fire up your separate python pipeline.</p>"},{"location":"installation/advanced/python-pipeline-dedicated-server/#configuration-of-seatable-server","title":"Configuration of SeaTable Server","text":"<p>SeaTable must know how to access the Python Pipeline.</p> <p>Update the <code>.env</code> on the seatable server and add these two informations:</p> <pre><code>PYTHON_SCHEDULER_URL=https://python.your-url.com\nPYTHON_SCHEDULER_AUTH_TOKEN=shared secret with python scheduler\n</code></pre> <p>Restart seatable service and test your python pipeline.</p>"},{"location":"installation/advanced/python-pipeline-workflow/","title":"Workflow of the Python Pipeline in a nutshell","text":"<p>This is a short explanation what happens, if you click on \"Run script\" inside SeaTable.</p>"},{"location":"installation/advanced/python-pipeline-workflow/#seatable-server","title":"SeaTable Server","text":"<p>To initialize the Python Pipeline, SeaTable-Server makes a POST request to the API-endpoint <code>/run-script/</code> of the scheduler. This call is authenticated by the shared secret, defined in <code>dtable_web_settings.py</code>. Every two seconds (and for max. 15 minutes), the SeaTable Server checks the status of the script execution by calling <code>/run-script/&lt;script_id&gt;</code> from the scheduler.</p>"},{"location":"installation/advanced/python-pipeline-workflow/#seatable-scheduler","title":"SeaTable Scheduler","text":"<p>The scheduler creates a new task in the mariadb database. The scheduler calls the API-endpoint <code>/function/run-python</code> of the starter. Now the scheduler waits for the starter's POST request to <code>/script-result/</code>, which indicates that the run has finished. The scheduler then writes the duration and the output to the database.</p>"},{"location":"installation/advanced/python-pipeline-workflow/#seatable-starter","title":"SeaTable Starter","text":"<p>The starter downloads the python script directly from SeaTable Server and saves the script to a temporary folder on the hard drive of the host. The starter now starts a python-runner container and mounts the script as input. After completion the runner container is deleted and the result data is sent to the scheduler by making a POST request to <code>/script-result/</code>.</p>"},{"location":"installation/advanced/python-pipeline-workflow/#seatable-runner","title":"SeaTable Runner","text":"<p>SeaTable runner executes the python script and writes the output to the same temporary folder on the host. After that the container stops.</p>"},{"location":"installation/advanced/python-pipeline-workflow/#important-points","title":"Important points","text":"<ul> <li>dtable-web only queries the result as long as the browser is open (manual execution).</li> <li>if an automation starts a python script, SeaTable Server waits max. 15 minutes for the run to finish.</li> <li>starter and runner communicate via the exchange directory. this must be available as a volume to both containers</li> <li>starter and scheduler communicate via api calls.</li> <li>the python runner is stopped after 15 minutes at the latest</li> <li>the scheduler has a cleanup process to invalidate work orders in the database that run for longer than 15 minutes.</li> <li>the task is stored in the database for some days (30 days by default)</li> </ul>"},{"location":"installation/advanced/s3-migration/","title":"Migration from local storage to S3","text":"<p>Enterprise Edition</p> <p>SeaTable provides migration scripts to migrate the data from local storage to S3. In fact three things have to be migrated:</p> <ul> <li>Storage data (Snapshots and persisted json files)</li> <li>Seafile data (Files/Images Columns)</li> <li>Avatars</li> </ul> <p>Thumbnails and temporary files could not be saved to S3, yet.</p> <p>The migration scripts are delivered with the SeaTable Docker Container and are stored in the folder <code>/templates/</code>.</p>"},{"location":"installation/advanced/s3-migration/#how-to-migrate","title":"How to migrate","text":""},{"location":"installation/advanced/s3-migration/#storage-data-seafile-data","title":"Storage data &amp; Seafile data","text":"<p>4.3</p> <ol> <li>You need four buckets: Let's call them fs, blocks, commits, storage.</li> <li>Generate credentials to access these buckets with read and write permissions.</li> <li>use these commands to enter your SeaTable Docker Container (4.3 or higher) and to start with the preparation for the migration. (this is not yet the migration)</li> </ol> <pre><code>docker exec -it seatable-server bash\ncd /templates\n./migrate-seafile-data.sh\n./migrate-storage-data.sh\n</code></pre> <p>These two commands will copy your current configuration files to a backup folder.</p> <p>Now add your S3 configuration to your config files <code>seafile.conf</code> and <code>dtable-storage-server.conf</code>. Use the instructions from this article. Be careful, due to historical reasons the settings are different for <code>seafile.conf</code> and <code>dtable-storage-server.conf</code>.</p> <p>Now it is time to execute the two commands again. This will start the migration of the data. Important: it is not yet necessary to restart SeaTable. You don't want to activate the new settings.</p> <pre><code>docker exec -it seatable-server bash\ncd /templates\n./migrate-seafile-data.sh\n./migrate-storage-data.sh\n</code></pre> <p>After the migration has finished, you can restart SeaTable</p>"},{"location":"installation/advanced/s3-migration/#avatars","title":"Avatars","text":"<p>4.4</p> <p>Before you can start the migration, you have to configure S3 for Avatars in <code>dtable_web_settings.py</code>. At this point it is sufficient to add only the configuration parameters starting with <code>S3_...</code>. The configuration option <code>AVATAR_FILE_STORAGE = ...</code> is not necessary, yet.</p> <p>After a restart of SeaTable you can start the migration with this command:</p> <pre><code>docker exec -it seatable-server bash\ncd /opt/seatable/seatable-server-latest/dtable-web\nseatable.sh python-env manage.py migrate_avatars_fs2s3\n</code></pre> <p>You will see how many avatars were migrated and when the migration will be finished:</p> <pre><code># like this...\n2024-06-17 ... migrate_avatars_fs2s3 - Success: 1, exists: 0, error: 0, count: 1\n2024-06-17 ... migrate_avatars_fs2s3 - Migrate done\n</code></pre> <p>After successful migration, you can add <code>AVATAR_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'</code> to your <code>dtable_web_settings.py</code> and restart SeaTable and redis.</p> <p>After the migration is done, you can delete the old avatars directories below <code>/opt/seatable-server/seatable/seahub-data/avatars</code>. Don't delete the avatars folder itself and don't delete the default logos <code>default.png</code> and <code>app.png</code>. They are still used.</p> <p>Security headers might prevent the loading of the images</p> <p>After activating S3 for avatars, the avatars are loaded directly from the S3 storage like <code>&lt;img src=\"https://s3.us-east-2.amazonaws.com/...\"&gt;</code>.</p> <p>Security header configuration in your <code>seatable-server.yml</code> might prevent this and you need your S3 url to the Content-Security-Policy.</p> <pre><code>caddy.header.Content-Security-Policy:\n    ...\n    img-src 'self' data: blob: ... &lt;your-S3-url&gt;\n</code></pre> <p>Avatar bucket must be publicly accessible</p> <p>While other S3 buckets used by SeaTable can remain private, the S3 bucket for avatars must be publicly readable. Once avatars are saved to S3, they are accessed directly from the S3 storage. Therefore, it is necessary to grant read access to everyone (anonymous access) while restricting write access to authenticated users with bucket credentials.</p>"},{"location":"installation/advanced/s3/","title":"S3 Object Storage","text":"<p>Enterprise Edition</p> <p>SeaTable allows the use of S3 from AWS or any other S3 compatible object storage e.g. from Exoscale, Minio, OpenStack Swift and Ceph's RGW.</p> <p>SeaTable can use S3 buckets to store these type of data:</p> <ul> <li>Base snapshots</li> <li>Content of picture and file columns</li> <li>Avatar pictures</li> </ul> <p>Bases and avatars require one bucket, to store the content of picture and files columns, you will require three buckets.</p> <p>Bucket naming conventions</p> <p>No matter if you using AWS or any other S3 compatible object storage, we recommend that you follow S3 naming rules. When you create buckets on S3, please read the S3 rules for naming first. Note, especially do not use capital letters in the name of the bucket (do not use camel-style naming, such as MyCommitObjects).</p> Good naming of a bucketBad naming of a bucket <ul> <li>customer-seatable-storage</li> <li>customer-seatable-blocks</li> <li>customer-seatable-commits</li> <li>customer-seatable-fs</li> <li>customer-seatable-avatars</li> </ul> <ul> <li>SeaTableBlocks</li> <li>SUperIMPORTANTS3</li> <li>seatable blocks</li> <li>seatable$$$</li> </ul>"},{"location":"installation/advanced/s3/#general-hints-and-recommendations","title":"General hints and recommendations","text":"<p>Restart required</p> <p>Don't forget to restart SeaTable service after these configuration changes. </p> <p>Option: use_v4_signature</p> <p>Always try to use latest signature for best performance</p> <p>Default configuration of SeaTable is to use the default Signature Version 2 for accessing commits, fs and blocks. This might lead to slow requests and a unresponsive interface.</p> <p>It is recommended to always use <code>use_v4_signature</code> to get the best performance.</p> <p>Option: aws_region</p> <p>If you use the configuration <code>use_v4_signature = true</code>, then you must also define the configuration option <code>aws_region</code> - even if you don't use AWS. If there is no <code>aws_region</code>, just add the empty value like this <code>aws_region =</code>.</p> <p>Option: host</p> <p>The configuration option <code>host</code> is the address and port of the S3 compatible service. You can not add \"http\" or \"https\" before the option. By default, it will use http connection. If you want to use https connection, set the option:<code>use_https = true</code>.</p> <p>Option: path_style</p> <p><code>path_style_request</code> option tells Seatable to use the form <code>https://192.168.1.123:8080/bucketname/object</code> to access the object. In AWS S3 service, the default URL format is virtual host format, such as <code>https://bucketname.s3.amazonaws.com/object</code>. But general object storage products do not support this format.</p>"},{"location":"installation/advanced/s3/#s3-for-base-snapshots","title":"S3 for base snapshots","text":"<p>3.0</p> <p>The storage of base snapshots are configured in <code>dtable-storage-server.conf</code>.</p> <p>By default the section <code>[storage backend]</code> contains <code>type = filesystem</code>, which stores all base snapshots in the folder <code>/opt/seatable-server/seatable/storage-data</code>.</p> <p>To use S3, switch the type to <code>type = s3</code>. Depending on whether you are using AWS or an S3 compatible service, different configuration options must be used.</p> AWSExoscaleHetznerS3 compatible storage <p>AWS requires only a few settings. <code>key_id</code> and <code>key</code> are used to provide S3 authentication. You can find the <code>key_id</code> and <code>key</code> in the Security Credentials section of your AWS account page.</p> <pre><code>[storage backend]\ntype = s3\nbucket = ...\nkey_id =\nkey =\n</code></pre> <p>Create the bucket and an IAM Key for accessing the S3 storage from exoscale.</p> <pre><code>[storage backend]\ntype = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nuse_https = true\nkey_id = ...\nkey = ...\npath_style_request = true\nuse_v4_signature = true\naws_region =\n</code></pre> <p>Create the bucket and an IAM Key for accessing the S3 storage from exoscale.</p> <pre><code>[storage backend]\ntype = s3\nbucket = your-bucket-name\nhost = fsn1.your-objectstorage.com\nuse_https = true\nkey_id = ...\nkey = ...\npath_style_request = true\nuse_v4_signature = true\naws_region =\n</code></pre> <p>Use the following settings to connect to your S3 compatible storage.</p> <pre><code>[storage backend]\ntype = s3\nbucket = ...\nhost = ...\nuse_https = true\nkey_id =\nkey =\npath_style_request = true\nuse_v4_signature = true\naws_region =\n</code></pre>"},{"location":"installation/advanced/s3/#s3-for-files-and-pictures","title":"S3 for files and pictures","text":"<p>3.0</p> <p>S3 Object storage for file and picture columns is configured in <code>/opt/seatable-server/seatable/conf/seafile.conf</code>. You have to add three new sections:</p> <ul> <li>[commit_object_backend]</li> <li>[fs_object_backend]</li> <li>[block_backend]</li> </ul> AWSexoscaleHetznerS3 compatible storage <pre><code>[commit_object_backend]\nname = s3\nbucket = my-commit-objects\nkey_id = your-key-id\nkey = your-secret-key\nuse_v4_signature = true\naws_region = eu-central-1\nhost = s3.us-east-1.amazonaws.com\n\n[fs_object_backend]\nname = s3\nbucket = my-fs-objects\nkey_id = your-key-id\nkey = your-secret-key\nuse_v4_signature = true\naws_region = eu-central-1\nhost =\n\n[block_backend]\nname = s3\nbucket = my-block-objects\nkey_id = your-key-id\nkey = your-secret-key\nuse_v4_signature = true\naws_region = eu-central-1\nhost =\n</code></pre> <p>You can get an overview of regular AWS S3 endpoints from here.</p> <pre><code>[commit_object_backend]\nname = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nkey_id = ...\nkey = ...\nuse_https = true\nuse_v4_signature = true\npath_style_request = true\n\n[fs_object_backend]\nname = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nkey_id = ...\nkey = ...\nuse_https = true\nuse_v4_signature = true\npath_style_request = true\n\n[block_backend]\nname = s3\nbucket = your-bucket-name\nhost = sos-de-fra-1.exo.io\nkey_id = ...\nkey = ...\nuse_https = true\nuse_v4_signature = true\npath_style_request = true\n</code></pre> <pre><code>[commit_object_backend]\nname = s3\nbucket = your-bucket-name\nhost = fsn1.your-objectstorage.com\nkey_id = ...\nkey = ...\nuse_https = true\nuse_v4_signature = true\npath_style_request = true\n\n[fs_object_backend]\nname = s3\nbucket = your-bucket-name\nhost = fsn1.your-objectstorage.com\nkey_id = ...\nkey = ...\nuse_https = true\nuse_v4_signature = true\npath_style_request = true\n\n[block_backend]\nname = s3\nbucket = your-bucket-name\nhost = fsn1.your-objectstorage.com\nkey_id = ...\nkey = ...\nuse_https = true\nuse_v4_signature = true\npath_style_request = true\n</code></pre> <pre><code>[commit_object_backend]\nname = s3\nbucket = my-commit-objects\nkey_id = your-key-id\nkey = your-secret-key\nuse_v4_signature = true\nhost =\n\n[fs_object_backend]\nname = s3\nbucket = my-fs-objects\nkey_id = your-key-id\nkey = your-secret-key\nuse_v4_signature = true\nhost =\n\n[block_backend]\nname = s3\nbucket = my-block-objects\nkey_id = your-key-id\nkey = your-secret-key\nuse_v4_signature = true\nhost =\n</code></pre> Caching for S3 (files and pictures) <p>Seafile supports the use of caching, which, while not required, is highly recommended as it can significantly enhance the performance of file and folder listing operations. Below are the configuration settings for <code>seafile.conf</code>, applicable to both Redis (the default caching system since version 5.2) and Memcached (the default for versions prior to 5.2):</p> redismemcached <pre><code>[redis]\nredis_host = redis\nredis_port = 6379\nmax_connections = 100\n</code></pre> <pre><code>[memcached]\nmemcached_options = --SERVER=memcached --POOL-MIN=10 --POOL-MAX=100\n</code></pre>"},{"location":"installation/advanced/s3/#s3-for-avatars","title":"S3 for avatars","text":"<p>4.4</p> <p>It is possible to store the avatar pictures in S3 instead of the local filesystem. SeaTable uses the Django File Storage API for AWS S3.</p> <p>Avatar bucket must be publicly accessible</p> <p>While other S3 buckets used by SeaTable can remain private, the S3 bucket for avatars must be publicly readable. Once avatars are saved to S3, they are accessed directly from the S3 storage. Therefore, it is necessary to grant read access to everyone (anonymous access) while restricting write access to authenticated users with bucket credentials.</p> <p>The storage of the avatar pictures is configured in <code>dtable_web_settings.py</code>. Currently these options are currently available and mapped to the django-storage settings:</p> SeaTable Configuration Django Storage Setting S3_ENDPOINT_URL AWS_S3_ENDPOINT_URL S3_REGION AWS_S3_REGION_NAME S3_ACCESS_KEY_ID AWS_S3_ACCESS_KEY_ID S3_SECRET_ACCESS_KEY AWS_S3_ACCESS_KEY_ID S3_BUCKET_NAME AWS_STORAGE_BUCKET_NAME <p><code>AWS_S3_SIGNATURE_VERSION</code> is set by default to <code>s3v4</code> and can not be configured.</p> <p>Here are some examples on how to configure the S3 bucket for avatars.</p> AWSExoscaleHetznerS3 compatible storage <p>You can find the value for <code>S3_ACCESS_KEY_ID</code> and <code>S3_SECRET_ACCESS_KEY</code> in the Security Credentials section of your AWS account page.</p> <pre><code>AVATAR_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'\nS3_ENDPOINT_URL = 'https://s3.example.com'\nS3_REGION = 'eu-west-1'\nS3_ACCESS_KEY_ID = ''\nS3_SECRET_ACCESS_KEY = ''\nS3_BUCKET_NAME = ''\n</code></pre> <p>Create the bucket and an IAM Key for accessing the S3 storage from exoscale.</p> <pre><code>AVATAR_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'\nS3_ENDPOINT_URL = 'https://sos-de-fra-1.exo.io'\nS3_ACCESS_KEY_ID = ''\nS3_SECRET_ACCESS_KEY = ''\nS3_BUCKET_NAME = 'your-bucket-name'\n</code></pre> <p>Create the bucket and an IAM Key for accessing the S3 storage from exoscale.</p> <pre><code>AVATAR_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'\nS3_ENDPOINT_URL = 'https://fsn1.your-objectstorage.com'\nS3_ACCESS_KEY_ID = ''\nS3_SECRET_ACCESS_KEY = ''\nS3_BUCKET_NAME = 'your-bucket-name'\n</code></pre> <p>Use the following settings to connect to your S3 compatible storage.</p> <pre><code>AVATAR_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'\nS3_ENDPOINT_URL = 'https://sos-de-fra-1.exo.io'\nS3_ACCESS_KEY_ID = ''\nS3_SECRET_ACCESS_KEY = ''\nS3_BUCKET_NAME = 'your-bucket-name'\n</code></pre>"},{"location":"installation/advanced/seafile/","title":"Integrate with Seafile","text":"<p>4.0 Enterprise Edition</p> <p>When integrating SeaTable and Seafile, users can add files from Seafile libraries in file columns.</p>"},{"location":"installation/advanced/seafile/#scope-of-the-connection","title":"Scope of the Connection","text":"<p>The Seafile connection to SeaTable enables you to</p> <ul> <li>Choose a file as attachment from the Seafile library in SeaTable</li> <li>Save attachments in a SeaTable base to your Seafile library (WIP)</li> </ul>"},{"location":"installation/advanced/seafile/#how-to-setup-the-connection-on-seatable-server-side","title":"How to Setup the Connection on SeaTable Server Side","text":"<ul> <li>Go to Seafile and generate an API token for your library</li> <li>Go to SeaTable and click on the 3-dots menu inside a base, go to Third party integration &gt; Seafile and enter the full URL (including \u201chttp\u201d or \u201chttps\u201d) and the API token and then submit.</li> </ul>"},{"location":"installation/advanced/seafile/#requirements-on-the-seafile-server-side","title":"Requirements on the Seafile Server Side","text":"<p>The cross-domain permissions must be set. This can be done by adding the \"Access-Control-Allow-Origin\" header.</p> <p>Add the following code block to the configuration file <code>seafile.conf</code> in <code>/etc/nginx/sites-available/</code> or <code>seafile.nginx.conf</code> in <code>/etc/nginx/sites-enabled</code> (the exact filename and path depend on your Seafile version and installation method):</p> <pre><code>    location / {\n        add_header Access-Control-Allow-Origin *;\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n            add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n            return 204;\n        }\n\n        proxy_pass         http://127.0.0.1:8000;\n        ...............\n</code></pre>"},{"location":"installation/advanced/seafile/#current-limitations","title":"Current Limitations","text":"<ul> <li>Only a single library can be linked to a specific base</li> <li>The base editor does not display thumbnails for images stored inside an external Seafile library</li> <li>Image columns are not supported yet</li> </ul>"},{"location":"installation/advanced/settings-caddy/","title":"Advanced Settings for Caddy","text":""},{"location":"installation/advanced/settings-caddy/#enabling-logging-for-caddy-docker-proxy","title":"Enabling Logging for Caddy Docker Proxy","text":"<p>To enable logging for the Lucas Lorentz Caddy Docker Proxy, you need to add a label to the service container (not the proxy container itself). For SeaTable Server, you can activate logging by adding the <code>caddy.log</code> label to your <code>seatable-server.yml</code> file.</p> <p>Example Configuration</p> <pre><code>---\nservices:\n  seatable-server:\n    ...\n    labels:\n      caddy: ${SEATABLE_SERVER_PROTOCOL:-https}://${SEATABLE_SERVER_HOSTNAME:?Variable is not set or empty}\n      caddy.log:\n      caddy.reverse_proxy: \"{{upstreams 80}}\"\n      ...\n</code></pre> <p>Explanation</p> <p>This label <code>caddy.log:</code> enables logging for the service and outputs logs to <code>stdout</code>. Once configured, you can view the logs using standard Docker commands, such as <code>docker logs &lt;container_name&gt;</code> or <code>docker compose logs seatable-server</code>.</p> <p>These logs are specific to the service container (e.g., SeaTable Server). To view logs for the Caddy proxy itself, check the logs of the Caddy proxy container.</p>"},{"location":"installation/advanced/webserver-security/","title":"Security settings","text":""},{"location":"installation/advanced/webserver-security/#accept-headers","title":"Accept headers","text":"<p>Our default deployment enforces strict security headers, which prevent the loading of images or scripts from external URLs. This approach is designed to enhance security and protect against fraudulent activities.</p> <p>If you are running your own server, you have the option to modify these security headers to allow additional sites to interact with your SeaTable server.</p> <p>To adjust these settings, you can modify the <code>seatable-server.yml</code> file located at <code>/opt/seatable-compose/seatable-server.yml</code>. The default configuration might look like this:</p> <pre><code>caddy.header.Content-Security-Policy: \"`\n    block-all-mixed-content;\n    default-src 'none';\n    style-src 'unsafe-inline' 'self';\n    script-src 'unsafe-inline' 'unsafe-eval' 'self';\n    script-src-elem 'unsafe-inline' 'self' ${SEATABLE_SERVER_HOSTNAME}:${ONLYOFFICE_PORT:-6233} maps.googleapis.com;\n    font-src 'self' data:;\n    img-src 'self' data: blob: https: market.seatable.io mt0.google.com maps.googleapis.com maps.gstatic.com;\n    form-action 'self' ${SEATABLE_SERVER_HOSTNAME}:${COLLABORA_PORT:-6232};\n    connect-src 'self' market.seatable.io https:;\n    frame-src 'self' ${SEATABLE_SERVER_HOSTNAME}:${COLLABORA_PORT:-6232} ${SEATABLE_SERVER_HOSTNAME}:${ONLYOFFICE_PORT:-6233};\n    frame-ancestors 'self';\n    worker-src 'self' blob:;\n    manifest-src 'self';\n    object-src 'self';\n    base-uri 'self'\n    `\"\n</code></pre> <p>Create a custom copy of your <code>seatable-server.yml</code> file and modify these settings according to your specific requirements. Don't forget to link the new yml file in your <code>.env</code> file.</p>"},{"location":"installation/advanced/webserver-security/#cookies","title":"Cookies","text":"<p>Secure cookies require additional configuration</p> <p>To get these ratings, it is required to add two more options to <code>dtable_web_settings.py</code>. In one of the next versions, these parameters will probably be added by default.</p> <pre><code>CSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True\n</code></pre>"},{"location":"installation/advanced/webserver-security/#dnssec","title":"DNSSEC","text":"<p>It also requires DNSSEC from your domain hoster to get the best security measures.</p>"},{"location":"installation/cluster/basic-setup-with-external-services/","title":"Basic Setup of a SeaTable Cluster","text":"<p>SeaTable currently does not support installing a cluster with a single command. This may change in the future, but for now, some configuration changes and migrations are required after deploying the Docker containers.</p> <p>Every SeaTable Cluster installation starts with the deployment of a single node. The main difference is that, from the beginning, you use external services instead of running Redis and MariaDB on the same machine as SeaTable. Arterwards we will move component after component to other nodes.</p> <p></p>"},{"location":"installation/cluster/basic-setup-with-external-services/#basic-setup-with-external-services","title":"Basic setup with external services","text":"<p>Follow the installation instructions for a single node up to the point where you would start your SeaTable Server for the first time. Before starting the server, you need to make some additional changes to your setup.</p> Use external services instead of local MariaDB and Redis <p>Update your <code>.env</code> file to include the required variables for <code>REDIS</code> and <code>MARIADB</code>. Set passwords, IPs, and usernames according to your environment. This ensures that your SeaTable Server connects to these external services.</p> <pre><code># components to be used; IMPORTANT: there should be no space between\n# the files names!\nCOMPOSE_FILE='caddy.yml,dtable-web.yml'\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin'\n\n# seatable server url\nSEATABLE_SERVER_HOSTNAME='cluster.seatable.com\nSEATABLE_SERVER_PROTOCOL='https'\n\n# initial web admin\nSEATABLE_ADMIN_EMAIL='cluster@seatable.com'\nSEATABLE_ADMIN_PASSWORD='topsecret'\n\n# database (managed service)\nMARIADB_HOST=10.0.0.99\nMARIADB_USER=root\nMARIADB_PASSWORD='topsecret'\n\n# redis (managed service)\nREDIS_HOST=10.0.0.99\nREDIS_PORT=6379\nREDIS_PASSWORD='topsecret'\n\n# shared secret for secure communication\nJWT_PRIVATE_KEY='topsecret'\n</code></pre> Remove Redis and Mariadb from your YAML file. <p>Create a copy of <code>seatable-server.yml</code> and name it, for example, <code>dtable-web.yml</code>. Make the following changes to this file:</p> <ul> <li>Remove the <code>depends_on:</code> entries for Redis and MariaDB.</li> <li>Remove the <code>backend-seatable-net</code> network, as it is no longer needed.</li> </ul> <p>Example configuration:</p> <pre><code>---\nservices:\n  seatable-server:\n    image: ${SEATABLE_IMAGE:-seatable/seatable-enterprise:x.x.x}\n    restart: unless-stopped\n    container_name: seatable-server\n    volumes:\n        ...\n    environment:\n        ...\n    labels:\n        ...\n    networks:\n      - frontend-net\n\nnetworks:\n  frontend-net:\n    name: frontend-net\n</code></pre> <p>Now, you can run <code>docker compose up -d</code> for the first time.</p> <p>After starting, verify that only these two Docker containers are running on the SeaTable node:</p> <ul> <li>caddy</li> <li>seatable-server</li> </ul> <p>Log in with your defined admin credentials for the first time to check, that the deployment was successful.</p>"},{"location":"installation/cluster/basic-setup-with-external-services/#migration-to-s3-storage","title":"Migration to S3 storage","text":"<p>Follow the instructions in the admin manual to migrate from local storage to S3 for the following data types:</p> <ul> <li>Base snapshots</li> <li>Files and pictures</li> <li>Avatars</li> </ul> <p>Verify that everything is working by performing these steps:</p> <ul> <li>Create a new base. After a few minutes, you should see the <code>current</code> directory in the S3 bucket for storage.</li> <li>Create a new file/image column in the base and upload a file. You should see new entries in the S3 buckets for <code>fs</code>, <code>commits</code>, and <code>blocks</code>.</li> <li>Upload a new avatar. This should be stored in the S3 bucket for <code>avatars</code>.</li> </ul> <p>Once you have verified that everything is working, you can continue with the deployment.</p>"},{"location":"installation/cluster/dtable-db-standalone/","title":"dtable-db Standalone","text":"<p>To improve scalability and reliability, the next step is to move <code>dtable-db</code> to its own dedicated node.</p> <p></p>"},{"location":"installation/cluster/dtable-db-standalone/#setting-up-a-standalone-dtable-db-server","title":"Setting Up a Standalone dtable-db Server","text":"<p>Prepare a new node with Docker installed, and copy the following files from your first node to this new node:</p> <ul> <li><code>/opt/seatable-compose/.env</code></li> <li><code>/opt/seatable-compose/seatable-license.txt</code></li> </ul> <p>Open the <code>.env</code> file on the new node and ensure that the <code>COMPOSE_FILE</code> variable references only a single YAML file, like this:</p> <pre><code>COMPOSE_FILE='dtable-db.yml'\n</code></pre>"},{"location":"installation/cluster/dtable-db-standalone/#create-dtable-dbyml","title":"Create <code>dtable-db.yml</code>","text":"<p>Now, create the <code>dtable-db.yml</code> file. You can either copy <code>dtable-web.yml</code> from the first node or use <code>seatable-server.yml</code> from the SeaTable release as a template.</p> <p>Apply the following required changes to this file:</p> Remove all services except seatable-server <p>The <code>dtable-db</code> node only requires the <code>seatable-server</code> service. Remove all other services (such as redis, mariadb, or caddy).</p> Remove all labels <p>Since <code>dtable-db</code> node does not require Caddy or any TLS termination, remove all labels from the <code>seatable-server</code> service.</p> Add additional environment variables <p>Add or update the following environment variables to ensure only <code>dtable-db</code> is enabled:</p> <pre><code>environment:\n  #... all default environment variables in seatable-server.yml ...\n  # this node should only run dtable-db, all other services are disabled\n  - ENABLE_DTABLE_DB=true                # that is, what we want\n  - ENABLE_DTABLE_STORAGE_SERVER=true    # required for big data backup\n  - ENABLE_SEAFILE_SERVER=false\n  - ENABLE_DTABLE_WEB=false\n  - ENABLE_DTABLE_SERVER=false\n  - ENABLE_DTABLE_EVENTS=false\n  - ENABLE_API_GATEWAY=false\n  - SEATABLE_START_MODE=cluster          # Don't run any database update processes\n</code></pre> Expose port 7777 <p>The <code>dtable-db</code> node must be accessible to other nodes. Add the following to the <code>seatable-server</code> service:</p> <pre><code>ports:\n  - 7777:7777\n</code></pre> Configure internal network communication <p>Node-to-node communication uses the internal network. Ensure all nodes can reach each other by adding their names and private IP addresses:</p> <pre><code>extra_hosts:\n  - \"dtable-web:10.0.0.2\"\n  - \"dtable-db:10.0.0.3\"\n</code></pre> <p>For reference, here is an example of what your <code>dtable-db.yml</code> might look like (do not copy and paste directly \u2014 adapt as needed):</p> <pre><code>---\nservices:\n  seatable-server:\n    image: ${SEATABLE_IMAGE:-seatable/seatable-enterprise:x.x.x}\n    restart: unless-stopped\n    container_name: seatable-server\n    volumes:\n      - \"/opt/seatable-server:/shared\"\n      - type: bind\n        source: \"./seatable-license.txt\"\n        target: \"/shared/seatable/seatable-license.txt\"\n        read_only: ${SEATABLE_LICENSE_FORCE_READ_ONLY:-false}\n    environment:\n      ...\n      ...\n      # this node should only run dtable-db\n      - ENABLE_DTABLE_DB=true\n      - ENABLE_DTABLE_STORAGE_SERVER=true\n      - ENABLE_SEAFILE_SERVER=false\n      - ENABLE_DTABLE_WEB=false\n      - ENABLE_DTABLE_SERVER=false\n      - ENABLE_DTABLE_EVENTS=false\n      - ENABLE_API_GATEWAY=false\n      - SEATABLE_START_MODE=cluster\n    ports:\n      - 7777:7777\n    extra_hosts:\n      - \"dtable-web:10.0.0.2\"\n      - \"dtable-db:10.0.0.3\"\n    networks:\n      - frontend-net\nnetworks:\n  frontend-net:\n    name: frontend-net\n</code></pre> <p>Now, start dtable-db for the first time and monitor the logs:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/cluster/dtable-db-standalone/#changes-after-first-start","title":"Changes after first start","text":"<p>After the first start of <code>dtable-db</code> you need to make the following changes to newly created configuration files:</p> Add S3 configuration <p>Add the S3 configuration to `conf/dtable-storage-server.conf - analog to your first node. </p> Two additional configuration changes <p>Open <code>conf/dtable-db.conf</code> and make these two changes:</p> <ul> <li>set <code>host</code> to 0.0.0.0 that other nodes can reach dtable-db.</li> <li>add <code>[dtable cache]</code> to tell <code>dtable-db</code> where to find <code>dtable-server</code>.</li> </ul> <pre><code>[general]\nhost = 0.0.0.0\n\n[dtable cache]\ndtable_server_url = \"http://dtable-web:5000\"\n</code></pre>"},{"location":"installation/cluster/dtable-db-standalone/#verify-installation-on-dtable-db","title":"Verify installation on dtable-db","text":"<p>Now it is time to restart dtable-db and verify that the service is running and port 7777 is exposed. Simply run:</p> <pre><code>curl 127.0.0.1:7777/ping/\n</code></pre> <p>You should receive the following response:</p> <pre><code>{\"ret\":\"pong\"}\n</code></pre>"},{"location":"installation/cluster/dtable-db-standalone/#configure-dtable-web-to-use-the-standalone-dtable-db","title":"Configure dtable-web to use the standalone dtable-db","text":"<p>Now that dtable-db is up and running, it is time to tell dtable-web to use this separate node instead of the internal component.  These are the changes, you have to do.</p> Disable dtable-db in <code>.env</code> <p>Open <code>/opt/seatable-compose/dtable-web.yml</code> and make these changes:</p> <pre><code>environment:\n  - ENABLE_DTABLE_DB=false\n  - SEATABLE_START_MODE=first\nextra_hosts:\n  - \"dtable-web:10.0.0.2\"\n  - \"dtable-db:10.0.0.3\"\nports:\n  - \"5000:5000\"\n</code></pre> Create configuration file for the API-Gateway <p>Create a new configuration file <code>conf/dtable-api-gateway.conf</code> and add these lines to tell this node, where to find <code>dtable-db</code></p> <pre><code>[dtable-db]\nserver_address = \"http://dtable-db:7777\"\n</code></pre> Update <code>dtable_web_settings.py</code> <p>Open the configuration file <code>/conf/dtable_web_settings.py</code> and add this line:</p> <pre><code>INNER_DTABLE_DB_URL = 'http://dtable-db:7777/'\n</code></pre> Update <code>dtable_server_config.json</code> <p>Open the configuration file <code>conf/dtable_server_config.json</code> and add this line. Make sure, that it is valid json, meaning the last key-value pair, does not have a comma at the end.</p> <pre><code>\"dtable_db_service_url\": \"http://dtable-db:7777\"\n</code></pre>"},{"location":"installation/cluster/dtable-db-standalone/#restart-dtable-web-server","title":"Restart dtable-web server","text":"<pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/cluster/dtable-db-standalone/#verify-complete-setup","title":"Verify complete setup","text":"<p>A good way to verify, that the two nodes are working fine, is to ppen a universal app in the webinterface. You should see log entries on <code>dtable-db</code> in <code>/logs/dtable-db-access.log</code>.</p> <p>Congratulations. dtable-db is now standalone.</p>"},{"location":"installation/cluster/dtable-events-background-node/","title":"dtable-events background Node","text":"<p><code>dtable-events</code> is the workhorse of SeaTable Server, handling resource-intensive tasks such as syncing common datasets, PDF generation, scheduled automations, and more. If your system is heavily loaded with these tasks, it may be beneficial to separate dtable-events onto its own node. This step is only necessary if you observe resource constraints on <code>dtable-web</code>.</p> <p>There are two types of tasks performed by dtable-events:</p> <ul> <li>Foreground tasks (instant): Must be executed immediately.</li> <li>Background tasks: Not time-critical and can be processed asynchronously.</li> </ul> <p>Examples:</p> Type Task foreground Import/Export of a base or view foreground PDF generation background Common dataset sync background Sending notifications or emails background Database cleanup background Scheduled automations <p>SeaTable allows you to split dtable-events, moving background tasks to a dedicated node while foreground tasks continue to run alongside <code>dtable-web</code>.</p>"},{"location":"installation/cluster/dtable-events-background-node/#setting-up-the-dtable-events-background-node","title":"Setting up the dtable-events background Node","text":"<ol> <li> <p>Prepare a new node with Docker installed.</p> </li> <li> <p>Copy the following files from your first node to the new node:</p> </li> <li><code>/opt/seatable-compose/.env</code></li> <li> <p><code>/opt/seatable-compose/seatable-license.txt</code></p> </li> <li> <p>Edit the <code>.env</code> file on the new node and set the <code>COMPOSE_FILE</code> variable to reference only a single YAML file:</p> <pre><code>COMPOSE_FILE='dtable-events.yml'\n</code></pre> </li> </ol>"},{"location":"installation/cluster/dtable-events-background-node/#create-dtable-eventsyml","title":"Create <code>dtable-events.yml</code>","text":"<p>You can either copy <code>dtable-web.yml</code> from the first node or use <code>seatable-server.yml</code> from the SeaTable release as a template.  </p> <p>Apply the following required changes:</p> Remove all services except seatable-server <p>The <code>dtable-events</code> node only requires the <code>seatable-server</code> service. Remove all other services (such as redis, mariadb, or caddy).</p> Remove all labels <p>Since <code>dtable-events</code> node does not require Caddy or any TLS termination, remove all labels from the <code>seatable-server</code> service.</p> Add additional environment variables <p>Add or update the following environment variables to ensure only <code>dtable-event</code> is enabled:</p> <pre><code>environment:\n  # necessary for dtable-events (background)\n  - ENABLE_DTABLE_EVENTS=true\n  - DTABLE_EVENTS_TASK_MODE=background\n  - ENABLE_DTABLE_STORAGE_SERVER=true\n  - ENABLE_SEAFILE_SERVER=true\n  # should be disabled\n  - ENABLE_DTABLE_DB=false\n  - ENABLE_DTABLE_WEB=false\n  - ENABLE_DTABLE_SERVER=false\n  - ENABLE_API_GATEWAY=false\n  - SEATABLE_START_MODE=cluster\n</code></pre> Configure internal network communication <p>Ensure all nodes can reach each other by adding their names and private IP addresses:</p> <pre><code>extra_hosts:\n  - \"dtable-web:10.0.0.2\"\n  - \"dtable-db:10.0.0.3\"\n  - \"dtable-server:10.0.0.4\"\n  - \"dtable-server-2:10.0.0.5\"\n  - \"dtable-events:10.0.0.6\"\n</code></pre>"},{"location":"installation/cluster/dtable-events-background-node/#example-dtable-eventsyml","title":"Example <code>dtable-events.yml</code>","text":"<p>Do not copy and paste directly \u2014 adapt as needed:</p> <pre><code>---\nservices:\n  seatable-server:\n    image: ${SEATABLE_IMAGE:-seatable/seatable-enterprise:x.x.x}\n    restart: unless-stopped\n    container_name: seatable-server\n    volumes:\n      - \"/opt/seatable-server:/shared\"\n      - type: bind\n        source: \"./seatable-license.txt\"\n        target: \"/shared/seatable/seatable-license.txt\"\n        read_only: ${SEATABLE_LICENSE_FORCE_READ_ONLY:-false}\n    environment:\n      ...\n      - ENABLE_DTABLE_EVENTS=true\n      - DTABLE_EVENTS_TASK_MODE=background\n      - ENABLE_DTABLE_STORAGE_SERVER=true\n      - ENABLE_SEAFILE_SERVER=true\n      - ENABLE_DTABLE_DB=false\n      - ENABLE_DTABLE_WEB=false\n      - ENABLE_DTABLE_SERVER=false\n      - ENABLE_API_GATEWAY=false\n      - SEATABLE_START_MODE=cluster\n    extra_hosts:\n      - \"dtable-web:10.0.0.2\"\n      - \"dtable-db:10.0.0.3\"\n      - \"dtable-server:10.0.0.4\"\n      - \"dtable-server-2:10.0.0.5\"\n      - \"dtable-events:10.0.0.6\"\n    networks:\n      - frontend-net\nnetworks:\n  frontend-net:\n    name: frontend-net\n</code></pre> <p>Start <code>dtable-events</code> for the first time and monitor the logs:</p> <pre><code>docker compose up -d\n</code></pre> Why are no ports exposed? <p><code>dtable-events</code> does not need to expose any ports. It runs internal cron jobs and subscribes to Redis channels. No direct external connection is required.</p>"},{"location":"installation/cluster/dtable-events-background-node/#changes-after-first-start","title":"Changes after first start","text":"<p>After starting <code>dtable-events</code> for the first time, update the configuration files as follows:</p> Add S3 configuration <p>Add the S3 configuration to both <code>conf/dtable-storage-server.conf</code> and <code>conf/seafile.conf</code> \u2014 just as you did on your first node.</p> <p>Restart the container to apply these changes.</p>"},{"location":"installation/cluster/dtable-events-background-node/#final-changes-on-dtable-web","title":"Final changes on dtable-web","text":"<p>Now that background tasks are handled by the new node, you should disable them on <code>dtable-web</code>.</p> <p>Open <code>/opt/seatable-compose/dtable-web.yml</code> and add the following to the environment variables:</p> <pre><code>DTABLE_EVENTS_TASK_MODE=foreground\n</code></pre> <p>Restart <code>dtable-web</code> to apply the changes.</p> <p>Your <code>dtable-events</code> background node is now set up, and resource-intensive background tasks are offloaded from your main web node. This improves performance and scalability for large SeaTable installations.</p>"},{"location":"installation/cluster/dtable-server-multiple/","title":"Installation multiple dtable-servers","text":"<p>As your system grows, the <code>dtable-server</code> often becomes the first bottleneck. To address this, you can scale dtable-server horizontally. This guide explains how to set up multiple dtable-servers and configure a proxy on the <code>dtable-web</code> node to distribute base requests between them.</p> <p></p>"},{"location":"installation/cluster/dtable-server-multiple/#routing-logic-with-multiple-dtable-servers","title":"Routing logic with multiple dtable-servers","text":"<p>Proper routing logic is essential when running multiple dtable-servers. While <code>seatable-server</code> itself is stateless, it is crucial that all users open a specific base on the same dtable-server. </p> <ul> <li>When a base is opened, dtable-server loads it into memory and only writes updates to disk every five minutes.</li> <li>If the same base is opened on two different dtable-servers, their changes can overwrite each other \u2014 this must be avoided.</li> </ul> <p>To ensure consistency, implement a fixed mapping of bases to dtable-servers using the <code>base_uuid</code>. This ensures each base is always handled by the same server. This setup is not a failover solution, but it scales horizontally and can support thousands or even tens of thousands of users.</p> <p>Example mapping logic:</p> <ul> <li>Bases starting with <code>0-9</code>: handled by the first dtable-server.</li> <li>Bases starting with <code>a-f</code>: handled by the second dtable-server.</li> </ul>"},{"location":"installation/cluster/dtable-server-multiple/#setting-up-a-of-second-dtable-server","title":"Setting up a of second dtable-server","text":"<ol> <li> <p>Install a second dtable-server as described in the dtable-server (standalone) section. Name it <code>dtable-server-2</code>.</p> </li> <li> <p>Update the private network configuration: Add the IP address of the new server to the <code>extra_hosts</code> section on all nodes.</p> <pre><code>  extra_hosts:\n    - \"dtable-web:10.0.0.2\"\n    - \"dtable-db:10.0.0.3\"\n    - \"dtable-server:10.0.0.4\"\n    - \"dtable-server-2:10.0.0.5\n</code></pre> </li> <li> <p>Verify that <code>dtable-server-2</code> is accessible on port 5000.</p> </li> </ol>"},{"location":"installation/cluster/dtable-server-multiple/#adding-a-proxy-to-distribute-requests","title":"Adding a Proxy to Distribute Requests","text":"<p>To route requests to the correct <code>dtable-server</code>, add a proxy component (using nginx), called <code>dtable-server-proxy</code>. Deploy this on the <code>dtable-web</code> node.</p>"},{"location":"installation/cluster/dtable-server-multiple/#create-the-proxy-service","title":"Create the Proxy Service","text":"<p>Create <code>/opt/seatable-compose/dtable-server-proxy.yml</code> on <code>dtable-web</code>:</p> <pre><code>---\nservices:\n  dtable-server-proxy:\n    image: nginx:1.27.5-alpine\n    container_name: dtable-server-proxy\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro\n    networks:\n      - frontend-net\n    extra_hosts:\n      - \"dtable-web:10.0.0.2\"\n      - \"dtable-db:10.0.0.3\"\n      - \"dtable-server:10.0.0.4\"\n      - \"dtable-server-2:10.0.0.5\n    logging:\n      driver: json-file\n      options:\n        # Maximum size per file\n        max-size: 10m\n        # Maximum number of files\n        max-file: 3\n\nnetworks:\n  frontend-net:\n    name: frontend-net\n</code></pre>"},{"location":"installation/cluster/dtable-server-multiple/#configure-nginx-routing","title":"Configure nginx Routing","text":"<p>Create <code>/opt/seatable-compose/nginx-proxy.conf</code> on <code>dtable-web</code>. This configuration defines two upstream servers and a routing map:</p> <pre><code>worker_processes auto;\n\nevents {\n  worker_connections 4096;\n}\n\nhttp {\n  access_log off;\n  error_log /dev/stdout warn;\n\n  # dtable-server 1\n  upstream dtable_server_a_z {\n    server dtable-server:5000;\n    keepalive 15;\n  }\n\n  # dtable-server 2\n  upstream dtable_server_0_9 {\n    server dtable-server-2:5000;\n    keepalive 15;\n  }\n\n  # Map to dynamically determine the upstream server based on the UUID in the URL\n  map $request_uri $dtable_upstream {\n    default                                  dtable_server_a_z;    # Default to the a-z server\n    \"~*ff84e1a1-66e2\"                        dtable_server_0_9;    # force this base to server 2\n    \"~*([a-zA-Z])([0-9a-f]{7}-[0-9a-f]{4})\"  dtable_server_a_z;\n    \"~*([0-9])([0-9a-f]{7}-[0-9a-f]{4})\"     dtable_server_0_9;\n  }\n\nserver {\n  server_name _;\n  listen 5000;\n\n  location / {\n    proxy_pass http://$dtable_upstream;\n    proxy_set_header X-Upstream-Server $dtable_upstream;\n    client_max_body_size 100m;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection upgrade;\n    access_log /tmp/access.log;\n    error_log /tmp/error.log;\n  }\n}\n}\n</code></pre> <p>You can adapt the routing logic as needed, for example by splitting bases differently or forcing specific <code>base_uuid</code>s to a particular server.</p>"},{"location":"installation/cluster/dtable-server-multiple/#required-configuration-changes","title":"Required Configuration Changes","text":"Start dtable-server-proxy <p>Add <code>dtable-server-proxy.yml</code> to your <code>.env</code> by including it in the <code>COMPOSE_FILE</code> variable. This ensures the proxy container starts.</p> Allow direct access to dtable-web <p>Edit <code>conf/gunicorn.py</code> and update the bind address:</p> <pre><code>bind = '0.0.0.0:8000'\n</code></pre> Update INNER_DTABLE_SERVER <p>Edit <code>conf/dtable_web_settings.py</code> and set:</p> <pre><code>INNER_DTABLE_SERVER = 'http://dtable-web:5000/'\n</code></pre> Update Ping endpoints <p>Edit <code>/opt/seatable-compose/config/seatable-nginx.conf</code> to update ping endpoints:</p> <pre><code># ping endpoints\nlocation = /dtable-server/ping/ {\n    proxy_pass http://dtable-web:5000/ping/;\n}\nlocation = /dtable-db/ping/ {\n    proxy_pass http://dtable-db:7777/ping/;\n}\n</code></pre> <p>Restart all containers on <code>dtable-web</code> to apply the changes.</p>"},{"location":"installation/cluster/dtable-server-multiple/#updates-on-dtable-db","title":"Updates on dtable-db","text":"<p>Since the routing logic has changed, update <code>dtable-db</code> so it always uses the proxy instead of contacting <code>dtable-server</code> directly.</p> Use dtable-server-proxy on dtable-db <p>Edit <code>conf/dtable-db</code> and set:</p> <pre><code>[dtable cache]\ndtable_server_url = \"http://dtable-web:5000\"\n</code></pre>"},{"location":"installation/cluster/dtable-server-multiple/#unload-all-bases-on-dtable-servers","title":"Unload all bases on dtable-servers","text":"<p>To ensure no bases remain in memory on the dtable-servers, restart both servers. This prevents issues with parallel saving of bases.</p> <p>Unloading is crucial</p> <p>Any time you modify the proxy logic in your nginx configuration, you must restart all dtable-servers. Since <code>dtable-server</code> can keep bases in memory for up to 24 hours, failing to restart may result in data loss or inconsistencies.</p>"},{"location":"installation/cluster/dtable-server-multiple/#verify-your-setup","title":"Verify your setup","text":"<p>Use the following tests to confirm your configuration:</p> Where to execute Test Expected result dtable-web <code>curl http://127.0.0.1:5000/ping/</code> pong dtable-web <code>curl http://127.0.0.1:8000/api2/ping/</code> pong Browser Open a base with <code>base_uuid</code> starting a-z Log entries on <code>dtable-server</code> Browser Open a base with <code>base_uuid</code> starting 0-9 Log entries on <code>dtable-server-2</code> Browser Open a universal app Log entries on <code>dtable-db</code>"},{"location":"installation/cluster/dtable-server-multiple/#final-thoughts","title":"Final thoughts","text":"<p>Congratulations! Your setup now uses two dtable-servers, laying the foundation for even greater scalability. To add additional dtable-servers, repeat these steps:</p> <ul> <li>Set up another dtable-server.</li> <li>Add the new upstream to <code>nginx.conf</code> (dtable-server-proxy).</li> <li>Restart all dtable-servers to clear their memory.</li> </ul>"},{"location":"installation/cluster/dtable-server-standalone/","title":"Installation dtable-server as a standalone node","text":"<p>The next step in building your SeaTable cluster is to move the <code>dtable-server</code> to a separate node.</p> <p></p>"},{"location":"installation/cluster/dtable-server-standalone/#setting-up-a-standalone-dtable-server","title":"Setting up a standalone dtable-server","text":"<p>Prepare a new node with Docker installed, and copy the following files from one of your existing nodes to the new node:</p> <ul> <li><code>/opt/seatable-compose/.env</code></li> <li><code>/opt/seatable-compose/seatable-license.txt</code></li> </ul> <p>Edit the <code>.env</code> file on the new node and ensure the <code>COMPOSE_FILE</code> variable references only a single YAML file:</p> <pre><code>COMPOSE_FILE='seatable-server-standalone.yml'\n</code></pre> <p>Copy <code>seatable-server.yml</code> to <code>seatable-server-standalone.yml</code> and make the following changes to configure it as a standalone <code>dtable-server</code>.</p>"},{"location":"installation/cluster/dtable-server-standalone/#required-changes-to-seatable-server-standaloneyml","title":"Required changes to <code>seatable-server-standalone.yml</code>","text":"<p>Apply the following required changes to this file:</p> Remove all services except seatable-server <p>The standalone node only requires the <code>seatable-server</code> service. Remove all other services (such as redis, mariadb, or caddy).</p> Add additional environment variables <p>Add or update the following environment variables to ensure only the <code>dtable-server</code> is enabled:</p> <pre><code>environment:\n  #... all default environment variables in seatable-server.yml ...\n  # this node should only run dtable-server, all other services are disabled\n  - ENABLE_DTABLE_DB=false\n  - ENABLE_DTABLE_STORAGE_SERVER=true\n  - ENABLE_SEAFILE_SERVER=false\n  - ENABLE_DTABLE_WEB=false\n  - ENABLE_DTABLE_SERVER=true\n  - ENABLE_DTABLE_EVENTS=false\n  - ENABLE_API_GATEWAY=false\n  - SEATABLE_START_MODE=cluster\n</code></pre> Expose port 5000 <p>The <code>dtable-server</code> node must be accessible to other nodes. Add the following to the <code>seatable-server</code> service:</p> <pre><code>ports:\n  - 5000:5000\n</code></pre> Configure internal network communication <p>Node-to-node communication uses the internal network. Ensure all nodes can reach each other by adding their names and private IP addresses:</p> <pre><code>extra_hosts:\n  - \"dtable-web:10.0.0.2\"\n  - \"dtable-db:10.0.0.3\"\n  - \"dtable-server:10.0.0.4\"\n</code></pre>"},{"location":"installation/cluster/dtable-server-standalone/#example-dtable-server-standaloneyml","title":"Example: <code>dtable-server-standalone.yml</code>","text":"<p>For reference, here is an example of what your <code>dtable-server-standalone.yml</code> might look like. Do not copy and paste directly \u2014 adapt to your environment as needed.</p> <pre><code>---\nservices:\n  seatable-server:\n    image: ${SEATABLE_IMAGE:-seatable/seatable-enterprise:x.x.x}\n    restart: unless-stopped\n    container_name: seatable-server\n    volumes:\n      - \"/opt/seatable-server:/shared\"\n      - type: bind\n        source: \"./seatable-license.txt\"\n        target: \"/shared/seatable/seatable-license.txt\"\n        read_only: ${SEATABLE_LICENSE_FORCE_READ_ONLY:-false}\n    environment:\n      ...\n      ...\n      # this node should only run dtable-server\n      - ENABLE_DTABLE_DB=false\n      - ENABLE_DTABLE_STORAGE_SERVER=true\n      - ENABLE_SEAFILE_SERVER=false\n      - ENABLE_DTABLE_WEB=false\n      - ENABLE_DTABLE_SERVER=true\n      - ENABLE_DTABLE_EVENTS=false\n      - ENABLE_API_GATEWAY=false\n      - SEATABLE_START_MODE=cluster\n    ports:\n      - 5000:5000\n    extra_hosts:\n      - \"dtable-web:10.0.0.2\"\n      - \"dtable-db:10.0.0.3\"\n      - \"dtable-server:10.0.0.4\"\n    networks:\n      - frontend-net\nnetworks:\n  frontend-net:\n    name: frontend-net\n</code></pre> <p>Now, start <code>dtable-db</code> for the first time and monitor the logs:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/cluster/dtable-server-standalone/#changes-after-first-start","title":"Changes after first start","text":"<p>After the first start of <code>dtable-server</code>, make the following changes to the newly created configuration files:</p> Add S3 configuration <p>Add the S3 configuration to <code>conf/dtable-storage-server.conf</code>, analogous to your first or second node.</p> Additional configuration changes <p>Open <code>conf/dtable_server_config.json</code> and add these entries:</p> <pre><code>{\n    \"dtable_db_service_url\": \"http://dtable-db:7777\",\n    \"dtable_web_service_url\": \"http://dtable-web:8000\" \n}\n</code></pre> <p>Now it is time to restart dtable-server and verify that the service is running, port 5000 is exposed and a <code>pong</code> is returned:</p> <pre><code>curl 127.0.0.1:5000/ping/\n</code></pre>"},{"location":"installation/cluster/dtable-server-standalone/#configure-dtable-web-to-use-the-standalone-dtable-server","title":"Configure dtable-web to use the standalone dtable-server","text":"<p>Now that <code>dtable-server</code> is running on a separate node, update <code>dtable-web</code> to use this node instead of the internal component.</p> Disable dtable-server in dtable-web <p>Open <code>/opt/seatable-compose/dtable-web.yml</code> and make these changes:</p> <pre><code>environment:\n  - ENABLE_DTABLE_SERVER=false\nextra_hosts:\n  - \"dtable-web:10.0.0.2\"\n  - \"dtable-db:10.0.0.3\"\n  - \"dtable-server:10.0.0.4\"\nports:\n  - \"8000:8000\"\n</code></pre> Update API-Gateway <p>Open the configuration file <code>conf/dtable-api-gateway.conf</code> and add these lines to specify the location of <code>dtable-server</code>:</p> <pre><code>[dtable-server]\nserver_address = \"http://dtable-server:5000\"\n</code></pre> Update <code>dtable_web_settings.py</code> <p>Open <code>/conf/dtable_web_settings.py</code> and add:</p> <pre><code>INNER_DTABLE_SERVER_URL = 'http://dtable-server:5000/'\n</code></pre>"},{"location":"installation/cluster/dtable-server-standalone/#additional-changes-on-dtable-db","title":"Additional changes on dtable-db","text":"<p>Specify the location of <code>dtable-server</code> in <code>dtable-db</code> as well.</p> Update <code>dtable-db.conf</code> <p>Find the relevant section and update the value:</p> <pre><code>[dtable cache]\ndtable_server_url = \"http://dtable-server:5000\"\n</code></pre>"},{"location":"installation/cluster/dtable-server-standalone/#restart-seatable-on-all-three-nodes","title":"Restart SeaTable on all three nodes","text":"<pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/cluster/dtable-server-standalone/#verify-complete-setup","title":"Verify complete setup","text":"<p>Open any base in your web browser and check that logs are being created on the <code>dtable-server</code> node.</p> <p>Congratulations! You are now running a separate <code>dtable-server</code> and have completed the next step in building your SeaTable cluster.</p>"},{"location":"installation/cluster/introduction/","title":"Introduction to the Cluster Setup","text":"<p>SeaTable can be operated both as a single-node installation and in cluster mode. The following section explains when each setup is appropriate and what advantages a cluster setup offers.</p> <p>Don't be confused by the term <code>dtable</code></p> <p>Originally (a long time ago), SeaTable was going to be called <code>dtable</code> (short for database table). Although this term was later replaced with SeaTable, many internal components and log entries still use the old name <code>dtable</code>. Whenever you see <code>dtable</code>, it simply refers to a component of SeaTable.</p>"},{"location":"installation/cluster/introduction/#naming-conventions","title":"Naming conventions","text":"<p>In the following instructions for deploying a SeaTable Cluster, I will use the node names and roles listed below as a naming convention. Please adapt these to fit your specific environment.</p> Node Main service / Name Private IP address node1 dtable-web 10.0.0.2 node2 dtable-db 10.0.0.3 node3 dtable-server 10.0.0.4 node4 dtable-server-2 10.0.0.5"},{"location":"installation/cluster/introduction/#when-is-a-single-node-installation-suitable","title":"When is a single-node installation suitable?","text":"<p>In a single-node installation, all SeaTable components run on a single server. This setup is usually sufficient for small teams and organizations with up to several hundred users and offers good performance.</p> <p>However, as the number of users and the complexity of the bases increase, bottlenecks may arise. In particular, the <code>dtable-server</code> - responsible for rendering the bases, see the architecture of SeaTable for more details - will eventually reach its performance limits. Depending on usage intensity and base size, this can occur with as few as 100 users, or only after surpassing 1.000 users.</p> <p>Typical signs of overload:</p> <ul> <li>Noticeably longer loading times when opening a base.</li> <li>The appearance of so-called kill events in the <code>monitor.log</code>.</li> </ul> What is a Kill Event? <p>SeaTable checks every 30 seconds whether its individual components are reachable. If a component does not respond within 20 seconds, the corresponding service is automatically stopped and restarted. You will see such events in <code>logs/monitor.log</code>, for example:</p> <pre><code>[2025-07-01 11:12:56] [WARNING] Ping error, kill dtable-server\n</code></pre> <p>The component name (e.g., <code>dtable-server</code>, <code>dtable-web</code>, <code>dtable-db</code>) indicates which service was affected.</p> <p>Short-term improvements can often be achieved by allocating additional resources (CPU, RAM). However, in our experience, once you reach about 8 CPUs and 32 GB RAM, further performance gains are negligible. If the <code>dtable-server</code> is overloaded by too many requests, even more resources cannot resolve the bottleneck, and kill events will occur.</p> What limits the dtable-server? <p>The <code>dtable-server</code> is implemented in such a way that loading and saving the JSON files is a blocking process that cannot be parallelized further. This creates a bottleneck that limits scalability on a single server. See the architecture of SeaTable for more details.</p>"},{"location":"installation/cluster/introduction/#when-is-a-cluster-setup-recommended","title":"When is a Cluster Setup Recommended?","text":"<p>Once the single-node setup reaches its performance limits, it is advisable to switch to a cluster setup. A cluster consists of multiple nodes, each running only selected components of the SeaTable server.</p>"},{"location":"installation/cluster/introduction/#key-features-of-a-cluster-setup","title":"Key features of a cluster setup","text":"<ul> <li>All nodes use the same Docker image, but individual components are selectively enabled or disabled.</li> <li>The setup usually starts as a single-node installation. Gradually, individual components are moved to separate nodes.</li> <li>In the maximum expansion stage, each service runs on its own node; multiple <code>dtable-servers</code> and multiple <code>dtable-web</code> can run in parallel.</li> </ul>"},{"location":"installation/cluster/introduction/#advantages-of-a-cluster-setup","title":"Advantages of a cluster setup","text":"<ul> <li>Significantly more resources available: Overall performance can be increased almost indefinitely by adding more nodes.</li> <li>Targeted allocation of CPU and RAM: Resources can be assigned to individual components as needed.</li> <li>Higher performance: Parallel operation of multiple dtable-servers allows many more users to be served simultaneously.</li> <li>Improved fault tolerance: If one node fails, other nodes can take over its tasks for highly available components like <code>dtable-web</code>. For components like <code>dtable-server</code>, only a portion of users may be affected if multiple instances are running.</li> </ul> <p>Don't underestimate the challenges to manage a cluster</p> <p>While a cluster setup offers greater performance and availability, it also requires a solid understanding of distributed systems and experience in debugging. Operation is significantly more complex than with a single-node system. The following chapters will help you understand the requirements and setup of a SeaTable cluster.</p> <p>Continue reading about the requirements and setup of a cluster in the next article.</p>"},{"location":"installation/cluster/requirements/","title":"Requirements","text":"<p>The requirements for running a SeaTable cluster build upon those for a single-node setup. In addition to the standard prerequisites, the following requirements must be met to successfully deploy a cluster:</p> <ul> <li>At least 4 nodes (physical or virtual) each with a minimum of 2 CPUs and 4 GB RAM.</li> <li>All nodes are connected via a private network.</li> <li>One node (running dtable-web) must be publically available via port 80 and 443.</li> <li>S3-compatible object storage is required for storing files and attachments. (Alternative storage technologies may be possible but are not covered in detail here.)</li> <li>Centralized MariaDB and Redis services: These must be accessible to all nodes in the private network. You can either use managed services or operate your own MariaDB and Redis instances.</li> <li>If you plan to use the Office Editor or the Python Pipeline, these services must also be provided as separate services within the private network.</li> </ul> <p>Network communication is often the main challenge</p> <p>In our experience, configuring communication between nodes and the overall network setup is the trickiest part of a cluster deployment. All nodes must be able to communicate with each other over a reliable, low-latency network connection. The performance of services such as MariaDB, Redis, and object storage is critical for stable cluster operation.</p> <p>If you can fulfill these requirements, you are ready to proceed with the deployment of a SeaTable cluster.</p>"},{"location":"installation/cluster/requirements/#hardware-recommendations-for-1000-users","title":"Hardware recommendations for 1.000+ users","text":"<p>Organizations frequently ask about the hardware resources needed to support more than 1,000 users. The following setup is recommended for companies or teams with 1,000 users, assuming average usage patterns, including some heavy users, API usage, Python scripting, and automations.</p> <p>This configuration is designed to handle typical workloads, but you should consider scaling resources further if you expect very large bases, intensive scripting, or high-frequency API calls, as these can significantly increase memory and CPU requirements.</p> Server component CPUs RAM (in GB) Local storage (in GB) dtable-web 4 16 100 dtable-db 4 16 100 dtable-server 4 8 50 dtable-server-2 4 8 50 dtable-server-3 4 8 50 mariadb (self-hosted) 4 16 100 python pipeline 2 4 50"},{"location":"installation/components/clamav/","title":"Deploy ClamAV with SeaTable","text":"<p>5.2 Enterprise Edition</p> <p>SeaTable supports antivirus scanning using ClamAV. It automatically scans newly uploaded or updated assets (such as images and files) for viruses.</p>"},{"location":"installation/components/clamav/#installation","title":"Installation","text":""},{"location":"installation/components/clamav/#update-the-env-file","title":"Update the .env File","text":"<p>To install ClamAV, add <code>clamav.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file. This tells Docker to download and configure the required ClamAV image.</p> <p>Simply copy and paste () the following code into your command line to update your <code>.env</code> file:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,clamav.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/clamav/#configure-dtable-eventsconf","title":"Configure <code>dtable-events.conf</code>","text":"<p>Add the following configuration to the <code>dtable-events.conf</code> file to enable virus scanning:</p> <pre><code>[VIRUS SCAN]\nenabled = true\nscan_command = clamdscan\nscan_interval = 60\nvirus_code = 1\nnonvirus_code = 0\n</code></pre>"},{"location":"installation/components/clamav/#start-clamav","title":"Start ClamAV","text":"<p>Start ClamAV for the first time by running:</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre> <p>Once started, you should see an entry like this in your <code>dtable-events.log</code>:</p> <pre><code>[INFO] virus_scanner.py[line:21] Start virus scanner, interval = 3600 sec\n</code></pre> <p>ClamAV will now continuously scan images and files attached to your bases for viruses.</p>"},{"location":"installation/components/clamav/#usage","title":"Usage","text":"<p>After enabling ClamAV, a new section will appear in the admin area where you can view detected viruses. For each finding, you\u2019ll see:</p> <ul> <li>The base where the infected file is located.</li> <li>The file name.</li> <li>The current status of the detection.</li> </ul> <p>You can choose to either ignore the finding or delete the infected asset.</p> <p></p>"},{"location":"installation/components/clamav/#advanced-topics","title":"Advanced Topics","text":""},{"location":"installation/components/clamav/#additional-configuration-options","title":"Additional Configuration Options","text":"<p>ClamAV offers advanced configuration options in dtable-events.conf, such as:</p> <ul> <li>Scan interval: Adjust how often scans are performed.</li> <li>File size limit: Set a maximum size for scanned files.</li> <li>Ignored file extensions: Specify file types to exclude from scanning.</li> <li>Thread count: Define how many threads are used for scanning.</li> </ul> <p>For more details, refer to the dtable-events configuration documentation.</p>"},{"location":"installation/components/clamav/#updating-virus-signature-files","title":"Updating Virus Signature Files","text":"<p>The ClamAV Docker container uses Freshclam to update its virus signature database automatically every three hours. While this keeps ClamAV up-to-date, its detection capabilities may not be as robust as those of other paid antivirus solutions.</p>"},{"location":"installation/components/clamav/#e-mail-notification","title":"E-Mail notification","text":"<p>Email notifications for virus detection will be available in a future update.</p>"},{"location":"installation/components/collabora/","title":"Collabora Online","text":"<p>4.3 Enterprise Edition</p> <p>Collabora Online offers real-time collaboration with office documents in your browser. As soon as you open a file from SeaTable, Collabora opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the SeaTable base.</p> <p>This article is about the how to install the CODE version of collabora online.</p> <p>You have to decide: Collabora OR OnlyOffice</p> <p>Collabora and OnlyOffice are both office editors. You have to decide which one you would like to use. You can not use both in parallel.</p> <p>Use a separate host, if you expect many users</p> <p>Collabora Online (CODE) can be installed on the same host as SeaTable Enterprise Edition. If Collabora Online is used regularly and by many users, the host should be fitted with sufficient cores and RAM or you should install Collabora on a separate host.</p> <p>This manual assumes that SeaTable Enterprise Edition is installed and is running.</p>"},{"location":"installation/components/collabora/#installation","title":"Installation","text":""},{"location":"installation/components/collabora/#1-change-the-env-file","title":"1. Change the .env file","text":"<p>To install OnlyOffice, include <code>collabora.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images for OnlyOffice.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,collabora.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/collabora/#modify-dtable_web_setingspy","title":"Modify dtable_web_setings.py","text":"<p>Now execute the follwogin command to add the required configuration to <code>dtable_web_settings.py</code>. You don't have to replace <code>${SEATABLE_SERVER_HOSTNAME}</code>. It will replaced automatically.</p> <pre><code>source /opt/seatable-compose/.env\necho -e \"\\n# collabora online\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ENABLE_COLLABORA = True\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"COLLABORA_DISCOVERY_URL = 'https://${SEATABLE_SERVER_HOSTNAME}:6232/hosting/discovery'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\n</code></pre>"},{"location":"installation/components/collabora/#download-collabora-and-restart","title":"Download collabora and restart","text":"<p>One more step is necessary to download the Collabora container and restart the SeaTable service.</p> <pre><code>cd /opt/seatable-compose\ndocker compose down\ndocker compose up -d\n</code></pre>"},{"location":"installation/components/collabora/#check-if-installation-is-complete","title":"Check if installation is complete","text":"<p>Wait for some seconds and then open <code>https://&lt;your-seatable-url&gt;:6232</code> and you should see simple an OK. This confirms that Collabora Online is up and running. Office documents that you double click in your base should be opened with Collabora Online in a new browser tab.</p>"},{"location":"installation/components/collabora/#advanced-custom-settings","title":"Advanced: Custom settings","text":""},{"location":"installation/components/collabora/#admin-interface","title":"Admin interface","text":"<p>Collabora Online provides an admin interface, which is disabled by default. Add the following parameters to your <code>.env</code> file to activate it and adapt it to your needs.</p> <pre><code>COLLABORA_ADMIN=username\nCOLLABORA_PW=password\nCOLLABORA_ENABLE_ADMIN_CONSOLE=true\n</code></pre> <p>After restarting the Collabora container you can access the admin interface at <code>https://&lt;your-seatable-url&gt;:6232/browser/dist/admin/admin.html</code>.</p>"},{"location":"installation/components/collabora/#activate-file-logging","title":"Activate File Logging","text":"<p>To activate File logging of Collabora Online you have to add the following parameter to your <code>.env</code> file:</p> <pre><code>COLLABORA_ENABLE_FILE_LOGGING=true\n</code></pre> <p>After a restart of the container the logs are written to <code>/opt/cool/logs/coolwsd.log</code>. To access this log file at the host system you have to create a folder and change the permission to 777.</p> <pre><code>mkdir /opt/collabora\nchmod 777 /opt/collabora\n</code></pre> <p>Now make a copy of the collabora.yml and uncomment the volumes definition in your <code>custom-collabora.yml</code>.</p>"},{"location":"installation/components/collabora/#advanced-collabora-on-a-separate-host-and-url","title":"Advanced: Collabora on a separate host and URL","text":""},{"location":"installation/components/collabora/#install-collabora","title":"Install Collabora","text":"<p>Use the predefined yml files to install Collabora on a separate host. Your <code>.env</code> might look like</p> <pre><code>COMPOSE_FILE='caddy.yml,collabora.yml'\nCOMPOSE_PATH_SEPARATOR=','\n\nSEATABLE_SERVER_HOSTNAME=&lt;your-collabora-url&gt;\nCOLLABORA_PORT=443\n</code></pre> <p>Have a look at collabora.yml and uncommend and update the value of <code>aliasgroup1</code>.</p>"},{"location":"installation/components/collabora/#configuration-of-seatable-server","title":"Configuration of SeaTable server","text":"<p>Now update the <code>dtable_web_settings.py</code> on your SeaTable Server.</p> <p>In addition you have to extend the caddy security headers. Add the URL of your Collabora host to the variables <code>form-action</code> and <code>frame-src</code> in your <code>custom-seatable-server.yml</code>. Don't forget to restart all containers.</p>"},{"location":"installation/components/gatus/","title":"Gatus","text":"<p>Gatus provides your users with a real-time status page for your SeaTable Server and alerts you if any core components become unreachable. By default Gatus monitors the following components:</p> <ul> <li>SeaTable Login Page</li> <li>SeaTable API Gateway</li> <li>MariaDB</li> <li>Redis</li> <li>Certificate Expiration</li> <li>Python Pipeline</li> </ul>"},{"location":"installation/components/gatus/#installation","title":"Installation","text":"<p>This guide explains how to install Gatus on your SeaTable server.</p>"},{"location":"installation/components/gatus/#change-the-env-file","title":"Change the .env file","text":"<p>As with other additional components, first add <code>gatus.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file.</p> <p>Copy and paste () the following command into your terminal: </p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,gatus.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/gatus/#start-gatus","title":"Start Gatus","text":"<p>To start Gatus for the first time, run:</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation/components/gatus/#verify-the-setup","title":"Verify the setup","text":"<p>Open <code>https://&lt;your-seatable-server-hostname&gt;/status</code> or <code>https://&lt;your-seatable-server-hostname&gt;:6220</code> in your browser to check if your new status page is accessible. This page will monitor your main components in real time. To reach this page, you must open/expose the port 6220 in your firewall.</p>"},{"location":"installation/components/gatus/#e-mail-notifications","title":"E-Mail notifications","text":"<p>Email notifications are preconfigured. You only need to provide the following environment variables in your <code>.env</code> file:</p> <pre><code>GATUS_EMAIL_USERNAME=\nGATUS_EMAIL_PASSWORD=\nGATUS_EMAIL_HOST=\nGATUS_EMAIL_PORT=\nGATUS_EMAIL_FROM=\nGATUS_EMAIL_TO=\n</code></pre> <p>Each variable is self-explanatory.</p>"},{"location":"installation/components/gatus/#additional-notifications-and-advanced-configuration","title":"Additional Notifications and Advanced Configuration","text":"<p>Gatus uses two configuration files: <code>/opt/seatable-compose/gatus.yml</code> and <code>/opt/seatable-compose/config/gatus-config.yml</code>. </p> <p>To ensure your changes persist after updates, create copies of these files (e.g., custom-....yml) and update the references accordingly.</p> <p>For all available configuration options, see the Gatus GitHub repository.</p>"},{"location":"installation/components/n8n/","title":"Automation platform n8n","text":"<p>SeaTable empowers users and teams to store, manage, and visualize structured data efficiently, offering multiple data input options from manual entry to web forms and a comprehensive API. This flexibility ensures seamless data collection while allowing users to define automated workflows with triggers and actions.</p> <p>However, for those seeking additional software solutions or more sophisticated automation workflows, n8n provides the perfect complement. By integrating SeaTable with n8n, users can unlock even more powerful automation capabilities.</p> <p>n8n serves as an automation platform, enabling seamless connectivity between SeaTable and hundreds of other software products. Need to collect data from multistep web forms using JotForm, Typeform, or Form.io? No problem. Simply create your web forms and utilize n8n to seamlessly transfer survey results to SeaTable.</p> <p>Give n8n a try, and we guarantee you'll fall in love with it just like we have! </p> <p>Want to watch a step-by-step video instead of reading a manual?</p> <p>Watch a brief English video demonstrating all the essential steps:</p> <p> Easy n8n Installation on SeaTable  10m</p>"},{"location":"installation/components/n8n/#installation","title":"Installation","text":"<p>This article shows you how to install n8n (Community Edition) on your SeaTable server.</p>"},{"location":"installation/components/n8n/#change-the-env-file","title":"Change the .env file","text":"<p>Like with all additional components you first have to add the <code>n8n.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,n8n.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/n8n/#generate-secrets-for-your-postgres-database","title":"Generate secrets for your postgres database","text":"<p>Now let's create inital secrets and write them into the .env file.</p> <pre><code>echo -e \"\\n# n8n\" &gt;&gt; /opt/seatable-compose/.env\necho \"N8N_ENCRYPTION_KEY=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\necho \"POSTGRES_PASSWORD=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\necho \"POSTGRES_NON_ROOT_PASSWORD=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/n8n/#start-n8n","title":"Start n8n","text":"<p>Now it is time to start n8n for the first time.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre> <p>Congratulations! Your n8n server is ready to use.</p>"},{"location":"installation/components/n8n/#initial-setup","title":"Initial setup","text":""},{"location":"installation/components/n8n/#create-initial-admin-user","title":"Create initial admin user","text":"<p>To set up your initial admin user, n8n offers a convenient Web UI accessible at <code>https://&lt;your-seatable-server-hostname&gt;:6231</code>.</p> <p></p> <p>Please note that the Community Edition of n8n only permits the creation of multiple accounts with just one admin account. Further details regarding the features of this version will be elaborated later in this article.</p>"},{"location":"installation/components/n8n/#limitations-of-the-community-edition-of-n8n","title":"Limitations of the Community Edition of n8n","text":"<p>The installed n8n version on this server is the self-hosted free Community Edition, which aligns with the Starter Cloud version.</p> <p>It offers:</p> <ul> <li>Unlimited executions</li> <li>Unlimited active workflows</li> <li>No execution time limit</li> <li>Support for all existing nodes</li> </ul> <p>However, there are some limitations to be aware of:</p> <ul> <li>Only one admin account is allowed</li> <li>Variables are not supported (consider using SeaTable instead)</li> <li>External Secrets and Environments are not supported</li> <li>Single Sign-On (SSO) and LDAP is not supported</li> <li>Log Streaming is not supported</li> </ul> <p>For further information, visit the n8n forum.</p> <p>If you find n8n useful (which you most likely will), consider purchasing an Enterprise license.</p>"},{"location":"installation/components/n8n/#next-steps","title":"Next steps","text":"<p>Create your first workflow in n8n, add your first node and search for <code>SeaTable</code>. Currently SeaTable supports three triggers and 16 actions. Alternatively check the docs of n8n at https://docs.n8n.io/ for more details or do their text courses to get a better understanding of n8n.</p>"},{"location":"installation/components/onlyoffice/","title":"Deploy ONLYOFFICE Documentserver","text":"<p>3.0 Enterprise Edition</p> <p>OnlyOffice offers real-time collaboration with office documents in your browser. As soon as you open a file from SeaTable, OnlyOffice opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the SeaTable base.</p> <p>Access takes place via the public URL via HTTPS. So that OnlyOffice cannot be used by other systems, a shared secret in the form of a JWT key is used.</p> <p>You have to decide: Collabora OR OnlyOffice</p> <p>Collabora and OnlyOffice are both office editors. You have to decide which one you would like to use. You can not use both in parallel.</p> <p>Use a separate host, if you expect many users</p> <p>OnlyOffice can be installed on the same host as SeaTable Enterprise Edition. If OnlyOffice is used regularly and by many users, the host should be fitted with sufficient cores and RAM or you should move OnlyOffice to a separate host.</p> <p>This article assumes that SeaTable Enterprise Edition is installed and is running.</p>"},{"location":"installation/components/onlyoffice/#installation","title":"Installation","text":""},{"location":"installation/components/onlyoffice/#change-the-env-file","title":"Change the .env file","text":"<p>To install OnlyOffice, include <code>onlyoffice.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images for OnlyOffice.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,onlyoffice.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/onlyoffice/#generate-jwt-token-shared-secret","title":"Generate JWT-Token (shared secret)","text":"<p>Secure communication between SeaTable and OnlyOffice is granted by a shared secret.</p> <p>Copy and paste the following commands to generate the shared secret and write it at the end of the <code>.env</code> file:</p> <pre><code>echo -e \"\\n# OnlyOffice\" &gt;&gt; /opt/seatable-compose/.env\necho \"ONLYOFFICE_JWT_SECRET=$(pwgen -s 40 1)\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/onlyoffice/#modify-dtable_web_setingspy","title":"Modify dtable_web_setings.py","text":"<p>Now execute the follwogin command to add the required configuration to <code>dtable_web_settings.py</code>.</p> <pre><code>source /opt/seatable-compose/.env\necho -e \"\\n# onlyoffice\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ENABLE_ONLYOFFICE = True\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ONLYOFFICE_APIJS_URL = 'https://${SEATABLE_SERVER_HOSTNAME}:6233/web-apps/apps/api/documents/api.js'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ONLYOFFICE_FILE_EXTENSION = ('doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'odt', 'fodt', 'odp', 'fodp', 'ods', 'fods', 'csv', 'ppsx', 'pps')\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\necho \"ONLYOFFICE_JWT_SECRET = '${ONLYOFFICE_JWT_SECRET}'\" &gt;&gt; /opt/seatable-server/seatable/conf/dtable_web_settings.py\n</code></pre> <p>Don't replace variables</p> <p>You don't need to manually replace the variables <code>${SEATABLE_SERVER_HOSTNAME}</code> and <code>${ONLYOFFICE_JWT_SECRET}</code>. They will be automatically replaced as we have sourced the <code>.env</code> file.</p>"},{"location":"installation/components/onlyoffice/#download-onlyoffice-and-restart","title":"Download onlyoffice and restart","text":"<p>One more step is necessary to download the OnlyOffice container and restart the SeaTable service.</p> <pre><code>cd /opt/seatable-compose\ndocker compose down\ndocker compose up -d\n</code></pre> <p>OnlyOffice takes some some minutes for the initial start. If you get an error message when clicking an office file in SeaTable, be patient and try again after one minute. Onlyoffice is ready, if a new browser window opens with your office document. Any user with access to this base can now open this document with OnlyOffice.</p>"},{"location":"installation/components/onlyoffice/#check-if-installation-is-complete","title":"Check if installation is complete","text":"<p>Try to open <code>https://SEATABLE_SERVER_HOSTNAME:6233/welcome</code>. You should see a welcome page like this.</p> <p></p> <p>If this does not happen, execute <code>docker compose logs onlyoffice -f</code> to get more details about the startup of OnlyOffice.</p>"},{"location":"installation/components/onlyoffice/#advanced-custom-settings","title":"Advanced: Custom settings","text":"<p>The following configuration options are only for OnlyOffice experts. You can create and mount a custom configuration file called <code>local-production-linux.json</code> to force some settings.</p> <p>Create a configuration file in the newly created directory:</p> <pre><code>cd /opt/onlyoffice\nnano local-production-linux.json\n</code></pre> <p>Copy the following code block in this file:</p> <pre><code>{\n  \"services\": {\n    \"CoAuthoring\": {\n      \"autoAssembly\": {\n        \"enable\": true,\n        \"interval\": \"5m\"\n      }\n    }\n  },\n  \"FileConverter\": {\n    \"converter\": {\n      \"downloadAttemptMaxCount\": 3\n    }\n  }\n}\n</code></pre> <p>Mount this config file into your onlyoffice block in your <code>docker-compose.yml</code>.</p> <pre><code>  volumes:\n      - /opt/onlyoffice/logs:/var/log/onlyoffice\n      - /opt/onlyoffice/data:/var/www/onlyoffice/Data\n      - /opt/onlyoffice/lib:/var/lib/onlyoffice\n      - /opt/oods/DocumentServer/local-production-linux.json:/etc/onlyoffice/documentserver/local-production-linux.json\n</code></pre> <p>Restart OnlyOffice to load the new configuration.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/components/onlyoffice/#advanced-onlyoffice-on-a-separate-host-and-url","title":"Advanced: OnlyOffice on a separate host and URL","text":"<p>It is not that difficult to install OnlyOffice on a separate host to free the ressources of the main server. This manual assumes that onlyoffice will be accessable by a separate public availabe URL.</p>"},{"location":"installation/components/onlyoffice/#install-onlyoffice","title":"Install OnlyOffice","text":"<p>Start with the installation of docker and docker compose like it is described in the installation manual of SeaTable Server.</p> <p>This is how your .env file should look like:</p> <pre><code>COMPOSE_FILE='caddy.yml,onlyoffice.yml'\nCOMPOSE_PATH_SEPARATOR=','\n\n# onlyoffice url\nSEATABLE_SERVER_HOSTNAME=&lt;onlyoffice-url&gt;\nONLYOFFICE_PORT=443\n\nONLYOFFICE_JWT_ENABLED=true\nONLYOFFICE_JWT_SECRET=&lt;any shared secret&gt;\n</code></pre> <p>Now execute <code>docker-compose up -d</code> and on this server only caddy and OnlyOffice will be installed. Verify that OnlyOffice is reachable by opening your browser and open <code>https://&lt;onlyoffice-url&gt;/welcome/</code>.</p>"},{"location":"installation/components/onlyoffice/#configure-seatable-to-use-this-new-onlyoffice-host","title":"Configure SeaTable to use this new OnlyOffice host.","text":"<p>The next step is to tell SeaTable where it can access OnlyOffice. Update the settings in <code>dtable_web_settings.py</code> accordingly. Make sure to use the excact same shared secret and use the public available URL of the OnlyOffice server.</p> <p>In addition you have to extend the caddy security headers. Add the URL of your Onlyoffice host to the variables <code>script-src-elem</code> and <code>frame-src</code> in your <code>custom-seatable-server.yml</code>. Don't forget to restart all containers.</p>"},{"location":"installation/components/onlyoffice/#use-certificate-store","title":"Use Certificate store","text":"<p>If you are working with self signed or low trust certificates, there is an easy way to put your certificates to the onlyoffice container truststore. You can just mount your certificate to the onlyoffice container. </p> <pre><code>services:\n  onlyoffice:\n    ...\n    volumes:\n      ...\n      # mount certificates to onlyoffice container\n      - ./ca-certificates.crt:/var/www/onlyoffice/Data/certs/tls.crt:ro\n</code></pre>"},{"location":"installation/components/python-pipeline/","title":"Python Pipeline","text":"<p>To run Python scripts directly within SeaTable, you need to install the Python Pipeline \u2014 an environment utilizing Docker containers for script execution and result retrieval. Thanks to SeaTable's Python API, querying and manipulating data in a SeaTable base is super easy.</p> <p>Explore various use cases from other SeaTable users:</p> <ul> <li>Retrieve current stock prices and store them in SeaTable.</li> <li>Validate DNS settings of specified domains for specific TXT entries.</li> <li>Capture submissions from Jotform or tally and store the results.</li> <li>Identify duplicate entries and apply specific tags.</li> </ul> <p>Find additional Python functions and code examples in the SeaTable Developer Manual.</p> <p></p>"},{"location":"installation/components/python-pipeline/#installation","title":"Installation","text":"<p>This how-to explains the deployment of the Python Pipeline next to your SeaTable Server instance.</p>"},{"location":"installation/components/python-pipeline/#amend-the-env-file","title":"Amend the .env file","text":"<p>To install the Python Pipeline, append <code>python-pipeline.yml</code> to the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images for the Python Pipeline.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,python-pipeline.yml'/\" /opt/seatable-compose/.env\n</code></pre> <p>Avoid space in <code>COMPOSE_FILE</code></p> <p>When manually adding <code>python-pipeline.yml</code> to the <code>COMPOSE_FILE</code> variable using your preferred text editor, make sure that you do not enter a space (). After the modification, your <code>COMPOSE_FILE</code> variable should look like this:</p> <pre><code>COMPOSE_FILE='caddy.yml,seatable-server.yml,python-pipeline.yml'\n</code></pre>"},{"location":"installation/components/python-pipeline/#generate-a-shared-secret-for-secure-communication","title":"Generate a shared secret for secure communication","text":"<p>For secure communication between SeaTable and the Python Pipeline, a shared secret is required to prevent unauthorized access or usage. We recommend utilizing <code>pwgen</code> to generate a robust and secure password. Copy and paste the following command into your command line to generate a password:</p> <pre><code>pw=$(pwgen -s 40 1) &amp;&amp; echo \"Generated shared secret: ${pw}\"\n</code></pre> <p>The generated shared secret needs to be added to your <code>.env</code> file. Copy and paste the following command:</p> <pre><code>echo -e \"\\n# python-pipeline\" &gt;&gt; /opt/seatable-compose/.env\necho \"PYTHON_SCHEDULER_AUTH_TOKEN=${pw}\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/python-pipeline/#start-the-python-pipeline","title":"Start the Python Pipeline","text":"<p>Now it is time to start the Python Pipeline.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker stop seatable-server &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation/components/python-pipeline/#check-the-functionality-python-pipeline","title":"Check the functionality Python Pipeline","text":"<p>Do you want to execute your first Python script in SeaTable? Nothing easier than that.</p> <ul> <li>Login to your SeaTable Server.</li> <li>Create a new base and open it.</li> <li>Add a Python script with the content <code>print(\"Hello World\")</code> and execute it. If you don't know how to do this, check out our user manual.</li> </ul> <p>If everything went well, you should see the output <code>Hello World</code>.</p> <p></p> <p> Great! Your SeaTable Server instance can now run Python scripts.</p>"},{"location":"installation/components/releem/","title":"Releem","text":"<p>Releem is a MySQL performance monitoring and tuning tool designed to optimize your MariaDB database. It operates alongside your database, collecting performance data and providing recommended configuration improvements. While Releem offers automated insights, experienced database professionals may prefer manual tuning for deeper control.</p> <p></p>"},{"location":"installation/components/releem/#register-for-a-releem-account","title":"Register for a releem account","text":"<ul> <li>Visit the Releem website and sign up for a new account.</li> <li>After registration, obtain your RELEEM_API_KEY.</li> </ul>"},{"location":"installation/components/releem/#create-a-dedicated-database-user","title":"Create a dedicated database user","text":"<p>Releem requires its own user in your MariaDB instance. Log in to your MariaDB server and execute the following commands, replacing <code>[RELEEM_DB_USER_PASSWORD]</code> with a secure password:</p> <pre><code>CREATE USER 'releem'@'%' identified by '[RELEEM_DB_USER_PASSWORD]';\nGRANT PROCESS, REPLICATION CLIENT, SHOW VIEW ON *.* TO 'releem'@'%';\nGRANT SELECT ON performance_schema.events_statements_summary_by_digest TO 'releem'@'%';\nGRANT SELECT ON performance_schema.table_io_waits_summary_by_index_usage TO 'releem'@'%';\n</code></pre>"},{"location":"installation/components/releem/#configure-releem-in-your-environment","title":"Configure Releem in your environment","text":"<p>Add <code>releem.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file and set the following environment variables:</p> <ul> <li>RELEEM_HOSTNAME: A unique identifier for your server (useful if monitoring multiple systems).</li> <li>RELEEM_DB_USER_PASSWORD: The password you set above.</li> <li>RELEEM_API_KEY: Your API key from Releem.</li> </ul>"},{"location":"installation/components/releem/#data-collection-and-optimization","title":"Data collection and optimization","text":"<p>After starting the Releem agent, it will begin collecting performance metrics from your MariaDB database. Within 24 hours, Releem will provide optimized configuration recommendations based on your database workload.</p>"},{"location":"installation/components/releem/#apply-optimized-mariadb-settings","title":"Apply optimized MariaDB settings","text":"<ol> <li> <p>Create a Custom Configuration File </p> <p>Create a file named <code>99-mariadb-custom.cnf</code> with your optimized settings that Releem recommended to you. </p> <p>This is just an example:</p> <pre><code>[mariadb]\nquery_cache_limit       = 1M\nquery_cache_size        = 128M\nexpire_logs_days        = 10\ninnodb_buffer_pool_size = 1946157056\n</code></pre> </li> <li> <p>Mount the Configuration File in Your Docker Compose Setup </p> <p>Add the following volume to your <code>docker-compose.yml</code> for the MariaDB service:</p> <pre><code>---\nservices:\nmariadb:\n    ...\n    volumes:\n    - \"/opt/mariadb:/var/lib/mysql\"\n    - \"./99-mariadb-custom.cnf:/etc/mysql/conf.d/99-mariadb-custom.cnf\"\n</code></pre> </li> <li> <p>Restart MariaDB </p> <p>Restart your MariaDB container to apply the new settings.</p> <p>After the restart, your database will use the new configuration. Releem will continue to monitor and suggest further optimizations as needed.</p> </li> </ol>"},{"location":"installation/components/restic/","title":"Restic Backup","text":"<p>Running your own server always requires a reliable backup to secure your data. With this backup container, obtaining a daily backup is easy. We chose the backup software Restic for its numerous advantages:</p> <ul> <li>Target: Restic supports multiple backup targets, including S3, Backblaze, BorgBase, Dropbox, and Google Drive.</li> <li>Speed: Backup your data at lightning speed.</li> <li>Encryption: Your data is securely encrypted. Without the encryption key, it remains inaccessible.</li> <li>Deduplication: Duplicate files or file fragments are saved only once, reducing the amount of data transmitted.</li> <li>Snapshots: Forget about regular full backups; only the changes since the last backup need to be saved.</li> <li>Reliability: With 24k stars on GitHub and nearly a decade of development, restic is exceptionally robust.</li> </ul> <p></p>"},{"location":"installation/components/restic/#installation","title":"Installation","text":"<p>This article explains how to implement a restic backup for your SeaTable server.</p>"},{"location":"installation/components/restic/#change-the-env-file","title":"Change the .env file","text":"<p>To install the restic backup container, include <code>restic.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,restic.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/restic/#configure-your-backup","title":"Configure your backup","text":"<p>Every backup is encrypted with a password. Please make sure that you store this password at a save place, otherwise your backup will be worthless if you might need it.</p> <pre><code>pw=$(pwgen -s 40 1) &amp;&amp; echo \"Generated restic password: ${pw}\"\n</code></pre> <p>The generated restic password needs to be added to your <code>.env</code> file. Copy and paste the following command:</p> <pre><code>echo -e \"\\n# restic-backup\" &gt;&gt; /opt/seatable-compose/.env\necho \"RESTIC_PASSWORD=${pw}\" &gt;&gt; /opt/seatable-compose/.env\n</code></pre> <p>Local Backups are better then no backups</p> <p>This configuration will create daily snapshots including database dumps at your host system at <code>/opt/restic/local</code>. This is a good start, but of cause we recommend that you store your backup remotely.</p> Secure offsite backup with BorgBase <p>For small SeaTable servers, we could recommend the service BorgBase. They offer up to 10GB of Backup storage for free and the setup can be done in one minute.</p> <ol> <li>Register at https://borgbase.com.</li> <li>Create a new repo, choose any name and set the Repo Format: Restic.</li> <li>Save the provided repository url and use it as <code>RESTIC_REPOSITORY</code>.</li> </ol> <p></p> <p>This is all that is necessary to create a secure offsite backup.</p>"},{"location":"installation/components/restic/#other-backup-targets","title":"Other backup targets","text":"<p>To use another backup target then the local path <code>/opt/restic/local</code> you have to provide the additional environment variable <code>RESTIC_REPOSITORY</code>. Some backends require additional environment variables for authentication.</p> <p>Here are some examples. For more details, refer to the official restic documentation.</p> REST ServerAmazon S3Backblaze B2rclone <pre><code>RESTIC_REPOSITORY='rest:https://user:pass@host/'\n</code></pre> <pre><code>RESTIC_REPOSITORY='s3:s3.amazonaws.com/bucket_name'\nAWS_ACCESS_KEY_ID='...'\nAWS_SECRET_ACCESS_KEY='...'\n</code></pre> <pre><code>RESTIC_REPOSITORY='s3:s3.amazonaws.com/bucket_name'\nB2_ACCOUNT_ID='...'\nB2_ACCOUNT_KEY='...'\n</code></pre> <p>rclone is already installed in the backup container and expects the configuration file at <code>/root/.config/rclone/rclone.conf</code>. Generate your rclone.conf at the host and mount it to the container at this location. Then you can use restic with rclone as described in the manual.</p> <pre><code>volumes:\n    ...\n    - /opt/restic/rclone.conf:/root/.config/rclone/rclone.conf:ro\n</code></pre> <pre><code>RESTIC_REPOSITORY='rclone:xxx:yyy'\n</code></pre>"},{"location":"installation/components/restic/#start-the-backup","title":"Start the backup","text":"<p>Now it is time to load the container and start the backup for the first time.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre> <p>Afterwards check the logs for more details.</p> <pre><code>docker logs restic-backup\n</code></pre> <p>The output might look like this:</p> <pre><code>[2024-05-17 16:16] Starting the restic backup container ...\n[2024-05-17 16:16] Restic repository '/local' does not exists.\n  Running restic init.\n  created restic repository 7982e3a700 at /local\n\nPlease note that knowledge of your password is required to access the repository\nLosing your password means that your data is irrecoverably lost.\n[2024-05-17 16:16] Setup backup cron job with cron expr. BACKUP_CRON: 20 2 * * *\n[2024-05-17 16:16] Setup check cron job with cron expr. CHECK_CRON: 40 3 * * 6\n[2024-05-17 16:16] Container started successful.\n  The restic repository is initialized, cron daemon runs...\n  Ready for backup!\n</code></pre> <p> Perfect! Your backup was initialized and will run every day at 2.20am.</p> <p>More information about the usage of the restic backup container can be found at the github repository  restic-backup-docker.</p>"},{"location":"installation/components/seadoc/","title":"Report Design (seadoc)","text":"<p>5.3 Enterprise Edition</p> <p>SeaDoc is a Docker container required for the new SeaTable Report Design plugin. With this plugin, you can easily create multi-page technical reports, summaries, and other documents.</p> <p>Currently in Beta</p> <p>The Report Design plugin is currently in beta. We welcome your feedback. The official release is planned for version 6.0.</p>"},{"location":"installation/components/seadoc/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>SeaTable Enterprise Edition installed and running</li> <li>Firewall configured to allow traffic on port 6240</li> <li>System admin to install both the report design plugin and this seadoc editor (server component)</li> </ol>"},{"location":"installation/components/seadoc/#seadoc-installation","title":"SeaDoc Installation","text":"<p>Follow these steps to deploy the seadoc editor on the same node as the seatable-server:</p>"},{"location":"installation/components/seadoc/#update-env-file","title":"Update .env file","text":"<p>Like with all additional components you need to add <code>seadoc.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,seadoc.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/seadoc/#launch-the-seadoc-editor","title":"Launch the seadoc editor","text":"<p>Simply run the following commands to (re-)start SeaTable and seadoc container.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation/components/seadoc/#verify-installation","title":"Verify Installation","text":"<p>After a few seconds, check <code>https://&lt;your-seatable-url&gt;:6240</code>. You should see:</p> <pre><code>Welcome to sdoc-server. The current version is ...\n</code></pre> <p>This confirms that the <code>seadoc</code> container is operational. If you don't see this message, check that port 6240 is allowed and the container logs.</p>"},{"location":"installation/components/seadoc/#final-steps","title":"Final Steps","text":"<p>With the server-side installation finished, you can now install the report design plugin from the SeaTable admin interface and start using this powerful reporting tool. </p>"},{"location":"installation/components/uptime-kuma/","title":"Uptime Kuma","text":"<p>This guide shows how to activate Uptime Kuma on a one node seatable server.</p>"},{"location":"installation/components/uptime-kuma/#installation","title":"Installation","text":""},{"location":"installation/components/uptime-kuma/#change-the-env-file","title":"Change the .env file","text":"<p>Add uptime-kuma.yml to the COMPOSE_FILE variable.</p> <pre><code>nano /opt/seatable-compose/.env\n</code></pre> <p>Your COMPOSE_FILE variable should look something like this:</p> <pre><code>COMPOSE_FILE='seatable-docker-proxy.yml,seatable-server.yml,uptime-kuma.yml'\n</code></pre>"},{"location":"installation/components/uptime-kuma/#update-the-compose-project","title":"Update the compose project","text":"<pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation/components/uptime-kuma/#configure-your-uptime-kuma","title":"Configure your Uptime Kuma","text":"<p>Your Uptime Kuma Container provides a Web UI to set up your Uptime Kuma Admin User under <code>https://&lt;your-seatable-server-hostname&gt;:6230</code>.</p>"},{"location":"installation/components/uptime-kuma/#things-to-monitor-of-your-seatable-server","title":"Things to monitor of your seatable server","text":"<p>Paths:</p> <ul> <li>https://deploy.seatable-demo.de/api2/ping/</li> <li>https://deploy.seatable-demo.de/dtable-server/ping/</li> <li>...</li> <li>https://deploy.seatable-demo.de:6231/healthz (n8n)</li> <li>https://deploy.seatable-demo.de:6232/ (collabora online)</li> <li>https://deploy.seatable-demo.de:6233/welcome/ (onlyoffice)</li> <li>...</li> </ul>"},{"location":"installation/components/uptime-kuma/#screenshots","title":"Screenshots","text":"<p>will be added shortly.</p>"},{"location":"installation/components/whiteboard/","title":"Whiteboard (tldraw)","text":"<p>5.2 Enterprise Edition</p> <p>SeaTable's whiteboard plugin offers a versatile platform for capturing thoughts and data, independent of base data. This plugin utilizes the tldraw SDK and requires special installation steps, including server-side components for collaborative drawing.</p> <p></p>"},{"location":"installation/components/whiteboard/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>SeaTable Enterprise Edition installed and running</li> <li>Firewall configured to allow traffic on port 6239</li> <li>System admin to install both the whiteboard plugin and the tldraw worker (server component)</li> </ol>"},{"location":"installation/components/whiteboard/#tldraw-worker-installation","title":"tldraw-worker Installation","text":"<p>Follow these steps to deploy the tldraw worker on the same node as the seatable-server:</p>"},{"location":"installation/components/whiteboard/#update-env-file","title":"Update .env file","text":"<p>Like with all additional components you need to add <code>tldraw.yml</code> to the <code>COMPOSE_FILE</code> variable in your <code>.env</code> file.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,tldraw.yml'/\" /opt/seatable-compose/.env\n</code></pre>"},{"location":"installation/components/whiteboard/#launch-the-worker","title":"Launch the worker","text":"<p>Start the <code>tldraw-worker</code>:</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"installation/components/whiteboard/#verify-installation","title":"Verify Installation","text":"<p>After a few seconds, check <code>https://&lt;your-seatable-url&gt;:6239/ping</code>. You should see:</p> <pre><code>{\"status\":\"pong\"}\n</code></pre> <p>This confirms that the <code>tldraw-worker</code> is operational. If you don't see this message, check that port 6239 is allowed and the container logs.</p>"},{"location":"installation/components/whiteboard/#final-steps","title":"Final Steps","text":"<p>With the server-side installation complete, you can now install the whiteboard plugin through the SeaTable admin interface and begin using this creative tool.</p>"},{"location":"installation/components/whiteboard/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"installation/components/whiteboard/#custom-certificate","title":"Custom Certificate","text":"<p>You need to make some changes to your <code>tldraw-worker</code> deployment in case your SeaTable server uses an internal CA. It is not recommended to make changes to the provided <code>tldraw.yml</code> file. You should copy <code>tldraw.yml</code> to <code>custom-tldraw.yml</code> and reference this file in your <code>.env</code> file instead.</p> <p>The following changes need to be made in order to use an internal CA:</p> <pre><code>services:\n  tldraw-worker:\n    # ...\n    environment:\n      # ...\n      # Configure Extra CA (chain) for node.js\n      - NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/MY-CA.pem\n    volumes:\n      # Mount the CA file into the container\n      - ./MY-CA.pem:/usr/local/share/ca-certificates/MY-CA.pem:ro\n</code></pre>"},{"location":"installation/components/whiteboard/#subfolder-installation","title":"Subfolder Installation","text":"<p>Deploying the tldraw-worker using a subfolder (e.g. <code>/tldraw</code>) instead of port 6239 is not yet supported.</p> <p>You can refer to the following forum post for details regarding the required changes in your reverse proxy and the whiteboard plugin itself: forum.seatable.com/t/configuring-new-whiteboard-plugin-tldraw/6482</p>"},{"location":"installation/components/zabbix/","title":"Zabbix Monitoring","text":"<p>Install Zabbix Agent and Zabbix Server on the same host to monitor system status.</p>"},{"location":"installation/components/zabbix/#get-the-zabbix-server","title":"Get the Zabbix Server:","text":"<p>After installation, you can get access to the zabbix server webinterface</p> <ul> <li>Login to Zabbix Server Browser: <code>https://&lt;your-seatable-server-node&gt;:6235</code></li> </ul> <p>Initial Login with: Admin/zabbix</p>"},{"location":"installation/components/zabbix/#after-login","title":"After login:","text":"<p>Go to <code>Monitoring &gt; Hosts</code>. Change Host Configuration of Zabbix server :</p> <p>From: IP 127.0.0.1 To: DNS zabbix-agent</p> <p>After some seconds the monitoring will run and deliver data.</p>"},{"location":"introduction/architecture/","title":"Architecture","text":""},{"location":"introduction/architecture/#overview","title":"Overview","text":"<p>SeaTable Server uses Docker/Docker Compose for easy deployment and upgrades.</p> <p>A SeaTable Server instance consists of a handful of Docker containers. The following diagram is a simplified representation of the required Docker containers deployed in the single node setup.</p> <pre><code>flowchart TB\n    Client@{ shape: pill, label: \"Client\"}\n    Client&lt;--&gt;A\n    subgraph s[SeaTable Server instance]\n        subgraph d[Docker Containers]\n            A[caddy&lt;br/&gt;80, 443]\n            B[seatable-server&lt;br/&gt;80]\n            C[mariadb&lt;br/&gt;3306]\n            D[redis&lt;br/&gt;6379]\n            A&lt;--&gt;B\n            B&lt;--&gt;C\n            B&lt;--&gt;D\n        end\n        F@{ shape: bow-rect, label: \"Storage\"}\n    end</code></pre> <p>The numbers designate the ports used by the containers. Port 443 in the container <code>caddy</code> must be exposed. Port 80 must also be exposed when a Let's Encrypt SSL certificate is to be used.  All other ports are internal ports that are only available within the Docker network.</p> <p>All Docker containers read from and write to local disk. The containers <code>caddy</code>, <code>seatable-server</code>, and <code>mariadb</code> employ Docker volumes.</p> <p>In an extended setup, additional, optional Docker container can be deployed to add functionality to SeaTable Server. The diagram below describes all Docker containers and their interactions required for a SeaTable Server instance integrated with office editor, Python pipeline, virus scan, and whiteboard.</p> <pre><code>flowchart TB\n    Client@{ shape: pill, label: \"Client\"}\n    Client&lt;--&gt;C\n    subgraph s[SeaTable Server instance]\n        direction LR\n        subgraph d[Docker Containers]\n            direction TB\n            C[caddy&lt;br/&gt;80,443]\n            SS[seatable-server&lt;br/&gt;80]\n            MDB[mariadb&lt;br/&gt;3306]\n            R[redis&lt;br/&gt;6379]\n            OO[collabora/onlyoffice&lt;br/&gt;6232/6233]\n            Tld[tldraw&lt;br/&gt;6239]\n            CAV[clamav&lt;br/&gt;3310]\n            PSc[python-scheduler]\n            PSt[python-starter]\n            PR[python-runner]\n            C&lt;--&gt;SS\n            C&lt;--&gt;Tld\n            C&lt;--&gt;OO\n            SS&lt;--&gt;MDB\n            MDB&lt;--&gt;PSc\n               subgraph p[Python Pipeline]\n                  direction TB\n                  PSc&lt;--&gt;PSt\n                  PSt&lt;--&gt;PR\n               end\n            SS&lt;--&gt;R\n            SS&lt;--&gt;OO\n            SS&lt;--&gt;Tld\n            SS&lt;--&gt;CAV\n            SS&lt;--&gt;PSc\n        end\n        F@{ shape: bow-rect, label: \"Storage\"}\n    end</code></pre> <p>Single domain and exposed ports</p> <p>By default, SeaTable requires only a single publicly accessible URL. However, some user-facing services (such as Collabora, OnlyOffice, and tldraw) are exposed on separate ports (typically between 6230 and 6239). Experienced administrators can configure separate URLs or subdomains for these services if needed, for example by creating custom YAML files.</p> <p>Note: Not all services support operation under subfolders. For example, tldraw cannot be accessed via a subfolder.</p> <p>The rest of this article focuses exclusively on the required containers and services of a SeaTable Server instance.</p>"},{"location":"introduction/architecture/#container-caddy","title":"Container caddy","text":"<p>Caddy is a flexible web proxy. Its job is to offer a central gateway for the SeaTable Server instance.</p> <p>Caddy is easy to configure and excels at facilitating SSL configuration and management, either with Let's Encrypt or custom certificates.</p>"},{"location":"introduction/architecture/#container-seatable-server","title":"Container seatable-server","text":"<p>The container <code>seatable-server</code> is home to several services. The nginx service is the gateway in the container.</p> <pre><code>flowchart LR\n    subgraph s[SeaTable Server Container]\n        A[nginx&lt;br/&gt;80]\n        B[dtable-web&lt;br/&gt;8000]\n        C[dtable-server&lt;br/&gt;5000]\n        D[dtable-db&lt;br/&gt;7777]\n        E[api-gateway&lt;br/&gt;7780]\n        F[dtable-storage-server&lt;br/&gt;6666]\n        G[dtable-events]\n        H[seaf-server&lt;br/&gt;8082]\n        A&lt;-- / --&gt;B\n        A&lt;-- /api-gateway --&gt;E\n        A&lt;-- /seafhttp --&gt;H\n        B&lt;--&gt;C\n        B&lt;--&gt;D\n        B&lt;--&gt;F\n        E&lt;--&gt;C\n        E&lt;--&gt;D\n        C&lt;--&gt;F\n        C&lt;--&gt;G\n        D&lt;--&gt;F\n        D&lt;--&gt;G\n    end</code></pre> <p>All services in the container <code>seatable-server</code> connect to the containers <code>mariadb</code> and <code>redis</code> to read (and write). All components also read (and write) to local disk.</p> <p>Don't be confused by the term <code>dtable</code></p> <p>Originally (a long time ago), SeaTable was going to be called <code>dtable</code> (short for database table). Although this term was later replaced with SeaTable, many internal components and log entries still use the old name <code>dtable</code>. Whenever you see <code>dtable</code>, it simply refers to a component of SeaTable.</p>"},{"location":"introduction/architecture/#dtable-web","title":"dtable-web","text":"<p>The task of the service dtable-web is to deliver all pages except for the bases themselves. This includes essential features such as the login page, home page, system administration area, team administration, personal settings, and API endpoints. All these functionalities are provided by dtable-web, which is built on the Django framework.</p>"},{"location":"introduction/architecture/#dtable-server","title":"dtable-server","text":"<p>When accessing a base, you'll be directed to the base editor, which is provided by the dtable-server service. This editor loads the base's content from a JSON file, presenting it in a familiar spreadsheet interface and enabling real-time collaborative work on all data within the base. Each modification is promptly saved to the operation log (stored in MariaDB), and within minutes, these changes are persisted as a JSON file and transmitted to dtable-storage-server for storage in the attached storage system.</p>"},{"location":"introduction/architecture/#dtable-db","title":"dtable-db","text":"<p>dtable-db extends the functionality of dtable-server, offering an SQL-like query language to interact with base data. Additionally, it serves as the interface for accessing the Big Data Backend.</p>"},{"location":"introduction/architecture/#seaf-server","title":"seaf-server","text":"<p>When utilizing a file or image column in your base, the actual files are stored separately from the JSON object, with the JSON object containing only links to these files. The seaf-server service manages the storage and retrieval of these files, ensuring they can be accessed within the base. Seafile currently supports local storage or S3 storage, and seaf-server is responsible for appropriately storing the files based on the chosen storage method.</p>"},{"location":"introduction/architecture/#dtable-storage-server","title":"dtable-storage-server","text":"<p>The dtable-storage-server is a simple abstract layer upon the chosen storage. SeaTable Server support file system and S3-compatible object storage.</p>"},{"location":"introduction/architecture/#dtable-events","title":"dtable-events","text":"<p>When actions are not executed immediately but with a time delay, SeaTable employs the dtable-events service, essentially the interface to the Redis cache. dtable-events effectively manages various tasks and their status, ensuring efficient task execution within the system.</p>"},{"location":"introduction/architecture/#api-gateway","title":"api-gateway","text":"<p>The api-gateway is as a proxy for dtable-server and dtable-db. All API calls for base operations are routed through this component. It also essential for the effective enforcement of API rate and request limits.</p>"},{"location":"introduction/architecture/#container-mariadb","title":"Container mariadb","text":"<p>SeaTable uses MariaDB to store user, group and team information as well as metadata for bases. Additionally, MariaDB stores the operation log. The operation log (saved in the database table <code>dtable_db.operation_log</code>) is the base journal. It records all modifications made within all bases of the SeaTable Server instance. (While SeaTable stores all base modifications in MariaDB, but it doesn't store the actual base content. Instead, bases are managed within dtable-server and regularly persisted to dtable-storage-server for long-term storage.)</p> <p>SeaTable Server uses four database tables:</p> <ul> <li>ccnet_db: information about users, groups and teams (or organizations)</li> <li>seafile_db: metadata information of the file storage</li> <li>dtable_db: application level data, including base metadata, operation log, sessions, automation rules</li> <li>scheduler: log information for SeaTable Server's Python Pipeline</li> </ul>"},{"location":"introduction/architecture/#container-redis","title":"Container redis","text":"<p>Redis, an in-memory data store, performs several tasks for a SeaTable Server instance:</p> <ul> <li>Caching for Django, which is used for SeaTable's web interface and all API endpoints</li> <li>Cache application level data obtained from databases (e.g. session cache, user information cache, group and organization list cache)</li> <li>Sending messages from dtable-web/dtable-server to dtable-events - it servers as an event queue to save internal tasks and statuses</li> </ul> <p>Redis has replaced Memcached</p> <p>In versions up to SeaTable Server 5.1, Memcached, an in-memory key-value store, was used to cache the Django framework.</p>"},{"location":"introduction/architecture/#storage","title":"Storage","text":"<p>By default, SeaTable Server stores user data in the following structure on the local disk: <pre><code>/opt/seatable-server/seatable\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 db-data\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 pids\n\u251c\u2500\u2500 scripts\n\u251c\u2500\u2500 seafile-data\n\u251c\u2500\u2500 seahub-data\n\u2514\u2500\u2500 storage-data\n</code></pre></p> <p>These directories contain the following content:</p> <ul> <li>conf: configuration files for SeaTable Server components (see Configuration)</li> <li>logs: log files generated by SeaTable Server components (see Logging)</li> <li>db-data: data stored in big data storage</li> <li>seahub-data: avatars and image thumbnails</li> <li>storage-data: base data, base snapshots, and backup of big data</li> <li>seafile-data: assets (files and images) saved in bases</li> </ul> <p><code>/opt/seatable-server/</code> is mounted as a Docker volume in the Docker container <code>seatable-server</code> when SeaTable Server is started.</p> <p>SeaTable can, depending on the configuration, store the following items in S3 buckets instead of in the file system:</p> <ul> <li>storage-data</li> <li>seafile-data</li> <li>avatars in seahub-data</li> </ul> <p>(The content of the data in db-data cannot be stored in S3 due to it ideosyncratic format.)</p>"},{"location":"introduction/architecture/#seatable-backends","title":"SeaTable Backends","text":"<p>SeaTable employs two distinct backends: the default backend, which supports all features including real-time collaboration in the base editor, and the big data backend.</p> <p>The latter was developed to address a technical size limitation, which by default restricts the maximum number of rows within a base to 100k. The Big Data backend enables the storage of millions of rows in a single base, overcoming this limitation. However, due to the vast amount of data handled, not all functions are supported by the big data backend. Particularly, real-time collaboration is not supported for data stored in the big data backend.</p>"},{"location":"introduction/architecture/#default-backend-json-file-based-backend","title":"Default Backend (JSON-file based backend)","text":"<p>The core of a SeaTable Server lies in its base editor, facilitating real-time collaborative work directly within the browser.</p> <p>When a base is opened in the base editor, dtable-server initiates a request to the dtable-storage-server to retrieve the corresponding JSON-file from storage. Subsequently, dtable-server renders the base and loads its content into the server's memory. All modifications are stored in memory and simultaneously recorded in the operation log within the MariaDB database. Every five minutes, dtable-server automatically saves these changes to the file system, persisting them in the JSON-file.</p> <p>Furthermore, the dtable-storage-server generates a snapshot of the base every 24 hours, capturing any changes that have occurred in the interim. Essentially, a snapshot is a complete copy of the JSON-file.</p> <p></p> <p>Why are the bases not stored in MariaDB?</p> <p>Initially, it may seem counterintuitive that SeaTable saves base data in a JSON-file rather than directly in the MariaDB database. However, this decision stems from the efficiency of SQL tables in handling vast numbers of rows. The challenge arises when altering the database structure, such as adding new columns, renaming columns, or changing column types in a table containing hundreds of thousands of rows. In such cases, direct database storage proves inefficient.</p> <p>To address this issue, SeaTable opts to persist base data in JSON-files instead. While this JSON-based backend approach offers flexibility, it also imposes a limitation on base size. A technical constraint of 200MB per JSON-object translates to a default maximum of 100k rows per base. When nearing this limit, records can be transferred to the Big Data storage via the archive view operation, mitigating potential issues.</p>"},{"location":"introduction/architecture/#big-data-backend-sql-like-database","title":"Big Data Backend (SQL-like database)","text":"<p>The second backend, known as the big data backend, diverges from the conventional JSON-file storage method by utilizing an SQL-like database capable of accommodating millions of rows within a base. Activating the Big Data backend for a base prompts SeaTable to create a new database structure tailored to accommodate large datasets.</p> <p>To access data stored in the big data backend, users must create a Big Data View, which, unlike conventional views, loads a preview of up to 1k rows by default. To retrieve additional rows, users can make requests within the web interface to get more data.</p> <p>Unlike the default backend, the Big Data backend does not load data into the server's memory, rendering real-time collaboration unsupported. Given the challenges of interacting with millions of rows within a browser-based spreadsheet interface, users typically access such large datasets via the SQL query Plugin, the SeaTable API or through the SQL-like query language provided by dtable-db.</p>"},{"location":"introduction/dtable-server-license/","title":"EULA (dtable-server)","text":"<p>End User License Agreement for dtable-server</p> <p>Version: September 2020</p>"},{"location":"introduction/dtable-server-license/#1-parties-and-subject-matter","title":"1. Parties and Subject Matter","text":"<ol> <li> <p>The provisions of this End User License Agreement (\"EULA\") govern the relationship between Seafile Ltd., GuiGuLiangCheng, Block 2B, #310, HaiDian District, Beijing, China (\"Seafile\") and end users (\"End Users\") (collectively the \"Parties\") with respect to the licensing by Seafile of the software dtable-server (\"Server\" of \"Software\").</p> </li> <li> <p>A License Agreement between the Parties pursuant to this EULA is concluded when the End User downloads the Server, alone or bundled with other software. IF YOU DO NOT AGREE TO THIS EULA, DO NOT DOWNLOAD, INSTALL AND USE THE SERVER. The same applies for the software with which the Server is bundled.</p> </li> </ol>"},{"location":"introduction/dtable-server-license/#2-changes-to-the-eula","title":"2. Changes to the EULA","text":"<p>Seafile is entitled to amend this EULA. SeaTable posts the amended EULA on the website https://seatable.com no less than two months before it becomes effective. The End User is therefore advised to visit this EULA regularly and to check for amendments. IF YOU DO NOT AGREE TO THE AMENDED EULA, QUIT USING THE SERVER AND UNINSTALL IT. The same applies for the software with which the Server is bundled.</p>"},{"location":"introduction/dtable-server-license/#3-product-specification-availability-and-updates","title":"3. Product Specification, Availability and Updates","text":"<ol> <li> <p>The Server is a software developed by Seafile. Its functions and its requirements are described on the website https://seatable.com; technical details are provided in the administrator manual. The Server can be used free of charge. </p> </li> <li> <p>The Server is made available to the End User by download, bundled with other software in the form of the application SeaTable Community Edition (\"SeaTable CE\"), of which the Server is a key component and without which SeaTable CE is not functional.  This applies for installation media as well as updates.</p> </li> <li> <p>The End User is responsible for installation and configuration. Seafile does not offer any kind of support for the Server nor has the End User any claim. Seafile and its affiliates operate a Community Forum at https://forum.seatable.com where End Users can help one another.</p> </li> <li> <p>Seafile will regularly release new versions of the Server. At its sole discretion, it may add/modify/remove functions and features and/or supported platforms. Seafile informs about new releases and associated changes on its blog and in the Community Forum. </p> </li> <li> <p>Seafile may also decide, at its discretion, to discontinue the development of the Server.</p> </li> <li> <p>Some functions and features of the Server may depend on third-party products and services, all of which may be subject to changes. As a consequence, Seafile may need to modify or limit functions and features of the Server.</p> </li> </ol>"},{"location":"introduction/dtable-server-license/#5-rights-of-use","title":"5. Rights of Use","text":"<ol> <li> <p>Seafile grants to the End User the non-exclusive, non-transferable and non-sublicensable right to install, run and use the Server to the extent granted by this EULA.</p> </li> <li> <p>The rights of use, granted under this EULA, are unlimited in time as long as the End User agrees to this EULA.</p> </li> <li> <p>Any use of the Server beyond the scope granted under this EULA is prohibited and may be prosecuted.</p> </li> <li> <p>The rights of use, granted pursuant to this EULA, do not include any rights to the source code of the Server.</p> </li> <li> <p>The rights, granted pursuant to this EULA, do not include and the End User is not entitled to and shall not allow a third party to (I) attempt to circumvent any technical measures and devices of the Server that are directed at, or have the effect of, enforcing this EULA and its terms; (II) modify, create derivative works, translate, decompile or create or attempt to create, by reverse engineering or otherwise, the source code of the Server;  (III) remove, modify or obscure any copyright, trademark, service mark or other proprietary rights, confidentiality, serial number, notice, legend or similar on any copy of the Server, or related data, manuals, documentation or other materials;  (IV) market, sell, lend, rent, lease or distribute the Server; (V) use the Server, on its own or as a part of another product and irrespective of the delivery model, for creating or providing a commercial service or a free public or de-facto public service; and (VI) assign, sublicense or otherwise transfer any rights in or to the Server.</p> </li> <li> <p>Seafile retains all right, title and interest in and to the Server (and any new versions thereof provided by Seafile) and in all copies, modifications and derivative works of the Server including, without limitation, all rights to patent, copyright, trade secret, trademark and other proprietary or intellectual property rights.</p> </li> </ol>"},{"location":"introduction/dtable-server-license/#6-documentation-and-interfaces","title":"6. Documentation and Interfaces","text":"<ol> <li>Seafile and its affiliates provide an online user and administrator manual in English on the website https://seatable.com. Any further languages may be offered by Seafile on a voluntary basis. </li> <li>Seafile retains all right, title and interest in and to such documentation and in all copies, modifications and derivative works thereof.</li> <li>The Server may, at Seafile's sole discretion, provide application programming interfaces or other software interfaces (collectively \"API\") that allow third-party or customer applications to communicate with the Server (collectively \"third-party software\"). Seafile may change or discontinue APIs at any time without any obligation or liability to the End User. The respective provider is responsible for the third-party software. The provisions of the EULA do not apply to any such third-party software. Under no circumstances is Seafile liable for any third-party software.</li> </ol>"},{"location":"introduction/dtable-server-license/#7-obligations-and-duties-of-the-end-user","title":"7. Obligations and Duties of the End User","text":"<ol> <li> <p>The End User is obliged to use the Server only in accordance with the provisions of this EULA and in accordance with laws and regulations applicable to such use and may not infringe on any third-party rights in connection with such use. The End User must, in particular, comply with all applicable data protection and export control provisions.</p> </li> <li> <p>The requirements for the Server are specified in the administrator manual. The End User familiarizes himself/hersef with these requirements prior to download, installation and use of the Server.</p> </li> <li> <p>The End User reports errors and bugs (\"Defects\") on the Community Forum. The report of any Defect must include</p> </li> <li> <p>a detailed description of the defect,</p> </li> <li>instructions to reproduce it,</li> <li>the relevant logs,</li> <li>the Software's version and</li> <li>the operating system and version. </li> </ol> <p>If a Defect occurred when accessing the Software via a browser, the report must additionally include</p> <ul> <li>browser type and version,</li> <li>screenshots of the defect and</li> <li>the content of browser console.</li> </ul>"},{"location":"introduction/dtable-server-license/#8-data-privacy","title":"8. Data Privacy","text":"<ol> <li> <p>Seafile collects, processes and uses personal data of the End User as described in detail in the Privacy Statement.</p> </li> <li> <p>Non-personal or anonymous data may be collected automatically to improve functionality and the user experience with the Server. The End User agrees that Seafile owns all rights in, and is free to use any such non-personal or anonymous data in any way it deems fit for development, diagnostic, corrective as well as marketing or any other purposes.</p> </li> </ol>"},{"location":"introduction/dtable-server-license/#9-limitation-of-liability","title":"9. Limitation of Liability","text":"<p>IN NO EVENT, UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING, WILL SEAFILE BE LIABLE TO END USERS FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THE END USER OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SEAFILE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"introduction/dtable-server-license/#10-warranty-claims","title":"10. Warranty Claims","text":"<p>THERE IS NO WARRANTY FOR THE SERVER, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH THE END USER. SHOULD THE PROGRAM PROVE DEFECTIVE, THE END USER ASSUMES THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"introduction/dtable-server-license/#11-final-provisions","title":"11. Final Provisions","text":"<ol> <li> <p>Any notifications and declarations in connection with the EULA will be made through public announcements on the website https://seatable.com and/or the Community Forum at https://forum.seatable.com. The End User is responsible for checking these two sites regularly.</p> </li> <li> <p>The EULA and any disputes in connection with it are solely governed by, and construed in accordance with, the law of the People's Republic of China.</p> </li> <li> <p>The exclusive place of jurisdiction is Beijing, China. Seafile reserves the right to sue at the End User\u2019s head office.</p> </li> <li> <p>If a provision of the EULA is found to be partly or wholly invalid or unenforceable, this shall not affect the validity and enforceablity of the remaining providions of the EULA. In place of the invalid or unenforceable provision, a valid and enforceable provision shall apply which reflects as closely as possible the commercial intention of the parties as regards the invalid or unenforceable provision.</p> </li> </ol>"},{"location":"introduction/editions/","title":"SeaTable Server Editions","text":"<p>There are two editions of SeaTable Server available for self hosting.</p> <ul> <li> <p>Enterprise Edition: almost no limitation for storage, row numbers and API calls and have advanced permissions and user management features. It is meant for large teams to use SeaTable in both ways. Users can use it in the cloud or self-hosted.</p> </li> <li> <p>Developer Edition: for users that want to use SeaTable as database and heavily using APIs and scripts. The developer edition has no limit on storage, row numbers and API calls, but can support at most 200 concurrent connections to dtable-server.</p> </li> </ul>"},{"location":"introduction/editions/#license-and-limitation-of-seatable-developer-edition","title":"License and limitation of SeaTable Developer Edition","text":"<p>The services of SeaTable Server (both editions) are released under the following licenses:</p> <ul> <li>dtable-web: Apache License v2</li> <li>dtable-events: Apache License v2</li> <li>dtable-server: Proprietary License</li> <li>seaf-server: AGPLv3</li> </ul> <p>SeaTable developer edition should not be used to provide SaaS service or as a part of your SaaS service. Other kinds of usage are okay, including</p> <ul> <li>Personal or home use</li> <li>Internal in-house use</li> <li>Collaboration with customers</li> <li>IT projects for customers, as long as a separate server is used for each customer</li> </ul>"},{"location":"introduction/editions/#license-and-limitations-of-seatable-enterprise-edition","title":"License and limitations of SeaTable Enterprise Edition","text":"<p>The SeaTable Enterprise Edition is released under a proprietary license. You find the EULA at https://seatable.com/eula.</p>"},{"location":"introduction/get-support/","title":"Get support","text":"<p>Next to this administration manual there are more documentations available. To learn more about how to use SeaTable as a user, how to use the SeaTable API, the possibilities to develop your own plugins or scripts in SeaTable, please refer to their respective manuals:</p> <ul> <li>SeaTable User Manual</li> <li>SeaTable Developer Manual</li> <li>SeaTable API Reference</li> </ul> <p>See the official SeaTable channel on YouTube for tutorials, guides and overviews. Visit our blog for latest news and to learn more about what is going on in and around SeaTable.</p> <p>At any time you could have a look at the SeaTable Community Forum to share your experience with other users or report issues or bugs.</p> <p>Enterprise support</p> <p>If you're using SeaTable in your organization and need assistance, e.g., to digitalization of processes, develop custom solutions or improve efficiency, get in touch to discuss our enterprise support offerings.</p> <p>We're happy to help!</p>"},{"location":"introduction/requirements/","title":"Requirements","text":"<p>One of the main advantages of SeaTable against other solutions is, that you can run SeaTable on your own hardware or on any server your like. Still there are some requirements:</p> <ul> <li>Linux-Server with Root-Shell</li> <li>Public domain pointing to your server</li> <li>Open Ports for HTTP and HTTPS access (probably more ports for other components)</li> <li>The ports should not be already in use by another proxy such as NGINX or Apache</li> </ul> <p>Does this sounds complicated? Not really. So lets get started.</p> <p>Let's begin with the installation in the root-shell</p> <p>If you need more information, you can get more details in this article.</p>"},{"location":"introduction/requirements/#platform-support","title":"Platform support","text":"<p>SeaTable uses <code>docker</code> and <code>docker compose</code>. Therefore it should run as long as docker virtualisation is available. Still we recommend Debian 11 or newer because we always use Debian for production and testing.</p> <p>Currently only x86/x64 architecture is officially supported. Bigger customers might get support with ARM based systems.</p>"},{"location":"introduction/requirements/#hardware","title":"Hardware","text":"<p>SeaTable Server requires at least</p> <ul> <li>4 CPU cores</li> <li>8 GB RAM</li> <li>50 GB SSD</li> </ul> <p>These resources guarantee good performance for most applications with up to 100 users. When bases become large or the number of users increase, more RAM is needed since SeaTable stores the bases in memory. More CPU could help, but has much lower impact on system performance.</p> <p>As soon as you have more than 100 users, you should consider extending your SeaTable Platform and move some components to separate VMs.</p> <p>Additional components need additional ressources</p> <p>These hardware requirements are for SeaTable Server. If you install additional components like n8n, collabora online or onlyoffice the requirements for these ressources stack up and you have to add additional ressources.</p> <p>For sure we need a root shell on this server to execute the installation commands.</p>"},{"location":"introduction/requirements/#public-available-domain","title":"Public available domain","text":"<p>This manual assumes that you have one domain or subdomain that points to your public IP address of your server.</p> <pre><code>flowchart LR\n    A[\"User /&lt;br&gt;Browser\"]\n    B[Domain / Subdomain&lt;br&gt;Ports 80+443]\n    C[Server or VM&lt;br&gt;with Docker]\n    A--&gt;B\n    B--&gt;C</code></pre> <p>For sure, it is possible to run SeaTable without an internet connection (air-gapped) or with custom SSL certificates. This requires additional settings which are explained in separate chapters.</p>"},{"location":"introduction/requirements/#ports","title":"Ports","text":"<p>SeaTable needs by default only the default ports 80 (HTTP) and 443 (HTTPS).</p> <p>Most of the additional components will require additional ports in the range of 6230 to 6240. You have to open the firewall or create port forwardings if you want to use these functions. If you don't use this component, the port can stay closed.</p>"},{"location":"introduction/requirements/#list-of-required-ports","title":"List of required ports","text":"<ul> <li>80: HTTP access is necessary to receive a Let's Encrypt certificate</li> <li>443: HTTPS is the main entrance to SeaTable Server</li> </ul>"},{"location":"introduction/requirements/#list-of-optional-ports","title":"List of optional ports","text":"<ul> <li>6230: Uptime Kuma</li> <li>6231: n8n</li> <li>6232: Collabora Online</li> <li>6233: OnlyOffice</li> <li>6235: Zabbix</li> </ul>"},{"location":"introduction/requirements/#license","title":"License","text":"<p>SeaTable Enterprise Edition requires a license to start. A free license for two years and three users can be obtained via the command line, which will be explained during the installation. Licenses with more than three users can be obtained from SeaTable Website.</p> <p>SeaTable Developer Edition does not require a license.</p>"},{"location":"introduction/security/","title":"Security measures","text":"<p>Security is more than just activating a function or implementing a web-application firewall. Security is an ongoing process with a holistic view on all relevant topics. We try to define sinnvolle default values implementing best practies to improve the security without creating to many restrictions that might produce problems with some older clients.</p>"},{"location":"introduction/security/#web-security","title":"Web-Security","text":"<p>Due to the fact that SeaTable is a mainly used via the browser, we took quiet some effort to implement good security measures. HTTPS is mandatory by default, modern ciphers are required and we enforce some security headers to prevent against typical script kiddies attacks.</p> <p>This configuration approach delivers good results, that are confirmed by known security experts in the internet:</p> <ul> <li>A+ from https://www.ssllabs.com/</li> <li>A from https://securityheaders.com/</li> <li>100% from internet.nl</li> <li>80/100 or B+ from https://observatory.mozilla.org/</li> </ul>"},{"location":"introduction/security/#network-security","title":"Network security","text":"<p>SeaTable's architecture encompasses a constellation of services and containers, each fortified with robust security measures. Our approach emphasizes the publication of only a singular service to the internet, strategically limiting the attack surface.</p> <p>Complementing this, network segmentation is rigorously enforced, ensuring containers are cordoned off from one another and allowing only vital communication within the ecosystem. In meticulous detail, we've established distinct networks: one tailored for containers necessitating public accessibility and another reserved for internal, non-public traffic.</p> <p>This meticulous design ensures a fortified defense posture, shielding SeaTable's infrastructure from potential threats while safeguarding the integrity of its operations.</p>"},{"location":"introduction/security/#security-scans-and-vulnerabilities","title":"Security scans and vulnerabilities","text":"<p>Ensuring security in CI deployment is paramount for us. This entails maintaining strict control over our deployment pipeline, implementing rigorous linting and code formatting checks, and conducting automatic testing with CVE vulnerability scanners. These measures collectively contribute to the generation of up-to-date container images, safeguarding our infrastructure against potential vulnerabilities.</p>"},{"location":"introduction/security/#documentation-support-and-source-code","title":"Documentation, Support and source code","text":"<p>While it's true that any software product can simply be run, that approach doesn't align with our philosophy. Our mission is to create the world's leading self-hosted no-code database and app building platform. In pursuit of this goal, we prioritize several key components:</p> <ul> <li>Comprehensive documentation to empower users at every step.</li> <li>A responsive and knowledgeable support team to swiftly address any inquiries or issues.</li> <li>Availability of the source code, with exceptions made only to protect our intellectual property.</li> </ul> <p>By adhering to these principles, we aim to provide a seamless and empowering experience for our users, fostering innovation and creativity in their projects.</p>"},{"location":"introduction/server-changelog/","title":"SeaTable Changelog","text":"<p>SeaTable, as a dynamic platform, undergoes frequent updates and enhancements to provide users with the best possible experience. To keep our users informed about these changes, we maintain several changelogs:</p>"},{"location":"introduction/server-changelog/#functions","title":"Functions","text":"<p>For a comprehensive overview of updates to the SeaTable Server, users can refer to our detailed changelog available at SeaTable Server Changelog. Here, they can explore the latest features, improvements, and bug fixes implemented in each release, ensuring they stay up-to-date with the platform's evolution.</p>"},{"location":"introduction/server-changelog/#blog-with-release-notes","title":"Blog with Release Notes","text":"<p>In addition to the detailed changelogs mentioned above, we curate a blog featuring release notes that highlight the most significant changes in each version. This narrative-style format provides users with a concise yet informative overview of key updates, allowing them to quickly grasp the impactful enhancements introduced in a particular release. You can explore our blog at SeaTable Release Notes Blog.</p>"},{"location":"introduction/server-changelog/#new-api-calls","title":"New API Calls","text":"<p>As the SeaTable API evolves to meet the changing needs of our users and developers, we document all new API calls and changes in our API Changelog. This resource, available at SeaTable API Changelog, provides developers with insights into the latest API updates, enabling them to leverage new functionalities and enhancements in their integrations and applications.</p>"},{"location":"introduction/server-changelog/#extra-upgrade-notices","title":"Extra Upgrade Notices","text":"<p>In addition to general changelogs, we provide specific upgrade notices containing changes relevant to administrators. These notices highlight critical updates, potential impact on system configurations, and any necessary actions to ensure smooth transitions during upgrades.</p>"},{"location":"introduction/system-limitations/","title":"System limitations","text":"<p>The following limitations apply to SeaTable Server as well as SeaTable Cloud and SeaTable Dedicated, unless explicitly stated otherwise here or on the relevant product page.</p> <p>For API-related limits, please see the SeaTable API reference.</p> Category Limitation Type Limit Additional Notes Bases Rows 100 000 The base becomes read-only when exceeding this limit. The limit can be modified in dtable_server_config.json. Rows 2 150 000 The base will fail to load when exceeding this limit. The limit can be modified in dtable_server_config.json. Archived rows no limit Tables 200 External links for bases 100 External links for views 100 Apps 100 Forms 100 Tables Columns 500 External links External link viewing rate 300/min Import / export Size of a base being exported as a DTABLE file 100MB All files stored in a base can be viewed and deleted via File Management. The limit can be modified in dtable_web_settings.py (<code>DTABLE_EXPORT_MAX_SIZE</code>). Import of a XLSX/CSV file 50 000 records or 10MB Export of a table 10 000 records or 1,000,000 cells Export of a view in table 1 000 000 cells Import / export big data Import from XLSX to big data storage 500 000 records or 40MB The limit can be modified in dtable_web_settings.py (<code>BIG_DATA_ROW_IMPORT_LIMIT</code>). Update from XLSX to big data storage 500 000 records The limit can be modified in dtable_web_settings.py (<code>BIG_DATA_ROW_UPDATE_LIMIT</code>). Export big data view to Excel 250 000 records The limit can be modified in dtable_web_settings.py (<code>ARCHIVE_VIEW_EXPORT_ROW_LIMIT</code>). Groups Group members 500 The limit can be modified in dtable_web_settings.py (<code>GROUP_MEMBER_LIMIT</code>). Group bases 500 Common datasets (CDS) Syncs of CDS Sync up to the first 50 000 records Sync frequency 5 minutes The limit can be modified in dtable_web_settings.py (<code>SYNC_COMMON_DATASET_INTERVAL</code>). Automation rules Records meet specific conditions after modification For batch modification, check the first 50 records. A rule can be triggered up to 10 times per minute. Add record For batch addition, check the first 50 records. A rule can be triggered up to 10 times per minute. Run periodically on records meet conditions Lock a maximum of 200 rows and send a maximum of 50 emails in one trigger"},{"location":"maintenance/backup-recovery/","title":"Backup and Recovery","text":"<p>If you decide to run your own SeaTable Server, it is essential to ensure that you have a backup in place.</p> <p>To understand what needs to be backed up, you must first understand the architecture of a SeaTable Server. If you have not yet read the relevant chapter, please do so now.</p> <p>Backup container for single-node server</p> <p>For single-node servers, we offer a user-friendly backup container that simplifies the process. Even with this tool, it is important to read this article to gain a thorough understanding of SeaTable backup procedures.</p> <p>This article details what should and must be included in your backup, providing you with the knowledge to create your own backup procedure.</p>"},{"location":"maintenance/backup-recovery/#data-and-folder-structure","title":"Data and folder structure","text":"<p>If you set up your SeaTable server according to this manual, your server should have a folder structure similar to the following.</p> <pre><code>/opt\n\u251c\u2500\u2500 caddy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 containerd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 mariadb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 seatable-compose\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .env\n\u2502   \u251c\u2500\u2500 caddy.yml\n\u2502   \u251c\u2500\u2500 ...\n\u2514\u2500\u2500 seatable-server\n    \u251c\u2500\u2500 nginx-logs\n    \u251c\u2500\u2500 seatable\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 ccnet\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 db-data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 logs\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pids\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 scripts\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 seafile-data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 seahub-data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 seatable-license.txt\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 storage-data\n    \u2514\u2500\u2500 ssl\n</code></pre> <p>There are generally four parts of data you have to save to keep your data secure.</p> <ul> <li>MariaDB database</li> <li>SeaTable base data (including Big Data)</li> <li>Configuration files with private keys</li> <li>Credentials and deployment settings</li> </ul> <p>Let us clarify where you find which content and how we should backup them.</p> <p>Custom changes require custom backup</p> <p>It's impossible to describe all variations of possible custom configurations. Therefore, keep the following rule in mind: if you made custom changes, you must check if they need to be included in the backup. For example, if you added custom certificates in the Caddy folder, ensure these certificates are included in your backup.</p>"},{"location":"maintenance/backup-recovery/#what-to-backup","title":"What to backup?","text":""},{"location":"maintenance/backup-recovery/#mariadb-database","title":"Mariadb database","text":"<p>Base data is not stored in the MariaDB database</p> <p>A common misunderstanding is the assumption that the content of SeaTable bases is stored in the MariaDB container. This is not the case. Refer to the chapter about SeaTable architecture for more details.</p> <p>SeaTable creates three database in the <code>mariadb</code> Docker container, storing these kind of data types:</p> <ul> <li>ccnet_db: User accounts, Groups and team assignment.</li> <li>seafile_db: Workspace definitions and versioning information for the files and images.</li> <li>dtable_db: Meta-information for the bases, statistic and log information and operation log</li> </ul> <p>The mariadb container persists the database information in the directory <code>/opt/mariadb</code> but instead of saving this directory you should create database dumps. Use the following commands to create such dump files.</p> <pre><code># you can copy these commands to a shell script and execute this via a cronjob.\n# Beware that this method will expose your mysql password in the process list\n# and shell history of the docker host.\n\nsource /opt/seatable-compose/.env\nmkdir -p /opt/seatable-backup &amp;&amp; cd /opt/seatable-backup\ndocker exec -it mariadb mariadb-dump -u root -p${SEATABLE_MYSQL_ROOT_PASSWORD} --opt ccnet_db &gt; ./ccnet_db.sql\ndocker exec -it mariadb mariadb-dump -u root -p${SEATABLE_MYSQL_ROOT_PASSWORD} --opt seafile_db &gt; ./seafile_db.sql\ndocker exec -it mariadb mariadb-dump -u root -p${SEATABLE_MYSQL_ROOT_PASSWORD} --opt dtable_db &gt; ./dtable_db.sql\n</code></pre> <p>Cronjob require other parameters</p> <p>If you want to execute the <code>docker ... mariadb-dump</code> command directly as a cronjob, your have to remove the parameters <code>-it</code>. Otherwise you will only create an empty dump file.</p> <p>Reduce database dump size</p> <p>To reduce the size of your database dump, you can exclude certain database tables that typically grow large and are not always necessary. Examples include:</p> <ul> <li>operation_log</li> <li>delete_operation_log</li> <li>session_log</li> <li>activities</li> </ul> <p>To exclude these tables, use the <code>--ignore-table</code> parameter one or more times in the <code>mariadb-dump</code> command.</p>"},{"location":"maintenance/backup-recovery/#base-content","title":"Base content","text":"<p>Inside the <code>/opt/seatable-server/seatable</code> directory, there are multiple folders containing user data, most importantly, the content of all SeaTable bases. Each base has a unique ID (base_uuid) used in the folder structure. The three folders that must be included in the backup are:</p> <ul> <li>storage-data: contains base base, base snapshots and big data dumps.</li> <li>seafile-data: contains uploaded files for file and image columns.</li> <li>seahub-data: contains data used by web front-end, such as avatars</li> </ul> <p>Big Data is dumped automatically</p> <p>The <code>db-data</code> directory contains big data content in a sql-like database structure. It is not recommended to save this folder. Instead the big data content is dumped to the storage-data folder automatically every 24 hours by default. Therefore it is already part of your backup.</p> <ol> <li>To backup big data more often, change the dtable-db settings.</li> <li>To force the dump of big data you could execute the following command:</li> </ol> <pre><code>docker exec -it seatable-server /opt/seatable/scripts/seatable.sh backup-all\n</code></pre>"},{"location":"maintenance/backup-recovery/#configuration-files","title":"Configuration files","text":"<p>The <code>conf</code> directory contains all the configuration files for your SeaTable Server. While these files are not mandatory for restoring your server, they simplify the process. Therefore, we recommend including the <code>conf</code> folder in your backup.</p>"},{"location":"maintenance/backup-recovery/#credentials-deployment-settings","title":"Credentials &amp; deployment settings","text":"<p>The <code>/opt/seatable-compose/</code> directory contains your <code>.env</code> file with secrets and your SeaTable license file. Including this directory in your backup is essential.</p>"},{"location":"maintenance/backup-recovery/#manual-backup-process","title":"Manual backup process","text":"<p>MariaDB replaces old commands</p> <p>In MariaDB 11, the commands <code>mysql</code> and <code>mysqldump</code> have been deprecated. Please use <code>mariadb</code> or <code>mariadb-dump</code> instead. Ensure your backup scripts create database dumps correctly.</p> <p>Now that you understand the theory behind which files and directories need to be backed up, the following script could serve as a good starting point to consolidate all necessary files into the directory <code>/opt/seatable-backup</code>. From there, you can choose the backup method that best suits your needs.</p> <pre><code>#!/bin/bash\n\n# create the backup directory\nmkdir -p /opt/seatable-backup/\n\n# mariadb dumps\nsource /opt/seatable-compose/.env\ncd /opt/seatable-backup\ndocker exec mariadb mariadb-dump -u root -p${SEATABLE_MYSQL_ROOT_PASSWORD} --opt ccnet_db &gt; ./ccnet_db.sql\ndocker exec mariadb mariadb-dump -u root -p${SEATABLE_MYSQL_ROOT_PASSWORD} --opt seafile_db &gt; ./seafile_db.sql\ndocker exec mariadb mariadb-dump -u root -p${SEATABLE_MYSQL_ROOT_PASSWORD} --opt dtable_db &gt; ./dtable_db.sql\n\n# force dump of big data to storage-data folder\ndocker exec -it seatable-server /opt/seatable/scripts/seatable.sh backup-all\n\n# backup files (exclude unnecessary directories)\nrsync -az --exclude 'ccnet' --exclude 'logs' --exclude 'db-data' --exclude 'pids' --exclude 'scripts' /opt/seatable-server/seatable /opt/seatable-backup\nrsync -az /opt/seatable-compose /opt/seatable-backup/\n</code></pre>"},{"location":"maintenance/backup-recovery/#special-cases-and-advanced-topics","title":"Special cases and advanced topics","text":"<p>This section covers typical custom cases and provides additional advanced topics.</p> Backup Order: database first or data directory first? <p>For larger SeaTable instances, a complete backup may take some time. Therefore, you should consider whether to backup the MariaDB database first and then the data directory, or vice versa. In general, there is no issue with a time difference between the database and data backup. However, if you have to choose, we recommend backing up the database first, followed by the data folder. Here's why:</p> <ul> <li>If you back up the data directory first, there's a risk that new objects referenced in the MariaDB database may not yet exist in the file system. This could potentially lead to problems, even resulting in base corruption.</li> <li>If you back up the database first, you can be confident that all entries in the database reference valid objects.</li> </ul> S3 Object storage instead of local storage <p>If you're using S3 Object Storage instead of local storage, the folders <code>storage-data</code> and <code>seafile-data</code> aren't stored on the local file system. Instead, all data is stored in four S3 buckets. Three buckets <code>fs</code>, <code>commits</code> and <code>blocks</code> contain assets from file/image column and <code>storage</code> contains the base data.</p> <p>A recommended backup method would be to implement an S3 sync with active versioning and lifecycle management.</p> Example of a S3 sync job with rclone <p>We have had positive experiences using these <code>rclone</code> parameters to synchronize buckets containing millions of objects and terabytes of data. Be sure to customize the command according to your bucket names and rclone configuration.</p> <pre><code>rclone sync source:bucket-name target:bucket-name \\\n    --config /opt/rclone.conf \\\n    --stats 30m \\\n    --stats-one-line \\\n    --stats-log-level NOTICE \\\n    --transfers=16 \\\n    --checkers=16 \\\n    --skip-links \\\n    --s3-no-check-bucket \\\n    --log-file=\"/opt/backup.log\" \\\n    --log-level=NOTICE\n    --size-only\n</code></pre> URL Change during restore <p>If you restore your SeaTable Server with a new URL, don't forget to execute the command line tool to update the URL. Otherwise assets from the image and file columns will not be accessable.</p> Take care to take over the PLUGINS_REPO_ID <p>During the initial startup of the SeaTable container, SeaTable writes a variable called <code>PLUGIN_REPO_ID</code> to <code>dtable_web_settings.py</code>. This variable represents a hidden library that stores the installation files of the SeaTable plugins. If you delete (commenting is not sufficient) this value from the configuration file, SeaTable will generate a new value upon the next start.</p> <p>When performing a migration or restore, you have two options: you can either retain the existing value, ensuring that this repository exists in dtable-storage, or you can delete the value from <code>dtable_web_settings.py</code> and allow SeaTable to create a new one.</p>"},{"location":"maintenance/backup-recovery/#restore","title":"Restore","text":"<p>To restore your server, simply install a fresh new SeaTable Server and then import the mariadb dumps and copy all the user data.</p>"},{"location":"maintenance/backup-recovery/#restore-the-databases","title":"Restore the databases","text":"<pre><code># replace &lt;your_mysql_password&gt; with your actual MySQL password (might be still present in /opt/seatable-compose/.env)\n# beware that this method will expose your mysql password in the process list and shell history of the docker host\n\ndocker exec -i \"mariadb\" \"/usr/bin/mariadb\" -u\"root\" -p'&lt;your_mysql_password&gt;' ccnet_db &lt; /opt/seatable-backup/ccnet_db.sql\ndocker exec -i \"mariadb\" \"/usr/bin/mariadb\" -u\"root\" -p'&lt;your_mysql_password&gt;' seafile_db &lt; /opt/seatable-backup/seafile_db.sql\ndocker exec -i \"mariadb\" \"/usr/bin/mariadb\" -u\"root\" -p'&lt;your_mysql_password&gt;' dtable_db &lt; /opt/seatable-backup/dtable_db.sql\n</code></pre>"},{"location":"maintenance/backup-recovery/#restore-the-seatable-data-and-deployment-settings","title":"Restore the SeaTable data and deployment settings","text":"<p>Simply copy all files back to their original position.</p> <pre><code>rsync -az /opt/seatable-backup/seatable /opt/seatable-server\nrsync -az /opt/seatable-backup/seatable-compose /opt\n</code></pre>"},{"location":"maintenance/backup-recovery/#restore-the-dtable-db-data","title":"Restore the dtable-db data","text":"<p>To restore the big data, you can execute the following command. This will recreate the sql-like database structure from the dumps inside the <code>storage-data</code> folder.</p> <pre><code>docker exec -it seatable-server /opt/seatable/scripts/seatable.sh restore-all\n</code></pre>"},{"location":"maintenance/base-export/","title":"Exporting a Base from the Command Line","text":"<p>SeaTable allows you to export a base using the command line, bypassing typical limitations from the web interface.</p> <p>Big Data Exclusion</p> <p>Please note that the base export does not include big data.</p>"},{"location":"maintenance/base-export/#export-command","title":"Export Command","text":"<p>Use the following command to export a base by its <code>base_uuid</code>. The dtable file will be saved to the <code>/templates</code> folder inside the docker container.</p> <pre><code>docker exec -it seatable-server bash\ncd /templates\nseatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py export_dtable &lt;base_uuid&gt;\n</code></pre> <p>Replace <code>&lt;base_uuid&gt;</code> with the actual UUID of the base.</p>"},{"location":"maintenance/base-export/#exporting-without-assets","title":"Exporting Without Assets","text":"<p>By default, the export includes all data and content from image and file columns. To exclude file/image columns and export only base data, use the <code>--ignore-asset</code> parameter:</p> <pre><code>seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py export_dtable &lt;base_uuid&gt; --ignore-asset true\n</code></pre>"},{"location":"maintenance/base-export/#troubleshooting-large-asset-exports","title":"Troubleshooting Large Asset Exports","text":"<p>If your base contains numerous assets, SeaTable may refuse to export with assets included. To resolve this, increase the <code>max_download_dir_size</code> value in the <code>seafile.conf</code> file and restart SeaTable:</p> <pre><code>[fileserver]\nmax_download_dir_size=1000\n</code></pre> <p>This adjustment allows the creation of dtable files up to 1 GB in size.</p>"},{"location":"maintenance/change-url/","title":"Measurements for domain changed","text":"<p>Changing of domain can make an image or file unreadable in a SeaTable base. Therefore, we provide some commands for users for transferring all the image or file urls from an old domain to a new one in a base.</p> <pre><code>$ docker exec -it seatable /bin/bash\n\n# for one base\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid &lt;:base uuid&gt; -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n\n# for all bases\n$ seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -all -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n</code></pre> <p>For example, we want to change the domain in base '695fa115-4927-4be1-b5b6-fbbbabd43b72' from 'https://dev.seatable.cn' into 'https://cloud.seatable.io' , we can run:</p> <pre><code>seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid 695fa115-4927-4be1-b5b6-fbbbabd43b72  -od https://dev.seatable.cn -nd https://cloud.seatable.io\n</code></pre>"},{"location":"maintenance/command-line-tools/","title":"Command line tools","text":"<p>see here: https://forum.seatable.com/t/reset-export-setting/4236</p>"},{"location":"maintenance/database-cleanup/","title":"Database Cleanup","text":""},{"location":"maintenance/database-cleanup/#automatic-cleanup","title":"Automatic cleanup","text":"<p>5.3</p> <p>Since version 5.3, SeaTable automatically cleans up its database. A background task regularly removes outdated entries from tables that tend to accumulate unnecessary data and cause database bloat. For details on which tables are cleaned and the specific retention periods, refer to the configuration of dtable-events.</p> <p>Not enabled by default for updated systems</p> <p>Database cleanup is enabled by default for new SeaTable installations (version 5.3 and later). However, if you upgrade an existing system to 5.3, the cleanup feature is not activated automatically. In this case, you need to manually configure the cleanup in dtable-events.</p>"},{"location":"maintenance/database-cleanup/#background-information-and-manual-cleanup","title":"Background information and manual cleanup","text":"<p>1.2</p> <p>Although SeaTable has a cleanup mechanism for its database, it is not activated by default. Even if you have a small setup, it is recommended that you setup a single cronjob for cleanup to run for example once a week. Otherwise your database will become bigger and bigger. This article explains all the details.</p>"},{"location":"maintenance/database-cleanup/#why-does-the-database-become-to-big","title":"Why does the database become to big?","text":"<p>The main reason why the SeaTable database grows quickly is due to the storage of the operation log. Every time you change something in a base, this change is stored in the so called operation log. The operation log contains the base, the table, the row and the concrete change. Might might imagine how fast this database table gets if such a huge amount of data is stored every time you change something in the database.</p> <pre><code>{\n  \"op_type\": \"modify_row\",\n  \"table_id\": \"iFMf\",\n  \"row_id\": \"avAf...\",\n  \"updated\": {\n    \"s6km\": [\"91e3...@auth.local\"],\n    \"_last_modifier\": \"1455...@auth.local\"\n  },\n  \"old_row\": { \"s6km\": [\"ea3b...6@auth.local\"] }\n}\n</code></pre> <p>In addition, every 5 minutes <code>dtable-server</code> automatically persists all changes by saving the current version of the base to <code>dtable-storage-server</code>. The operation log is therefore a protection against data loss in case that SeaTable server crashes before the base is persisted. As soon as the base is persisted, the main purpose of the operation log is fulfilled.</p> <p>In addition the operation log is used for the log display inside the base.</p> <p>Let me summarize, the operation log has to purposes:</p> <ol> <li>the operation log protects against data loss in the event that SeaTable Server crashes before the changes are persisted to the json file.</li> <li>the operation log is used for the log/history display inside the base.</li> </ol> <p>Just to give you an idea. At SeaTable Cloud we generate up to 1 Gigabyte per day, mainly driven by the operation log.</p>"},{"location":"maintenance/database-cleanup/#clean-database-records","title":"Clean Database Records","text":"<p>SeaTable provides a command to clear records older than the retention period in the seatable database (the default database name is <code>dtable_db</code>). The retention period is a good mixture of cleaning up old data and keep enough data for the users.</p>"},{"location":"maintenance/database-cleanup/#manual-execution","title":"Manual execution","text":"<p>If you want to run the command manually, here it is:</p> <pre><code>docker exec -it seatable-server /bin/bash\nseatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_db_records\n</code></pre> <p>The following tables will be cleaned:</p> Database table Table description Retention period activities Aggregated log (based on operation_log) recording row creations, modifications, and deletions 30 days delete_operation_log High level log (based on operation_log) recording all row deletions 30 days dtable_notifications User notifications inside the bases 30 days dtable_snapshots Snapshots of bases that are not store in dtable-storage-server 365 days notifications_usernotification User notifications on the home page 30 days operation_log Low level log recording all operations 14 days session_log Low level log recording all user sessions 30 days"},{"location":"maintenance/database-cleanup/#cronjob","title":"Cronjob","text":"<p>If you want to keep your database small, it is necessary to execute your cleanup on a daily or weekly basis. Generate a bash script like the following, give it execution permission and create a cronjob to run it on a regular basis.</p> <pre><code>#!/bin/bash\ndocker exec seatable-server /opt/seatable/scripts/seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_db_records\n</code></pre> <p>The cronjob might look like this:</p> <pre><code># clean system (once a week at saturday at 0:20am)\n0 20 * * 6 /opt/backup/scripts/system_clean.sh &gt; /opt/backup/logs/system_clean.log\n</code></pre>"},{"location":"maintenance/database-cleanup/#clean-operation_log-records-more-efficiently","title":"Clean operation_log records more efficiently","text":"<p>4.1</p> <p>If you system becomes really big, you might want to clean up the operation log faster. Therefore a new more efficient and reliable command was added to clear the useless data in the operation_log table after three days. You can add a cron job to run the command every day.</p> <p>This command has two advantages over the above command:</p> <ol> <li>It will make sure all pending operations be applied to the base before clearing the logs.</li> <li>It will clear the logs in small batch, avoiding consume too much database resource in a short time.</li> </ol> <pre><code>$ docker exec seatable-server /opt/seatable/scripts/seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clean_operation_log\n</code></pre>"},{"location":"maintenance/database-cleanup/#free-space-occupied-by-database","title":"Free space occupied by database","text":"<p>Mariadb and MySQL are quite special if it comes to storage usage. Even if you delete data from your database, the storage will not become available. Space that once was occupied by MySQL is blocked.</p> <p>This becomes problematic if you database becomes huge, because you never cleaned the operation log and now the disk space is full. There are basically two ways to solve this problem.</p>"},{"location":"maintenance/database-cleanup/#check-your-database-size","title":"Check your database size","text":"<p>Login into your SQL command line of your mariadb server. Now execute the following commands to get the size of your databases</p> <pre><code>SELECT table_schema AS \"Database\", ROUND(SUM(data_length + index_length) / 1024 / 1024 / 1024, 2) AS \"Size (GB)\" FROM information_schema.TABLES GROUP BY table_schema;\n</code></pre> <p>The result may look like this:</p> <pre><code>+--------------------+-----------+\n| Database           | Size (GB) |\n+--------------------+-----------+\n| ccnet_db           |      0.04 |\n| dtable_db          |     32.31 |\n| information_schema |      0.00 |\n| seafile_db         |      0.07 |\n+--------------------+-----------+\n4 rows in set (0.005 sec)\n</code></pre> <p>To get the size of the tables inside <code>dtable_db</code> execute one of these commands:</p> <pre><code># get number of rows of the tables inside dtable_db\nSELECT table_name, table_rows FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dtable_db';\n\n# get size of the tables inside dtable_db\nSELECT table_name AS \"Table\", ROUND(((data_length + index_length) / 1024 / 1024), 2) AS \"Size (MB)\" FROM information_schema.TABLES WHERE table_schema = \"dtable_db\";\n</code></pre> <p>To delete all entries from the operation log older than 14 days, you can execute this command:</p> <pre><code>DELETE FROM `operation_log` WHERE `op_time` &lt; UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL 14 DAY))*1000\n</code></pre> <p>Deleting entries from the <code>operation_log</code> table doesn't automatically free up disk space. To reclaim space, you need to delete and recreate the table. Here are two options to achieve this:</p>"},{"location":"maintenance/database-cleanup/#preparation-steps","title":"Preparation Steps:","text":"<ol> <li>Stop SeaTable: It's recommended to stop SeaTable before proceeding to prevent new entries in the <code>operation_log</code>.</li> <li>Keep MariaDB Running: Ensure the MariaDB container is running to access the database command line.</li> <li>Create a Backup: Always create a database backup before direct database operations to mitigate risks.</li> </ol>"},{"location":"maintenance/database-cleanup/#option-1-create-a-copy-and-rename-the-table","title":"Option 1: Create a Copy and Rename the Table","text":"<p>This method requires sufficient disk space to create a duplicate of the existing operation log.</p> <pre><code>USE dtable_db;\nCREATE TABLE operation_log_copy AS SELECT * FROM operation_log;\n\n-- Verify the copy\nSELECT COUNT(*) FROM operation_log;\nSELECT COUNT(*) FROM operation_log_copy;\n\n-- Delete original table\nDROP TABLE operation_log\n\n-- Rename copy\nRENAME TABLE operation_log_copy TO operation_log;\n</code></pre>"},{"location":"maintenance/database-cleanup/#option-2-delete-and-recreate-a-operation-log-table","title":"Option 2: Delete and Recreate a Operation Log Table","text":"<p>Warning</p> <p>This will erase all base logs. You'll lose information about past changes, but snapshots will remain unaffected.</p> <p>Use this method if you have limited disk space. It immediately frees up space occupied by the table.</p> <ol> <li>Connect to MariaDB: <code>docker exec -it mariadb mariadb -u root -p</code></li> <li>Execute the following commands:</li> </ol> <pre><code>USE dtable_db;\nSHOW CREATE TABLE operation_log;\n-- This returns the recreate statement\n\nDROP TABLE operation_log\n-- Paste the recreate statement here, adding \";\" at the end\nCREATE TABLE `operation_log` (...);\n</code></pre> <p>By following these steps, you can effectively manage the disk space used by the <code>operation_log</code> table in your SeaTable installation.</p>"},{"location":"maintenance/database-cleanup/#clean-expired-sessions","title":"Clean expired sessions","text":"<p>The <code>django_session</code> table is used to store user sessions. Expired sessions are not cleaned automatically, the database table will become large when you have a lot of users. The expired sessions can be cleaned up through the <code>clearsessions</code> command:</p> <pre><code>docker exec -it seatable-server /bin/bash\nseatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py clearsessions\n</code></pre>"},{"location":"maintenance/database-cleanup/#database-analysis-commands-for-seatable","title":"Database Analysis Commands for SeaTable","text":"<p>Here's a concise guide for database analysis of a SeaTable Server.</p>"},{"location":"maintenance/database-cleanup/#determine-database-table-sizes","title":"Determine Database Table Sizes","text":"<p>Use the command line tool <code>ncdu</code> on <code>/opt/mariadb</code> for an easy-to-navigate overview of table sizes. Here is an example output. Typically operation_log is by far the biggest table of all.</p> CommandResult <pre><code>$ cd /opt/mariadb\n$ ncdu\n</code></pre> <pre><code>--- /opt/mariadb/dtable_db --------------------------\n  1.7 GiB [###########]  operation_log.ibd\n 72.0 MiB [           ]  django_session.ibd\n 60.0 MiB [           ]  delete_operation_log.ibd\n 23.0 MiB [           ]  activities.ibd\n596.0 KiB [           ]  dtable_external_apps.ibd\n</code></pre>"},{"location":"maintenance/database-cleanup/#analyze-operation-log","title":"Analyze Operation Log","text":"<p>To find bases with the most operations:</p> CommandResult <pre><code>SELECT dtable_uuid, COUNT(*) AS entry_count\nFROM operation_log\nGROUP BY dtable_uuid;\n</code></pre> <pre><code>+----------------------------------+-------------+\n| dtable_uuid                      | entry_count |\n+----------------------------------+-------------+\n| 0114790c116d46fd8b9f2f9331fab623 |           2 |\n| 014a4d23b28147f180f790ae8146c053 |          37 |\n| 01bee901b3dc43df8df0ee58c0ab53a6 |        3312 |\n| 038a126c86c14b55896ceff03237e72a |           1 |\n| 04e403d181e14c41b9026d7f2d9b648b |         324 |\n| 0558d382ef804d5d9eb4e682a3eaa99d |          41 |\n...\n</code></pre>"},{"location":"maintenance/database-cleanup/#identify-active-users-for-a-specific-base","title":"Identify Active Users (for a specific base)","text":"<p>For a specific base like <code>01bee901b3dc43df8df0ee58c0ab53a6</code>:</p> CommandResult <pre><code>SELECT author, COUNT(*) AS entry_count\nFROM operation_log\nWHERE dtable_uuid = '01bee901b3dc43df8df0ee58c0ab53a6'\nGROUP BY author\nORDER BY entry_count DESC;\n</code></pre> <pre><code>+---------------------------------------------+-------------+\n| author                                      | entry_count |\n+---------------------------------------------+-------------+\n|                                             |        2633 |\n| 126a619d86964f78b1871a1738706225@auth.local |         267 |\n| 1bd28d36f01840f7a4db2d813851b951@auth.local |         168 |\n| dtable-web                                  |          32 |\n| faf94d5676414a1d887e538fda19fafd@auth.local |          28 |\n</code></pre>"},{"location":"maintenance/database-cleanup/#analyze-change-frequency","title":"Analyze Change Frequency","text":"<p>To view changes over time:</p> CommandResult <pre><code>SELECT FROM_UNIXTIME(FLOOR(op_time / 3600000) * 3600) AS hour_interval,\nCOUNT(*) AS entry_count\nFROM operation_log\nWHERE dtable_uuid = '01bee901b3dc43df8df0ee58c0ab53a6'\nGROUP BY hour_interval\nORDER BY hour_interval;\n</code></pre> <pre><code>+---------------------+-------------+\n| hour_interval       | entry_count |\n+---------------------+-------------+\n| 2024-09-12 13:00:00 |           7 |\n| 2024-09-12 14:00:00 |          50 |\n| 2024-09-12 15:00:00 |          83 |\n| 2024-09-12 16:00:00 |          63 |\n| 2024-09-12 17:00:00 |          53 |\n</code></pre>"},{"location":"maintenance/database-cleanup/#remove-base-entries","title":"Remove Base Entries","text":"<p>To safely remove all entries for a specific base from operation_log:</p> CommandResult <pre><code>DELETE FROM operation_log WHERE dtable_uuid = '01bee901b3dc43df8df0ee58c0ab53a6';\n</code></pre> <pre><code>Query OK, 3312 rows affected (0.094 sec)\n</code></pre>"},{"location":"maintenance/debugging/","title":"Advanced debugging by adding error messages","text":"<p>Sometimes SeaTable does not behave like you expect it to behave. Then it is time for some advanced debugging skills. This article debugs a possible problem to give you some knowledge that might help you to solve other problems, too. To follow this explanation you should have at least some development experience.</p>"},{"location":"maintenance/debugging/#the-problem-user-not-found","title":"The problem: User not found","text":"<p>Imagine the situation that the \"Share a base with other users\" does not show the users you expected.</p> <p></p> <p>You have no idea why the auto complete function is not working as expected. So let's find out.</p>"},{"location":"maintenance/debugging/#check-the-developer-tools-of-your-browser","title":"Check the Developer Tools of your browser","text":"<p>The first check that you can perform is the Browser Console and the networking tab of your developer tools.</p>"},{"location":"maintenance/debugging/#the-console-tab","title":"The console tab","text":"<p>In this case there are not errors in the console tab. That means there are not general JavaScript execution errors or bad Api endpoints. If you have problems inside your network like firewalls blocking traffic, unsigned certificates or something like that, you will most likely see an error in the browser console tab. In this case there is no error message.</p>"},{"location":"maintenance/debugging/#the-network-tab","title":"The network tab","text":"<p>In the network tab, you can detect what kind of calls are executed, if you search for a user.</p> <p></p> <p>From the results you can see that with every key stroke SeaTable executes a command like:</p> <pre><code>/api2/search-user/?q=demo\n</code></pre> <p>So let's find this source code in the SeaTable Container.</p>"},{"location":"maintenance/debugging/#find-the-python-source-code","title":"Find the Python Source Code","text":"<p>Access your SeaTable Server container and let's search for the source code. I start my search in <code>dtable-web/seahub</code>.</p> <pre><code>docker exec -it seatable-server bash\ncd /opt/seatable/seatable-server-latest/dtable-web/seahub\ngrep -R \"search-user\" ./\n\n# the result\n./api2/urls.py:    re_path(r'^search-user/$', SearchUser.as_view(), name='search-user'),\n</code></pre> <p>Now let's get a closer look at this <code>/api2/urls.py</code> at <code>/opt/seatable/seatable-server-latest/dtable-web/seahub/api2/urls.py</code>.</p> <p>There you can find at the beginning of this file, this content:</p> <pre><code>from .endpoints.search_user import SearchUser\n</code></pre> <p>This tells us, that the source code of this search function is in the file <code>/opt/seatable/seatable-server-latest/dtable-web/seahub/api2/endpoints/search_user.py</code>.</p>"},{"location":"maintenance/debugging/#add-custom-error-messages","title":"Add custom error messages","text":"<p>In this python file, I can immediately see that there is the <code>class SearchUser(APIView)</code>. In the class I can see that the code checks for some parameters like:</p> <ul> <li>user.permission.can_use_global_address_book</li> <li>CLOUD_MODE</li> <li>is_org_context</li> </ul> <p>Also I can see that SeaTable first generates a list of potential users and then removes out unwanted entries. So why not check if the user we are looking for is in the full list and then removed or if the user is not in there.</p> <p>Let's add this additional logging at line 94. Make sure that you use the right indentation, because otherwise the python code will throw errors.</p> <pre><code>        ## search finished, now filter out some users\n        logger.error(\"This is email_list: %s \" % email_list)\n</code></pre>"},{"location":"maintenance/debugging/#check-the-logs","title":"Check the logs","text":"<p>Now let's restart SeaTable and check the dtable_web.log for more details.</p> <pre><code># we are still in the SeaTable Server container.\nseatable.sh restart\ntail -f /opt/seatable/logs/dtable_web.log\n</code></pre>"},{"location":"maintenance/domain-change/","title":"Domain Change","text":"<p>Changing the hostname of a SeaTable Server instance will render all files and images stored in bases inaccessible. </p> <p>To restore access, their file paths must be modified using a command line script:</p> <pre><code>docker exec -it seatable-server /bin/bash\n\n# for one base\nseatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid &lt;:base uuid&gt; -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n\n# for all bases\nseatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -all -od &lt;:old domain&gt; -nd &lt;:new domain&gt;\n</code></pre> <p>For example, to change the domain from 'https://seatable.example.com' to 'https://table.example.com' for base '695fa115-4927-4be1-b5b6-fbbbabd43b72', run this command:</p> <pre><code>seatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py domain_transfer -uuid 695fa115-4927-4be1-b5b6-fbbbabd43b72  -od https://seatable.example.com -nd https://table.example.com\n</code></pre>"},{"location":"maintenance/filesystem-check/","title":"File System Check","text":"<p>On the server side, SeaTable stores the files in the libraries in an internal format. SeaTable has its own representation of directories and files (similar to Git).</p> <p>With default installation, these internal objects are stored in the server's file system directly (such as Ext4, NTFS). But most file systems don't assure the integrity of file contents after a hard shutdown or system crash. So if new SeaTable internal objects are being written when the system crashes, they can be corrupt after the system reboots. This will make part of the corresponding library not accessible.</p> <p>Note: If you store the seafile-data directory in a battery-backed NAS (like EMC or NetApp), or use S3 backend available in the Pro edition, the internal objects won't be corrupt.</p> <p>SeaTable server comes with a seaf-fsck tool to help you recover from this corruption (similar to git-fsck tool). This tool recovers any corrupted library back to its last consistent and usable state.</p> <p>We provide a seaf-fsck.sh script. The seaf-fsck tool accepts the following arguments:</p> <pre><code>docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh [--repair|-r] [--export|-E export_path] [repo_id_1 [repo_id_2 ...]]\n</code></pre> <p>There are three modes of operation for seaf-fsck:</p> <ol> <li>checking integrity of tables.</li> <li>repairing corrupted tables.</li> <li>exporting tables.</li> </ol>"},{"location":"maintenance/filesystem-check/#checking-integrity-of-libraries","title":"Checking Integrity of Libraries","text":"<p>Running seaf-fsck.sh without any arguments will run a read-only integrity check for all tables.</p> <pre><code>docker exec -it seatable /opt/seatable/seatable-server-latest/seaf-fsck.sh\n</code></pre> <p>If you want to check integrity for specific tables, just append the library id's as arguments:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh [library-id1] [library-id2] ...\n</code></pre> <p>The output looks like:</p> <pre><code>[02/13/15 16:21:07] fsck.c(470): Running fsck for repo ca1a860d-e1c1-4a52-8123-0bf9def8697f.\n[02/13/15 16:21:07] fsck.c(413): Checking file system integrity of repo fsck(ca1a860d)...\n[02/13/15 16:21:07] fsck.c(35): Dir 9c09d937397b51e1283d68ee7590cd9ce01fe4c9 is missing.\n[02/13/15 16:21:07] fsck.c(200): Dir /bf/pk/(9c09d937) is corrupted.\n[02/13/15 16:21:07] fsck.c(105): Block 36e3dd8757edeb97758b3b4d8530a4a8a045d3cb is corrupted.\n[02/13/15 16:21:07] fsck.c(178): File /bf/02.1.md(ef37e350) is corrupted.\n[02/13/15 16:21:07] fsck.c(85): Block 650fb22495b0b199cff0f1e1ebf036e548fcb95a is missing.\n[02/13/15 16:21:07] fsck.c(178): File /01.2.md(4a73621f) is corrupted.\n[02/13/15 16:21:07] fsck.c(514): Fsck finished for repo ca1a860d.\n</code></pre> <p>The corrupted files and directories are reported.</p> <p>Sometimes you can see output like the following:</p> <pre><code>[02/13/15 16:36:11] Commit 6259251e2b0dd9a8e99925ae6199cbf4c134ec10 is missing\n[02/13/15 16:36:11] fsck.c(476): Repo ca1a860d HEAD commit is corrupted, need to restore to an old version.\n[02/13/15 16:36:11] fsck.c(314): Scanning available commits...\n[02/13/15 16:36:11] fsck.c(376): Find available commit 1b26b13c(created at 2015-02-13 16:10:21) for repo ca1a860d.\n</code></pre> <p>This means the \"head commit\" (current state of the library) recorded in database is not consistent with the library data. In such case, fsck will try to find the last consistent state and check the integrity in that state.</p> <p>Tips: If you have many libraries, it's helpful to save the fsck output into a log file for later analysis.</p>"},{"location":"maintenance/filesystem-check/#repairing-corruption","title":"Repairing Corruption","text":"<p>Corruption repair in seaf-fsck basically works in two steps:</p> <ol> <li>If the library state (commit) recorded in database is not found in data directory, find the last available state from data directory.</li> <li>Check data integrity in that specific state. If files or directories are corrupted, set them to empty files or empty directories. The corrupted paths will be reported, so that the user can recover them from somewhere else.</li> </ol> <p>Running the following command repairs all the libraries:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --repair\n</code></pre> <p>Most of time you run the read-only integrity check first, to find out which libraries are corrupted. And then you repair specific libraries with the following command:</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --repair [library-id1] [library-id2] ...\n</code></pre> <p>After repairing, in the library history, seaf-fsck includes the list of files and folders that are corrupted. So it's much easier to located corrupted paths.</p>"},{"location":"maintenance/filesystem-check/#best-practice-for-repairing-a-library","title":"Best Practice for Repairing a Library","text":"<p>To check all libraries and find out which library is corrupted, the system admin can run seaf-fsck.sh without any argument and save the output to a log file. Search for keyword \"Fail\" in the log file to locate corrupted libraries. You can run seaf-fsck to check all libraries when your Seafile server is running. It won't damage or change any files.</p> <p>When the system admin find a library is corrupted, he/she should run seaf-fsck.sh with \"--repair\" for the library. After the command fixes the library, the admin should inform user to recover files from other places. There are two ways:</p> <ul> <li>Upload corrupted files or folders via the web interface</li> <li>If the library was synced to some desktop computer, and that computer has a correct version of the corrupted file, re-syncing the library on that computer will upload the corrupted files to the server.</li> </ul>"},{"location":"maintenance/filesystem-check/#exporting-libraries-to-file-system","title":"Exporting Libraries to File System","text":"<p>Since version 4.2.0, you can use seaf-fsck to export all the files in libraries to external file system (such as Ext4). This procedure doesn't rely on the seafile database. As long as you have your seafile-data directory, you can always export your files from Seafile to external file system.</p> <p>The command syntax is</p> <pre><code>cd seafile-server-latest\n./seaf-fsck.sh --export top_export_path [library-id1] [library-id2] ...\n</code></pre> <p>The argument <code>top_export_path</code> is a directory to place the exported files. Each library will be exported as a sub-directory of the export path. If you don't specify library ids, all libraries will be exported.</p> <p>Currently only un-encrypted libraries can be exported. Encrypted libraries will be skipped.</p>"},{"location":"maintenance/garbage-collection/","title":"Garbage Collection","text":"<p>SeaTable uses storage de-duplication technology to reduce storage usage. The underlying data blocks will not be removed immediately after you delete a file or a base. As a result, the number of unused data blocks will increase on SeaTable server.</p> <p>To release the storage space occupied by unused blocks, you have to run a garbage collection program to clean up unused blocks on your server.</p>"},{"location":"maintenance/garbage-collection/#configuration","title":"Configuration","text":"<p>Add the following lines to <code>seafile.conf</code> to keep deleted files for only 60 days:</p> <pre><code>[history]\nkeep_days = 60\n</code></pre>"},{"location":"maintenance/garbage-collection/#dry-run-mode","title":"Dry-run mode","text":"<p>To see how much garbage can be collected without actually removing any garbage, use the dry-run option:</p> <pre><code>docker exec seatable-server /opt/seatable/scripts/seatable.sh gc --dry-run\n</code></pre> <p>The output should look like:</p> <pre><code>Starting seafserv-gc, please wait ...\n2021-04-27 14:30:13 gc-core.c(904): Database is MySQL/Postgre/Oracle, use online GC.\n2021-04-27 14:30:13 gc-core.c(928): Using up to 1 threads to run GC.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo plugins repo(92ba689b-51a3-457b-a264-1e46537025c8)\n2021-04-27 14:30:13 gc-core.c(609): No blocks for repo 92ba689b, skip GC.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo My Workspace(7041b9ea-cec7-43a1-9639-70aaeb572aed)\n2021-04-27 14:30:13 gc-core.c(615): GC started for repo 7041b9ea. Total block number is 14.\n2021-04-27 14:30:13 gc-core.c(78): GC index size is 1024 Byte for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(390): Populating index for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(369): Traversed 22 commits, 14 blocks for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(682): Scanning and deleting unused blocks for repo 7041b9ea.\n2021-04-27 14:30:13 gc-core.c(700): GC finished for repo 7041b9ea. 14 blocks total, about 14 reachable blocks, 0 blocks are removed.\n\n2021-04-27 14:30:13 gc-core.c(873): GC version 1 repo My Library Template(3fe6b035-2e0f-4c2f-9347-2673b5778e72)\n2021-04-27 14:30:13 gc-core.c(609): No blocks for repo 3fe6b035, skip GC.\n\n...\n\n2021-04-27 14:30:13 gc-core.c(773): === Repos deleted by users ===\n2021-04-27 14:30:13 gc-core.c(1041): Repo fb882070-d158-4433-a038-6be0117560e0 can be GC'ed.\n...\n2021-04-27 14:30:13 gc-core.c(980): === GC is finished ===\n\n2021-04-27 14:30:13 gc-core.c(1226): The following repos have blocks to be removed:\n2021-04-27 14:30:13 gc-core.c(1229): 09a91b76-df37-44d4-81e0-416e4397c9f6\n\nseafserv-gc run done\n\nDone.\n</code></pre>"},{"location":"maintenance/garbage-collection/#removing-garbage","title":"Removing Garbage","text":"<p>Run a garbage collection program without adding --dry-run option to actually remove garbage block.</p> <pre><code>docker exec seatable-server /opt/seatable/scripts/seatable.sh gc\n</code></pre>"},{"location":"maintenance/helper-scripts/","title":"Helper Scripts","text":"<p>After installing SeaTable, <code>/opt/seatable-compose/tools</code> contains the following shell scripts in order to make administrative operations more convenient. </p>"},{"location":"maintenance/helper-scripts/#user-management","title":"User management","text":""},{"location":"maintenance/helper-scripts/#activate-usersh","title":"activate-user.sh","text":"<p>This script allows you to enable an existing SeaTable user inside the database. Simply provide the user's contact email address as a parameter:</p> <pre><code>./tools/activate-user.sh \"user@email.com\"\n</code></pre> <p>Output</p> <pre><code>--------------\nUPDATE ccnet_db.EmailUser SET is_active = 1 WHERE email = (SELECT user FROM dtable_db.profile_profile WHERE contact_email = 'user@email.com')\n--------------\n\nQuery OK, 1 row affected (0.002 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nBye\nSuccess: Activated user user@email.com\n</code></pre>"},{"location":"maintenance/helper-scripts/#deactivate-usersh","title":"deactivate-user.sh","text":"<p>This script allows you to disable an existing SeaTable user inside the database. Simply provide the user's email address as a parameter:</p> <pre><code>./tools/deactivate-user.sh \"user@email.com\"\n</code></pre> <p>Output</p> <pre><code>--------------\nUPDATE ccnet_db.EmailUser SET is_active = 0 WHERE email = (SELECT user FROM dtable_db.profile_profile WHERE contact_email = 'user@email.com')\n--------------\n\nQuery OK, 1 row affected (0.002 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nBye\nSuccess: Deactivated user user@email.com\n</code></pre>"},{"location":"maintenance/helper-scripts/#user-statssh","title":"user-stats.sh","text":"<p>This script will print your current license limit and query the database for the number of enabled users:</p> <pre><code>./tools/user-stats.sh\n</code></pre> <p>Output</p> <pre><code>User limit according to license file: 3\n\nUsers in database:\n+-------+--------------+\n| users | active_users |\n+-------+--------------+\n|     2 |            2 |\n+-------+--------------+\n</code></pre>"},{"location":"maintenance/helper-scripts/#database-management","title":"Database management","text":""},{"location":"maintenance/helper-scripts/#db-shellsh","title":"db-shell.sh","text":"<p>This script will give you an interactive shell inside the MariaDB container. You can use this to directly run SQL commands.</p> <pre><code>./tools/db-shell.sh\n</code></pre> <p>Output</p> <pre><code>Welcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 73\nServer version: 11.4.3-MariaDB-ubu2404 mariadb.org binary distribution\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]&gt;\n</code></pre>"},{"location":"maintenance/helper-scripts/#dump-databasesh","title":"dump-database.sh","text":"<p>This script will dump all three databases (<code>ccnet_db</code>, <code>dtable_db</code> and <code>seahub_db</code>) to <code>/opt/seatable-backup</code> on the host.</p> <pre><code>./tools/dump-database.sh\n</code></pre> <p>Output</p> <pre><code>Success: Dumped databases into /opt/seatable-backup\n</code></pre> <p>Created Files</p> <pre><code>total 228\n-rw-r--r-- 1 root root  12184 May 23 11:30 ccnet_db-2025-05-23-11-30-27.sql\n-rw-r--r-- 1 root root 177499 May 23 11:30 dtable_db-2025-05-23-11-30-27.sql\n-rw-r--r-- 1 root root  38402 May 23 11:30 seafile_db-2025-05-23-11-30-27.sql\n</code></pre>"},{"location":"maintenance/logs/","title":"Logs","text":""},{"location":"maintenance/logs/#log-files-of-seatable-server","title":"Log files of SeaTable server","text":"<p>The SeaTable logs are under <code>/shared/seatable/logs</code> in the docker, or <code>/Your SeaTable data volume/seatable/logs</code> in the server that run the docker.</p> <p>Main log files:</p> <ul> <li>dtable_web.log: logs for dtable-web</li> <li>dtable-events.log: logs for dtable-events</li> <li>dtable_events_io.log: logs for Base's import or export and Excel or CSV file import or export</li> <li>dtable_events_message.log: logs for sending emails in the dtable-events background</li> <li>dtable-server.log: logs for dtable-server</li> <li>dtable-db.log: logs for dtable-db</li> <li>dtable-db-error.log: error logs for dtable-db</li> <li>dtable-db-access.log: query log for dtable-db</li> <li>dtable-db-slow.log: slow query log for dtable-db</li> </ul> <p>Other log files:</p> <ul> <li>seafile.log: logs of Seafile server</li> <li>slow_logs: Slow request logs, which can be used to debug performance issues</li> <li>monitor.log: Monitor logs, monitor.sh can auto restart the unexpectedly closed server</li> <li>init.log: Logs for docker initialization script</li> </ul>"},{"location":"maintenance/logs/#log-files-of-nginx-server","title":"Log files of Nginx server","text":"<p>The Nginx logs are under <code>/shared/nginx-logs</code>, or <code>/Your SeaTable data volume/nginx-logs</code> in the server that run the docker.</p> <ul> <li>dtable-web.access.log</li> <li>dtable-web.error.log</li> <li>access.log</li> <li>error.log</li> </ul>"},{"location":"maintenance/logs/#logrotate","title":"Logrotate","text":"<p>SeaTable's Docker container executes nightly log rotation cron jobs for both SeaTable and nginx logs. The cron jobs are configured as follows:</p> <pre><code>54 23 * * * /usr/sbin/logrotate -vf /templates/logrotate-conf/seatable-nginx 2&gt;&gt; /opt/seatable/logs/logrotate.log\n55 23 * * * /usr/sbin/logrotate -vf /templates/logrotate-conf/seatable 2&gt;&gt; /opt/seatable/logs/logrotate.log\n</code></pre>"},{"location":"maintenance/logs/#logrotate-configuration","title":"Logrotate Configuration","text":"<p>The log rotation configuration is straightforward and includes the following parameters:</p> <pre><code>{\n        daily\n        missingok\n        rotate 7\n        # compress\n        # delaycompress\n        dateext\n        dateformat .%Y-%m-%d\n        notifempty\n        create 644 root root\n        sharedscripts\n        postrotate\n                if [ -f /opt/seatable/pids/seafile.pid ]; then\n                        kill -USR1 `cat /opt/seatable/pids/seafile.pid`\n                fi\n\n                if [ -f /opt/seatable/pids/dtable-db.pid ]; then\n                        kill -USR1 `cat /opt/seatable/pids/dtable-db.pid`\n                fi\n\n                if [ -f /opt/seatable/pids/dtable-storage-server.pid ]; then\n                        kill -USR1 `cat /opt/seatable/pids/dtable-storage-server.pid`\n                fi\n\n                if [ -f /opt/seatable/pids/api-gateway.pid ]; then\n                        kill -USR1 `cat /opt/seatable/pids/api-gateway.pid`\n                fi\n\n                if [ -f /opt/seatable/pids/dtable-web.pid ]; then\n                        pkill -HUP gunicorn\n                fi\n\n                find /opt/seatable/logs/ -mtime +7 -name \"*.log*\" -exec rm -f {} \\;\n        endscript\n}\n</code></pre> <p>This configuration ensures:</p> <ul> <li>Daily log rotation.</li> <li>Retention of logs for seven days.</li> <li>Addition of timestamps to rotated logs using dateext.</li> <li>Automatic removal of old logs older than seven days.</li> </ul> <p>All relevant configuration files are located in <code>/templates/logrotate-conf</code> within the SeaTable Docker container.</p>"},{"location":"maintenance/logs/#customizing-logrotate-configuration","title":"Customizing Logrotate Configuration","text":"<p>To modify the log rotation settings, you can mount a custom configuration file using Docker Compose. Add the following snippet to your yml-file:</p> <pre><code>services:\n  seatable-server:\n    image: ...\n    ...\n    volumes:\n      - \"./logrotate-seatable-custom.conf:/templates/logrotate-conf/seatable:ro\"\n      ...\n</code></pre> <p>Don't change the default YML-files</p> <p>Avoid making changes directly to <code>seatable-server.yml</code>, as this file will be overwritten during updates. Instead, use a separate custom configuration file mounted via Docker Compose.</p> <pre><code># create a custom copy\ncp seatable-server.yml custom-seatable-server.yml\n\n# Don't forget to update the filename in your .env\n</code></pre>"},{"location":"maintenance/password-reset/","title":"Password Reset","text":""},{"location":"maintenance/password-reset/#user-management","title":"User Management","text":"<p>When you setup SeaTable, you should have setup a admin account. After you logged in a admin, you may add/delete users.</p>"},{"location":"maintenance/password-reset/#resetting-user-password","title":"Resetting User Password","text":"<p>Administrator can reset password for a user in \"System Admin\" page.</p> <p>In a private server, the default settings doesn't support users to reset their password by email. If you want to enable this, you have first to set up notification email.</p>"},{"location":"maintenance/password-reset/#forgot-admin-account-or-password","title":"Forgot Admin Account or Password?","text":"<p>You may create a new admin account from the command line. Use these commands and follow the instructions on the screen.</p> <pre><code>docker exec -it seatable-server bash\nseatable.sh superuser\n</code></pre> <p>After logging in the new admin account, you can reset the original admin account's password.</p>"},{"location":"maintenance/repair-base/","title":"Repair/Prune a base from the command line","text":"<p>SeaTable provides a repair script that can be executed from the command line to fix/repair typical problems with a base:</p> <ul> <li>Ensures that every table has a column with the ID <code>0000</code></li> <li>Removes all rows and views without an ID</li> </ul> <p>In addition, the repair script prunes the base by removing the content of deleted columns from the JSON object to reduce the size of the base, thus avoiding the 200MB limit.</p> <p>This can free up quite a lot of space if you have deleted columns with lots of values since deleting a column does not immediately remove the column values from the JSON object. Instead, only the column definition is removed.</p> <p>For the execution you need the <code>base_uuid</code>.</p> <pre><code>docker exec -it seatable-server bash\ncd /templates\nseatable.sh python-env /opt/seatable/seatable-server-latest/dtable-web/manage.py repair_base &lt;base_uuid&gt;\n</code></pre>"},{"location":"maintenance/restart-seatable/","title":"Restarting the SeaTable service","text":"<p>Changes in the configuration files, require a restart of the SeaTable service.</p>"},{"location":"maintenance/restart-seatable/#method-1-restart-from-outside-the-container","title":"Method 1: Restart from outside the container","text":"<p>To restart the SeaTable service directly from your host command line, use:</p> <pre><code>docker exec seatable-server /opt/seatable/scripts/seatable.sh\n</code></pre> <p>This command runs the SeaTable startup script inside the container, managing all necessary service processes. You must specify the full path to <code>seatable.sh</code> because the Docker exec command does not use the container\u2019s <code>PATH</code> environment variable by default.</p>"},{"location":"maintenance/restart-seatable/#method-2-restart-from-inside-the-container","title":"Method 2: Restart from inside the container","text":"<p>Alternatively, you can open an interactive shell inside the container and run the script manually:</p> <pre><code>docker exec -it seatable-server bash\nseatable.sh\nexit\n</code></pre> <p>When using an interactive shell, you do not need to specify the full path to <code>seatable.sh</code> because the container\u2019s <code>PATH</code> is available. After restarting the service, type <code>exit</code> to leave the container shell.</p>"},{"location":"maintenance/restart-seatable/#restarting-the-docker-container","title":"Restarting the docker container","text":"<p>Alternatively, you can restart the complete SeaTable Docker container. This is useful if you need to ensure all processes and services inside the container are refreshed.</p> <p>You need to vavigate to your SeaTable compose directory (commonly <code>/opt/seatable-compose</code>), then run:</p> <pre><code>/opt/seatable-compose\ndocker stop seatable-server\ndocker compose up -d\n</code></pre> <p>This will stop the SeaTable container and then restart it in detached mode. All related services defined in your <code>docker-compose.yml</code> will also be managed according to your configuration.</p>"},{"location":"maintenance/secrets/","title":"Secrets Management","text":""},{"location":"maintenance/secrets/#secret_key","title":"SECRET_KEY","text":"<p>During initialization, SeaTable generates a <code>SECRET_KEY</code> and saves this random string to the configuration file <code>dtable_web_settings.py</code>.</p> <p>This <code>SECRET_KEY</code> serves two critical functions:</p> <ol> <li>Generating user sessions</li> <li>Encrypting \"thirdparty account passwords\"</li> </ol> <p>Changing the SECRET_KEY</p> <p>It is strongly discouraged to change the <code>SECRET_KEY</code> after initial setup. Modifying it will result in:</p> <ul> <li>\"Thirdparty accounts\" becoming inaccessible</li> <li>All current user sessions becoming invalid</li> </ul> <p>If you absolutely must change the <code>SECRET_KEY</code>, follow these steps:</p> <ol> <li>Delete all thirdparty accounts from all bases</li> <li>Stop SeaTable</li> <li>Change the <code>SECRET_KEY</code></li> <li>Restart SeaTable</li> <li>All users will need to log in again</li> <li>Create new thirdparty accounts as needed</li> </ol>"},{"location":"maintenance/secrets/#private_key","title":"PRIVATE_KEY","text":"<p>Configured via environment variable since 5.3</p> <p>Starting with v5.3, this secret should be provided via environment variable <code>JWT_PRIVATE_KEY</code> in your <code>/opt/seatable-compose/.env</code> file. There is no need to keep the two variables in your configuration files.</p> Configured in configuration files before 5.3 <p>SeaTable generates a <code>PRIVATE_KEY</code> during initialization for secure inter-component communication between dtable-web and dtable-server/dtable-db. This key is used in two configuration files and must be identical:</p> <ol> <li><code>dtable_server_config.json</code>: as <code>private_key</code></li> <li><code>dtable_web_settings.py</code>: as <code>DTABLE_PRIVATE_KEY</code></li> </ol> <p>If you update this <code>PRIVATE_KEY</code>, always ensure that these PRIVATE_KEY values match across both configuration files to maintain proper system functionality.</p>"},{"location":"upgrade/extra-upgrade-notice/","title":"Extra upgrade notice","text":""},{"location":"upgrade/extra-upgrade-notice/#53","title":"5.3","text":"<p>SeaTable v5.3 introduces several significant changes. To make the transition as smooth as possible, we\u2019ve provided a script that handles most of the work for you. Simply run the script to get started.</p> <pre><code>bash /opt/seatable-compose/migrate/migrate_5.2_5.3.sh\n</code></pre> <p>Of course, you can skip this script and make the changes manually. The following sections explain each change in detail, but this approach requires a deeper understanding of SeaTable and Docker.</p> Centralized secret for secure communication <p>SeaTable uses a JWT secret for secure communcation between the SeaTable components: <code>dtable-web</code>, <code>dtable-server</code> and <code>dtable-db</code>. </p> <p>Before v5.3, this secret was stored in <code>dtable_web_settings.py</code> and <code>dtable_server_config.json</code>. </p> <p>Starting with v5.3, this JWT secret should be provided via environment variable <code>JWT_PRIVATE_KEY</code> in your <code>/opt/seatable-compose/.env</code> file. </p> Script (easy way)Manual <p>Execute the migration script below; you only need to run it once.</p> <pre><code>bash /opt/seatable-compose/migrate/migrate_5.2_5.3.sh\n</code></pre> <ul> <li>Retrieve the value of <code>private_key</code> from <code>dtable_server_config.json</code>.</li> <li>Add the environment variable <code>JWT_PRIVATE_KEY=xxx</code> to your .env file.</li> <li>Remove the <code>private_key</code> entry from <code>dtable_server_config.json</code>.</li> <li>Remove the <code>DTABLE_PRIVATE_KEY</code> entry from <code>dtable_web_settings.py</code>.</li> </ul> Centralized MariaDB and Redis configuration <p>Starting with version 5.3, SeaTable no longer stores database and Redis credentials in configuration files, but centrally as environment variables. This eliminates redundant configuration settings and makes the configuration files much smaller.</p> Script (easy way)Manual <p>Execute the migration script below; you only need to run it once.</p> <pre><code>bash /opt/seatable-compose/migrate/migrate_5.2_5.3.sh\n</code></pre> <ul> <li>Open <code>/opt/seatable-compose/.env</code> and rename the variable <code>SEATABLE_MYSQL_ROOT_PASSWORD</code> to <code>MARIADB_PASSWORD</code>.</li> <li>Open <code>/opt/seatable-server/seatable/conf/dtable-events.conf</code> and remove the entire <code>[DATABASE]</code> and <code>[REDIS]</code> sections.</li> <li>Open <code>/opt/seatable-server/seatable/conf/dtable_server_config.json</code> and remove the three lines with <code>redis_</code> and the five lines related to <code>mariadb</code> (host, user, password, database, port).</li> <li>Open <code>/opt/seatable-server/seatable/conf/dtable_web_settings.py</code> and remove the entire blocks for <code>DATABASES = {...}</code> and <code>CACHES = {...}</code>.</li> <li>Open <code>/opt/seatable-server/seatable/conf/seafile.conf</code> and remove the entire <code>[database]</code> section.</li> </ul> <p>In most cases the <code>dtable_server_config.json</code> should now only contain <code>{}</code>.</p> Mandatory API Gateway in Nginx <p>Starting with version 5.3, the SeaTable API Gateway is used to handle all base loading and websocket connections. This requires significant changes to the nginx configuration file. Due to the complexity and potential for errors, we have decided to provide the nginx configuration file together with the yml files and to mount the configuration into the container.</p> Mount configuration file (easy way)Manual <p>You don't have to do anything. The file <code>/opt/seatable-compose/config/seatable-nginx.conf</code> will be mounted to the container.  The old configuration file located at <code>/opt/seatable-server/seatable/config/nginx.conf</code> is no longer used and can be removed.</p> <ul> <li>Remove or comment out the volume mount of the nginx configuration from <code>seatable-server.yml</code>. Please note that changes to the .yml files are overwritten with the next update. Create a <code>custom-xxx.yml</code> file instead.</li> <li>Remove the locations <code>/dtable-db</code> and <code>dtable-server</code></li> <li>Change the location <code>/socket.io</code> to <code>/api-gateway/socket.io/</code>, and update <code>http://dtable_servers</code> to <code>http://127.0.0.1:7780/socket.io/</code></li> </ul> <p>It should look like this:</p> <pre><code>    # OLD:\n    #location /socket.io {\n    #    proxy_pass http://dtable_servers;\n\n    # NEW:\n    location /api-gateway/socket.io/ {\n        proxy_pass http://127.0.0.1:7780/socket.io/;\n</code></pre> Migration of comments <p>Before 5.3, comments in the base and universal app were handled separately. With 5.3, these comments are merged.  After starting the SeaTable container, you need to run this command once to migrate the comments. Don't re-execute it, otherwise your comments will be merged twice.</p> <p>First enter the docker container.</p> <pre><code>docker exec -it seatable-server bash\n</code></pre> <p>Then merge the comments.</p> <pre><code>cd /opt/seatable/seatable-server-latest/dtable-web\nseatable.sh python-env manage.py merge_app_comments_to_base\n</code></pre> Database Cleanup <p>With 5.3, SeaTable automatically enables periodic database cleanup tasks for new installations . This behavior is deliberately not enabled for existing installations.</p> <p>However, we strongly recommend enabling these tasks to ensure that your database stays performant. It also prevents your server from running out of disk space.</p> <p>You can achieve this by setting the following option in <code>/opt/seatable-server/seatable/conf/dtable-events.conf</code>:</p> <pre><code>[CLEAN DB]\nenabled = true\n</code></pre> <p>Please refer to this document for detailed information on the possible configuration options.</p> ccnet.conf is obsolete <p>The configuration file <code>ccnet.conf</code> is no longer necessary and can be removed. </p> Script (Easy Way)Manual <p>Execute the migration script below; you only need to run it once.</p> <pre><code>bash /opt/seatable-compose/migrate/migrate_5.2_5.3.sh\n</code></pre> <p>Remove the configuration file <code>/opt/seatable-server/seatable/conf/ccnet.conf</code>.</p> New Report Design plugin <p>We've developed a new report design plugin, which requires an additional Docker container on your SeaTable server. For installation, follow the instructions available here. </p> Maps Plugin utilizes two API Keys <p>The Google Maps Plugin now uses two separate Google API keys instead of one. Please refer to the documentation for further details.</p>"},{"location":"upgrade/extra-upgrade-notice/#52","title":"5.2","text":"From Two to One: Redis Unifies Caching, Retiring Memcached <p>Starting with version 5.2, Redis replaces Memcached as the default cache. Memcached has been removed from the <code>seatable-server.yml</code> file in seatable-release. This reduces the number of required caching containers from two to one.</p> <p>The following changes are required, if you're upgrading SeaTable to version 5.2</p> <p>Updating your caching configuration in <code>/opt/seatable-server/seatable/conf/dtable_web_settings.py</code>:</p> <p>Replace this:</p> <pre><code>CACHES = {\n    'default': {\n        'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',\n        'LOCATION': 'memcached',\n    },\n    'locmem': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    },\n}\nCOMPRESS_CACHE_BACKEND = 'locmem'\n</code></pre> <p>With this:</p> <pre><code>CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.redis.RedisCache',\n        'LOCATION': 'redis://redis:6379',\n    }\n}\n</code></pre> <ul> <li>Remove the line with <code>COMPRESS_CACHE_BACKEND</code>.</li> <li>Adjust <code>redis://redis:6379</code> if your Redis container name or port differ. (<code>redis://&lt;container-name&gt;:&lt;container-port&gt;</code>)</li> </ul> <p>Restart SeaTable:</p> <pre><code>docker exec -it seatable-server bash\nseatable.sh restart # Run inside the container\n</code></pre> <p>If the Memcached container is still running, you can now stop it and remove it.</p> <pre><code>docker stop memcached\n</code></pre> S3 with Memcached <p>If you're using S3 object storage for files and pictures AND have Memcached configured in your <code>seafile.conf</code> file, it is crucial that you update your configuration. Otherwise you can ignore this notice.</p> <p>Please follow the instructions in our help article about caching for S3.</p> New Snapshot and Backup Retention Strategy <p>With version 5.2, SeaTable introduces a tiered retention strategy for Big Data Backups and Base Snapshots. While updating your settings is optional, it's recommended to take advantage of the new features. You can find the new options in:</p> <ul> <li>dtable-db.conf</li> <li>dtable-storage-server.conf</li> </ul> New Whiteboard plugin <p>The Excalidraw-based whiteboard plugin introduced in v5.0 is now deprecated and will be removed in v5.3. We've developed a new whiteboard plugin using tldraw, which requires an additional Docker container on your SeaTable server.</p> <p>For installation, follow the instructions available here. You can easily copy and paste your drawings from the old plugin to the new one. If you have any problems, please report at the forum.</p>"},{"location":"upgrade/extra-upgrade-notice/#51","title":"5.1","text":"<p>There are no version-specific changes required.</p>"},{"location":"upgrade/extra-upgrade-notice/#50","title":"5.0","text":"API gateway mandatory for external links and big data <p>Starting with version 5.0, all requests for external links, external view links or big data views are routed through the API gateway. If you haven't configured the API gateway with version 4.4, you need to do so now for version 5.0.</p> <p>To configure the API gateway, add the following location block to your <code>/opt/seatable-server/seatable/conf/nginx.conf</code> file. Insert this section at the end of the configuration file, just before the final closing curl bracket:</p> <pre><code>location /api-gateway/ {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n    add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n    if ($request_method = 'OPTIONS') {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n        add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n        return 204;\n    }\n    proxy_pass         http://127.0.0.1:7780/;\n    proxy_redirect     off;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Forwarded-Host  $server_name;\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    access_log         /opt/nginx-logs/api-gateway.access.log seatableformat;\n    error_log          /opt/nginx-logs/api-gateway.error.log;\n}\n</code></pre> <p>Afterwards check your nginx configuration file for syntax errors and then restart nginx.</p> <pre><code>docker exec seatable-server nginx -t\ndocker exec seatable-server nginx -s reload\n</code></pre> Force usage of API gateway endpoints <p>The following configuration is optional and can be omitted if you have no issues with API performance, rate limits, and resources. Yet, we recommend using the new <code>/api-gateway/</code> endpoints for faster responses and reduced workload on your SeaTable Server.</p> <p>To enforce redirection of the <code>List Rows</code> and <code>Get Row</code> calls to the API gateway, append the following codeblock to your <code>dtable_server_config.json</code> file:</p> <pre><code>\"redirect_list_rows_api\": true,\n\"dtable_web_service_url\": \"https://seatable.example.com/\"\n</code></pre> <p>Replace <code>seatable.example.com</code> with your SeaTable Server hostname (include the trailing '/').</p> <p>Afterwards, restart SeaTable with:</p> <pre><code>docker exec -it seatable-server /shared/seatable/scripts/seatable.sh restart\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#44","title":"4.4","text":"Migration to storage server required <p>Important: This change applies only to users whose initial installed SeaTable Server version was 1.x or 2.x.:</p> <p>With SeaTable Server version 3.0, a new storage server was introduced, which is the default storage type of bases since 3.0. If you started with version 1.x or 2.x, you might need to migrate some of your bases, because SeaTable will stop supporting the old storage mechanism with version 4.4.</p> <p>The migration is easy. First, ensure that you have the following setting in your <code>dtable_web_settings.py</code>:</p> <pre><code>NEW_DTABLE_IN_STORAGE_SERVER = True\n</code></pre> <p>Then, run these commands to migrate your bases:</p> <pre><code># list number of bases that are not stored in storage-server\ndocker exec -it seatable-server /templates/migrate_bases.sh --list\n\n# migrate 10 bases to storage-server (repeat this command until all bases are migrated)\ndocker exec -it seatable-server /templates/migrate_bases.sh --migrate 10\n</code></pre> <p>Afterwards, restart SeaTable with:</p> <pre><code>docker exec -it seatable-server /shared/seatable/scripts/seatable.sh restart\n</code></pre> New API gateway <p>With this version, we have introduced a new component to SeaTable Server: the API gateway. This optimized API handler is designed to efficiently manage external API requests for base operations. The API gateway is now started by default and requires no additional configuration files. However, you will need to update your nginx configuration to make the new API endpoints, located at <code>/api-gateway/</code>, accessible.</p> <p>To add this new location, please modify your <code>/opt/seatable-server/seatable/conf/nginx.conf</code> file. You can add the following section at the end of the configuration file, just before the final closing bracket:</p> <pre><code>location /api-gateway/ {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n    add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n    if ($request_method = 'OPTIONS') {\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;\n        add_header Access-Control-Allow-Headers \"deviceType,token, authorization, content-type\";\n        return 204;\n    }\n    proxy_pass         http://127.0.0.1:7780/;\n    proxy_redirect     off;\n    proxy_set_header   Host              $http_host;\n    proxy_set_header   X-Real-IP         $remote_addr;\n    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Forwarded-Host  $server_name;\n    proxy_set_header   X-Forwarded-Proto $scheme;\n    access_log         /opt/nginx-logs/api-gateway.access.log seatableformat;\n    error_log          /opt/nginx-logs/api-gateway.error.log;\n}\n</code></pre> <p>Afterwards check your nginx configuration file for syntax errors and restart nginx.</p> <pre><code>docker exec seatable-server nginx -t\ndocker exec seatable-server nginx -s reload\n</code></pre> New Docker container for easy backup <p>We've added a new backup container to our lineup of components to simplify your backup process. Using Docker, installation is quick and easy. Our selected backup software, restic, supports a wide range of backup targets, including S3, Backblaze, local storage, and more. With restic's reliability, your data is secure with every backup.</p>"},{"location":"upgrade/extra-upgrade-notice/#43","title":"4.3","text":"New default setup with multiple predefined yml files <p>Version 4.3 introduces a new installation method relying on multiple yml files, an .env file and caddy as new reverse proxy. This setup is more convenient and will be the basis for all future explanations.</p> <p>It is not mandatory to switch to this new setup but it is recommended. Read this article for more information.</p> MariaDB container healthchecks <p>This help is important if your MariaDB container remains unhealthy after executing <code>docker compose up -d</code>. This issue arises specifically if your initial MariaDB version was below 10.6 and you have now upgraded to a newer version. Older versions did not create the required health check user in the local database, causing the health checks to fail.</p> <p>We have provided a simple script for you to download and create the necessary health check user. Please use the following commands to download and execute it. The script assumes the MariaDB container is running and that you have followed all installation instructions outlined in this manual.</p> <pre><code>curl -sSL https://admin.seatable.com/downloads/add_mariadb_healthcheck.sh | bash\n</code></pre> <p>If you wish to review the script's functionality, simply open it in your browser: Add MariaDB Healthcheck Script.</p> <p>The script essentially adds the user <code>healthcheck</code> to the MariaDB database and stores the credentials in a file accessible to the container.\"</p> Django CSRF protection <p>Django 4.* has introduced a new check for the origin http header in CSRF verification. It now compares the values of the origin field in HTTP header and the host field in HTTP header. If they are different, an error is triggered.</p> <p>If you deploy Seafile behind a proxy, if you use a non-standard port or if you deploy Seafile in cluster, it is likely that the origin field in HTTP header received by Django and the host field in HTTP header received by Django are different. This mismatch results in a CSRF error.</p> <p>You can add <code>CSRF_TRUSTED_ORIGINS</code> to <code>dtable_web_settings.py</code> to solve the problem:</p> <pre><code>CSRF_TRUSTED_ORIGINS = [\"https://&lt;your-domain&gt;\"]\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#40","title":"4.0","text":"Big data storage migration needed (Enterprise only) <p>Version 4.0 modifies the data format of the backup of big data storage. Compared with previous upgrades, an additional format migration script needs to be run inside the docker:</p> <pre><code># replace seatable if you container image is called differently.\ndocker exec -it seatable /templates/migrate-dtable-db-backups.sh\n</code></pre> Universal App is now enabled by default <p>The Enterprise Edition enables the Universal app by default. The option ENABLE_UNIVERSAL_APP is removed from <code>dtable_web_settings.py</code>.</p> Recycle bin is emptied after 30 days <p>SeaTable empties the recycle bin automatically after 30 days. If you want to change this default behaviour, add the following option to your <code>dtable_web_settings.py</code>.</p> <pre><code>TRASH_CLEAN_AFTER_DAYS = 30\n</code></pre> New API Limits <p>API_THROTTLE_RATES is used to replace the old REST_FRAMEWORK option. Usually the default values of the API_THROTTLE_RATES are good. Change the following values only if need higher limits. Add one of multiple options to your <code>dtable_web_settings.py</code>.</p> <pre><code>API_THROTTLE_RATES = {\n'ping': '3000/minute',\n'anon': '60/minute',\n'user': '3000/minute',\n'sync_common_dataset': '60/minute',\n'password_reset': '10/minute',\n'org-admin': '1000/day',\n'app': '1000/minute',\n'import': '20/minute',   # Limit the rate of API calls for importing via excel/csv\n'export': '20/minute',   # Limit the rate of export base, table and view\n}\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#30","title":"3.0","text":"New component: dtable-storage-server <p>3.0 adds another component, dtable-storage-server, which provides better performance for persistent storage of bases. A base in SeaTable is saved as a file, which is automatically saved every 5 minutes. In 2.x, this file saved in seaf-server, but seaf-server will keep a version for each save, which will take up a lot of disk space. In 3.0, only one version is actually saved when a snapshot is generated every 24 hours, which saves space. dtable-storage-server is a simple abstract layer of traditional file system and object storage.</p> <ol> <li>For new installation, dtable-storage-server.conf will be generated automatically. For upgrade from 2.x, you need to generate the config file manually</li> </ol> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh init\n</code></pre> <p>dtable-storage-server.conf is as follows</p> <pre><code>[general]\nlog_dir = /opt/seatable/logs\ntemp_file_dir = /tmp/tmp-storage-data\n\n[storage backend]\ntype = filesystem\npath = /opt/seatable/storage-data\n\n[snapshot]\ninterval = 86400\nkeep_days = 180\n</code></pre> <ol> <li>Add configuration in dtable_web_settings.py so that the newly created bases are saved to the dtable-storage-server, and the old bases are still read and written from seaf-server.</li> </ol> <p>In dtable_web_settings.py</p> <pre><code>NEW_DTABLE_IN_STORAGE_SERVER = True\n</code></pre> <ol> <li>Enterprise edition needs to add configuration items in dtable-db.conf to automatically back up the archived data in the dtable-db.</li> </ol> <p>In <code>dtable-db.conf</code></p> <pre><code>[backup]\ndtable_storage_server_url = http://127.0.0.1:6666\nbackup_interval = 1440\nkeep_backup_num = 3\n</code></pre> <ol> <li>Migrate bases to storage server</li> </ol> <p>Run these commands to list and migrate your bases to the new storage server.</p> <pre><code># list number of bases that are not stored in storage-server\ndocker exec -it seatable-server /templates/migrate_bases.sh --list\n\n# migrate 10 bases to storage-server (repeat this command until all bases are migrated)\ndocker exec -it seatable-server /templates/migrate_bases.sh --migrate 10\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#27","title":"2.7","text":"Embed into iframes <p>The configuration of the embedded base to other webpages (iframe mode) needs to be modified as follows</p> <p>In dtable_web_settings.py</p> <pre><code>SESSION_COOKIE_SAMESITE = None\n            |\n            V\nSESSION_COOKIE_SAMESITE = 'None'\n\nCSRF_COOKIE_SAMESITE = None\n            |\n            V\nCSRF_COOKIE_SAMESITE = 'None'\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#23","title":"2.3","text":"Configuration changes of dtable-db <p>In 2.3 version, we made a small change to dtable-db configuration. If you're upgrading from older versions, you have to manually add below option to conf/dtable-db.conf:</p> <pre><code>[general]\n......\nlog_dir = /shared/seatable/logs\n\n......\n</code></pre> <p>It's also suggested to change the <code>total_cache_size</code> option to a larger value (e.g. 500MB, depending on how much memory you have):</p> <pre><code>[dtable cache]\n......\ntotal_cache_size = 500\n\n......\n</code></pre> <p>You also need to add access information to dtable-server MySQL database. (You have to change below options based on your conf/dtable-server.json)</p> <pre><code>[database]\nhost = 127.0.0.1\nuser = root\npassword = mypass\ndb_name = dtable\n</code></pre> <p>Add <code>DTABLE_DB_URL</code> to dtable_web_settings.py</p> <pre><code>DTABLE_DB_URL = 'https://&lt;your-domain&gt;/dtable-db/'\n</code></pre> <p>Add dtable-db configuration to nginx.conf</p> <pre><code>    location /dtable-db/ {\n        proxy_pass         http://127.0.0.1:7777/;\n        proxy_redirect     off;\n        proxy_set_header   Host              $host;\n        proxy_set_header   X-Real-IP         $remote_addr;\n        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header   X-Forwarded-Host  $server_name;\n        proxy_set_header   X-Forwarded-Proto $scheme;\n\n        access_log      /opt/nginx-logs/dtable-db.access.log seatableformat;\n        error_log       /opt/nginx-logs/dtable-db.error.log;\n    }\n</code></pre>"},{"location":"upgrade/extra-upgrade-notice/#21","title":"2.1","text":"New component: dtable-db <p>2.1 add another component dtable-db, which is used to provide SQL query API (more features will be provided based on this component). For newly installation, the config file will be generated automatically. For upgrade from 2.0, you need to add the config file manually.</p> <p>Add a new file conf/dtable-db.conf with the following contents and modify <code>private_key</code> according to your instance:</p> <pre><code>[general]\nhost = 127.0.0.1\nport = 7777\n\n[storage]\ndata_dir = /opt/seatable/db-data\n\n[dtable cache]\nprivate_key = \"my private key\"\ndtable_server_url = \"http://127.0.0.1:5000\"\nexpire_time = 600\ntotal_cache_size = 1\nclean_cache_interval = 300\n</code></pre> <p>The value of <code>private_key</code> should be the same as the value in <code>dtable_server_config.json</code>.</p> <p>dtable_server_url should be http://127.0.0.1:5000. You don't need to modify the value.</p>"},{"location":"upgrade/migrate-seatable-editions/","title":"Migrate between SeaTable Editions","text":"<p>The migration between SeaTable Enteprise Edition and SeaTable Developer Edition is easy and possible at any time. Please make sure that you only migrate between the same major and minor versions:</p> <ul> <li>3.3.7 Enterprise Edition  3.3.0 Developer Edition is </li> <li>3.2.0 Developer Edition  3.2.6 Enterprise Edition is </li> <li>3.3.7 Enterprise Edition  3.4.0 Developer Edition is </li> <li>3.2.0 Developer Edition  3.3.7 Enterprise Edition is </li> </ul> <p>You can find the available images and their versions at  docker hub:</p> <ul> <li>Available Enterprise Editions</li> <li>Available Developer Editions</li> </ul> <p>Backup is recommended</p> <p>To protect your data, it is strongly recommended to back up the database prior to the migration. See the section on backup and recovery for details.</p>"},{"location":"upgrade/migrate-seatable-editions/#migration","title":"Migration","text":"<p>Basically for the migration only two things are important:</p> <ul> <li>provide a seatable server license (if necessary)</li> <li>switch the used docker image</li> </ul> <p>After a restart of the docker containers, SeaTable takes care of the rest. So let see what you have to do.</p> Migrate from Enterprise Edition to Developer Edition Migrate from Developer Edition to Enterprise Edition"},{"location":"upgrade/migrate-seatable-editions/#enterprise-to-developer-edition","title":"Enterprise to Developer Edition","text":""},{"location":"upgrade/migrate-seatable-editions/#stop-seatable-server","title":"Stop SeaTable Server","text":"<p>Stop all containers that are currently running.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose down\n</code></pre>"},{"location":"upgrade/migrate-seatable-editions/#switch-images","title":"Switch images","text":"<p>Open your <code>/opt/seatable-compose/.env</code> file and add this line to use the SeaTable developer image. Make sure to replace <code>latest</code> with the correct version as described at the beginning of this article.</p> <pre><code>SEATABLE_IMAGE='seatable/seatable-developer:latest'\n</code></pre>"},{"location":"upgrade/migrate-seatable-editions/#restart-seatable-server","title":"Restart SeaTable Server","text":"<p>Just copy and paste these commands to restart seatable.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"upgrade/migrate-seatable-editions/#developer-to-enterprise-edition","title":"Developer to Enterprise Edition","text":""},{"location":"upgrade/migrate-seatable-editions/#stop-seatable-server_1","title":"Stop SeaTable Server","text":"<p>Stop all containers that are currently running.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose down\n</code></pre>"},{"location":"upgrade/migrate-seatable-editions/#modify-your-env-file","title":"Modify your .env file","text":"<p>Open your .env file and search for the definition of SEATABLE_IMAGE. It should point to <code>seatable/seatable-developer</code>. Either remove this line or add the correct SeaTable Enterprise Edition.</p>"},{"location":"upgrade/migrate-seatable-editions/#provide-the-seatable-server-licence-file","title":"Provide the seatable-server licence file","text":"<p>Save the <code>seatable-license.txt</code> to <code>/opt/seatable-compose</code>.</p>"},{"location":"upgrade/migrate-seatable-editions/#restart-seatable-server_1","title":"Restart SeaTable Server","text":"<p>Just copy and paste these commands to restart seatable.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/","title":"Migrate to new installation method","text":"<p>4.3.10</p> <p>To bring your SeaTable Server into the /opt/seatable-compose form used by version 4.3.10 and greater, the following needs to be done:</p> <ul> <li>Change directory structure</li> <li>Change container names</li> <li>Modify configuration files</li> <li>Remove Python Runner, FAAS Scheduler and OnlyOffice (will be activated again after the migration)</li> </ul> <p>SeaTable 5.3. renders parts of this documentation obsolete</p> <p>A key part of this migration is the change in how MariaDB and Redis connections are configured. Beginning with version 5.3, MariaDB and Redis are now managed through the <code>.env</code> file, so you can remove these entries from the configuration files.</p> <p>Additionally, you will need to add new variables to the <code>.env</code> file.</p> <p>Please read the Extra upgrade notices carefully.</p> <p>Backup is recommended</p> <p>Updating SeaTable Server might entail changes to your database. To make sure your data is protected in any case, we recommend to create a backup/dump of your databases before the update. See backup and recovery for more details.</p>"},{"location":"upgrade/migrate-seatable-release/#required-steps","title":"Required steps","text":""},{"location":"upgrade/migrate-seatable-release/#1-stop-all-containers","title":"1. Stop all containers","text":"<p>Stop all containers (not only SeaTable) but also Python Runner, FAAS Scheduler and OnlyOffice.</p> <pre><code>cd /opt/seatable\ndocker compose down\n</code></pre> <p>docker-compose vs docker compose</p> <p>The usage of <code>docker-compose</code> (with - in the command) is not supported any longer. Please switch to the new command <code>docker compose</code>. Please refer to the offical install instructions. For Debian and Ubuntu, this should be sufficient:</p> <pre><code>apt update &amp;&amp; \\\napt remove docker-compose\ncurl -fsSL get.docker.com | bash\n</code></pre> <p>Check for running containers with <code>docker container list</code>. Execute <code>docker stop &lt;container-name&gt;</code> for containers still running.</p>"},{"location":"upgrade/migrate-seatable-release/#2-remove-python-pipeline-and-onlyoffice","title":"2. Remove Python Pipeline and OnlyOffice","text":"<p>If you installed OnlyOffice, Python Runner or FAAS Scheduler, you should remove the associated folders.</p> <pre><code>rm -r /opt/onlyoffice\nrm -r /opt/seatable-python-runner\nrm -r /opt/seatable-faas-scheduler\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#3-get-password-and-other-values-from-docker-composeyml","title":"3. Get password and other values from docker-compose.yml","text":"<p>Open up your current docker-compose.yml with the editor of your choice (such as vim or nano) and note these three values:</p> <ul> <li>MYSQL_ROOT_PASSWORD</li> <li>SEATABLE_SERVER_HOSTNAME</li> <li>TIME_ZONE</li> </ul> <p>Rename docker-compose.yml to docker-compose.old so that it is no longer used:</p> <pre><code>mv /opt/seatable/docker-compose.yml /opt/seatable/docker-compose.old\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#4-create-new-env-file","title":"4. Create new .env file.","text":"<p>Copy and paste these commands to download the new installation method.</p> <pre><code>mkdir /opt/seatable-compose &amp;&amp; \\\ncd /opt/seatable-compose &amp;&amp; \\\nwget -c https://github.com/seatable/seatable-release/releases/latest/download/seatable-compose.tar.gz \\\n-O - | tar -xz -C /opt/seatable-compose &amp;&amp; \\\ncp -n .env-release .env\n</code></pre> <p>Open <code>/opt/seatable-compose/.env</code> with your editor of choice and assign the values noted in 3. to these three variable:</p> <ul> <li>TIME_ZONE</li> <li>SEATABLE_MYSQL_ROOT_PASSWORD</li> <li>SEATABLE_SERVER_HOSTNAME</li> </ul> <p>Additionally, the two variables SEATABLE_ADMIN_EMAIL and SEATABLE_ADMIN_PASSWORD must be specified. Currently the values are only used during the initial installation but this might change in the future.</p> <p>Developer edition requires an additional variable</p> <p>If you are using SeaTable Developer Edition instead of Enterprise Edition, add the following parameter to your <code>.env</code> file. This overwrites the used SeaTable Docker image.</p> <pre><code>SEATABLE_IMAGE='seatable/seatable-developer:latest' # (1)!\n</code></pre> <ol> <li>Instead of using the latest tag, you can select any specific version from https://hub.docker.com/r/seatable/seatable-developer/tags.</li> </ol>"},{"location":"upgrade/migrate-seatable-release/#5-move-the-license-file","title":"5. Move the license file","text":"<p>SeaTable Enterprise requires a license to start</p> <p>This step is solely required for SeaTable Enterprise Edition. You can skip this step for SeaTable Developer Edition and just create an empty file at <code>/opt/seatable-compose/seatable-license.txt</code>.</p> <p>Copy your existing seatable-license.txt to this <code>/opt/seatable-compose</code> folder:</p> <pre><code>cp /opt/seatable/seatable-data/seatable-license.txt /opt/seatable-compose/\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#6-move-two-folders","title":"6. Move two folders","text":"<p>Move two folders, which contain Docker volumnes, to new paths.</p> <pre><code>mv /opt/seatable/mysql-data /opt/mariadb\nmv /opt/seatable/seatable-data /opt/seatable-server\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#7-change-database-container-in-configuration-file","title":"7. Change database container in configuration file","text":"<p>Previously, the mariadb container was named db. In the new deployment method, we call this container by its full name: mariadb. Consequently, we must update the configuration files so as to enable SeaTable to find the SQL-database and connect to it.</p> <p>All changes must be done in <code>/opt/seatable-server/seatable/conf</code>. Update the following configuration files as described with your editor of choice.</p> <pre><code>cd /opt/seatable-server/seatable/conf\nnano ccnet.conf\n# replace ccnet.conf with the other configuration file names and update all files\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#ccnetconf","title":"ccnet.conf","text":"<pre><code>HOST = db   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#dtable-dbconf","title":"dtable-db.conf","text":"<p>No change needed.</p>"},{"location":"upgrade/migrate-seatable-release/#dtable-eventsconf","title":"dtable-events.conf","text":"<pre><code>[DATABASE]\nhost = db   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#dtable_server_configjson","title":"dtable_server_config.json","text":"<pre><code>\"host\": \"db\"   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#dtable-storage-serverconf","title":"dtable-storage-server.conf","text":"<p>No change needed.</p>"},{"location":"upgrade/migrate-seatable-release/#dtable_web_settingspy","title":"dtable_web_settings.py","text":"<pre><code>DATABASES = {\n    'default': {\n        ...\n        'HOST': 'db'   # change to mariadb\n        ...\n    }\n}\n\nSEATABLE_FAAS_URL = 'https://seatable-faas.example.com'  # if you had the Python Runner and FAAS Scheduler configured, remove this variable entirely\nSEATABLE_FAAS_AUTH_TOKEN = 'secret_string'     # if you had the Pythong Runner and FAAS Scheduler configured, remove this variable entirely\n\nENABLE_ONLYOFFICE = False  # if you had OnlyOffice configured, remove this variable entirely\nONLYOFFICE_APIJS_URL = \"https://seatable.example.com/onlyofficeds/web-apps/apps/api/documents/api.js\"  # if you had OnlyOffice configured, remove this variable entirely\nONLYOFFICE_FILE_EXTENSION = ('doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'odt', 'fodt', 'odp', 'fodp', 'ods', 'fods', 'csv', 'ppsx', 'pps')  # if you had OnlyOffice configured, remove this variable entirely\nONLYOFFICE_JWT_SECRET = 'asecretjwttoken' # if you had OnlyOffice configured, remove this variable entirely\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#seafileconf","title":"seafile.conf","text":"<pre><code>host = db   # change to mariadb\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#8-remove-https-from-nginx","title":"8. Remove HTTPS from nginx","text":"<p>In this step, the configuration of nginx, which is included in the SeaTable Server container, must be changed to account for the addition of caddy in the new deplyoment method to take care of TLS termination and certificate management. Specifically, this requires that nginx no longer listens on port 443 (HTTPS), but only on port 80 (HTTP).</p> <p>First let's make a copy of your current nginx file to make sure that we have a safety net just in case.</p> <pre><code>cp /opt/seatable-server/seatable/conf/nginx.conf /opt/seatable-server/seatable/conf/nginx.backup\n</code></pre> <p>Now we want to make these changes in the <code>nginx.conf</code>:</p> <ol> <li>We want to remove the server block which is reponsible for listening to port 80 (or change it to another port)</li> <li>We want to update the second server block and change port 443 to 80</li> <li>We want to remove all lines that start with ssl_</li> </ol> <p>You can do this with these commands:</p> <pre><code>cd /opt/seatable-server/seatable/conf\nsed -i 's/ listen 80/ listen 9999/' ./nginx.conf\nsed -i 's/ listen 443 ssl/ listen 80/' ./nginx.conf\nsed -i '/^[[:space:]]*ssl_/d' ./nginx.conf\n</code></pre>"},{"location":"upgrade/migrate-seatable-release/#9-start-your-seatable-server","title":"9. Start your SeaTable Server","text":"<p>Now the migration is complete and it is time to start SeaTable Server again.</p> <pre><code>cd /opt/seatable-compose\ndocker compose up -d\n</code></pre> <p>Be patient and give the containers time to start. Then open your browser and check if you can access your SeaTable Server.</p> <p>If your SeaTable Server does not react as expected, check the FAQ/Troubleshooting article. In case your mariadb container stays unhealthy, check the Extra upgrade notices for version 4.3.</p> <p>Please note that additional components like the Python Pipeline or an integrated Online Editor will not be working at this point.</p>"},{"location":"upgrade/migrate-seatable-release/#10-add-additional-components","title":"10. Add additional components","text":"<p>To setup the Python Pipeline or an Online Editor, please follow the manuals in the Installation section.</p>"},{"location":"upgrade/upgrade-manual/","title":"Upgrade manual","text":"<p>Updating/Upgrade (we don't differenciate) a SeaTable Server should take just a few seconds. Simply pull the latest Docker images for all components, restart the containers, and let the system automatically handle necessary database updates. Within moments, all essential services of the SeaTable Server will be accessible.</p> <p>No Rollback After Upgrade, Backup first!</p> <p>After upgrading SeaTable, rolling back to a previous version is not supported due to possible changes in the database and files. Attempting to downgrade can cause data loss or system errors.</p> <p>Always make a full backup before upgrading. For instructions, see Backup and Recovery for more details.</p>"},{"location":"upgrade/upgrade-manual/#how-to-update-seatable-server","title":"How to update SeaTable Server","text":"<p>Just ran this command to update SeaTable and all additional components.</p> <pre><code>cd /opt/seatable-compose &amp;&amp; \\\nwget -c https://github.com/seatable/seatable-release/releases/latest/download/seatable-compose.tar.gz \\\n-O - | tar -xz -C /opt/seatable-compose &amp;&amp; \\\ndocker compose pull\ndocker compose down\ndocker compose up -d\n</code></pre> <p>SeaTable does not start - follow extra upgrade notices first</p> <p>If your SeaTable Server fails to start after updating the YAML files, required update-specific changes may be missing. Please review and follow the extra upgrade notices and then run <code>docker compose up -d</code> again.</p> <p>The default yml files will be overwritten! Use custom files instead.</p> <p>This command replaces all predefined yml files in your <code>/opt/seatable-compose</code> folder. It will not touch your .env file and your \"custom\" yml files. If you made some changes to the predefined yml files, make sure to save these changes and follow the recommendations to create custom copies in the future.</p> <p>After some seconds your SeaTable Server should be reachable again. You can check the current version of your SeaTable Server opening the URL <code>https://&lt;your-seatable-domain&gt;/server-info</code>.</p> <p>Now, you should login as system administrator, switch to the system admin are, and update the plugins as well. You can find more information about the updating the plugins here.</p>"},{"location":"upgrade/upgrade-manual/#version-specific-changes-and-configurations","title":"Version specific changes and configurations","text":"<p>Some versions require specific configuration changes. Also new features might be introduced that needs specific configuration. Please check after each update the extra update notices.</p>"},{"location":"upgrade/upgrade-manual/#naming-conventions-and-update-path","title":"Naming conventions and update path","text":"<p>SeaTable follows typical naming conventions for updates:</p> <ul> <li>2 3 is a major version upgrade.</li> <li>3.3 3.4 is a minor version upgrade.</li> <li>3.3.3 3.3.5 is a patch upgrade.</li> </ul> <p>Some software solutions require that you follow a specific update path. Meaning like you first have to upgrade to the next major version and then go on. This is not necessary with SeaTable.</p> <p>You can update from any version to the last one in one step. SeaTable v4.3 and newer take care of the required database updates.</p>"},{"location":"upgrade/upgrade-manual/#update-procedure-with-one-single-docker-composeyml-deprecated","title":"Update procedure with one single docker-compose.yml (deprecated)","text":"<p>With version 4.3 we introduced a new way to install, update and maintain a SeaTable server. Before 4.3 you used to have one big docker-compose.yml. Even if it not mandatory to switch this setup, but we recommend it. Please check out this article for more details.</p> <p>Open your <code>docker-compose.yml</code> file and search for <code>seatable/seatable-enterprise:{tag}</code>. Replace the {tag} with the latest version and save the file.</p> <p>Now, execute these commands to pull and start the newest version.</p> <pre><code>docker compose pull\ndocker compose up -d\n</code></pre> <p>This will not update any other service in your docker-compose file. You have to take care by yourself to keep the other services up-to-date. Therefore it is recommended to migrate to the newest installation method with multiple YAML files.</p>"},{"location":"upgrade/upgrade-manual/#update-procedure-before-v43-deprecated","title":"Update procedure before v4.3 (deprecated)","text":"<p>This part of the manual is only for older version, meaning if you are updating to version v4.2 or older. As soon as you update to version 4.3 or newer, you can ignore the following part.</p> Update procedure before v4.3 <p>In general, to upgrade to a new version, you need to</p> <ol> <li>Pull a new docker image version</li> <li>Stop the service and do the database migration manually</li> <li>Restart the service</li> </ol> <p>If there are extra notes for a specific version, you can find it here: extra notices</p>"},{"location":"upgrade/upgrade-manual/#get-latest-seatable","title":"Get latest SeaTable","text":"<p>You can find all versions of SeaTable from Docker Hub.</p> <p>Run the following command to get the latest version of Seatable.</p> <pre><code>docker pull seatable/seatable-enterprise:{tag}\n</code></pre> <p>Stop the currently running SeaTable container.</p> <pre><code>docker compose down\n</code></pre> <p>Then modify SeaTable version in \"docker-compose.yml\". And start a new SeaTable container.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"upgrade/upgrade-manual/#upgrade-database","title":"Upgrade database","text":"<p>Major version upgrade, like from 1.x to 2.x, and minor version upgrade, like from 1.1.x to 1.2.x, involve database changes. You need to manually change the database like following.</p> <p>Login to the SeaTable container. Then execute the upgrade statement (replace the version numbers accordingly).</p> <pre><code># Example of the required commands to update from 3.2.6 to 3.5.10\ndocker exec -it seatable /bin/bash\n\nseatable.sh upgrade-sql 3.3\nseatable.sh upgrade-sql 3.4\nseatable.sh upgrade-sql 3.5\n</code></pre> <p>If the above commands failed to execute for some reasons, (for example, you are using external database instead of the default one started by docker-compose), you can execute the database upgrade commands manually as below:</p> <pre><code>docker exec -it seatable /bin/bash\n\ncd /opt/seatable/seatable-server-latest/sql/mysql/upgrade\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt; ./3.3/dtable.sql\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt; ./3.4/dtable.sql\nmysql -h$DB_HOST -p$DB_ROOT_PASSWD dtable_db &lt; ./3.5/dtable.sql\n</code></pre> <p>If you upgrade several versions at once, just run all the database upgrade statement one by one, starting from the lowest version.</p> <p>Tiny version update</p> <p>Tiny version upgrade, like from 3.3.8 to 3.3.10, does not involve database changes.</p>"},{"location":"upgrade/upgrade-manual/#start-seatable-server","title":"Start SeaTable server","text":"<p>Now you can start the SeaTable service. Execute the following command in the host server:</p> <pre><code>docker exec -d seatable /shared/seatable/scripts/seatable.sh start\n</code></pre>"}]}